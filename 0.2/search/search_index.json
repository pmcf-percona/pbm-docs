{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Percona Backup for MongoDB documentation","text":"<p>Percona Backup for MongoDB (PBM) is an open source and distributed solution for consistent backups and restore of MongoDB sharded clusters and replica sets. Read more how PBM works.</p> <p>Make backups on a running server and restore your database to a specific point in time using the PBM command line interface. Alternatively, manage backups from a web interface with PBM and Percona Monitoring and Management. </p> <p></p>"},{"location":"index.html#installation-guides","title":"Installation guides","text":"<p>Ready to try out PBM? Get started quickly with the step-by-step installation instructions.</p> <p>Quickstart guides </p>"},{"location":"index.html#backup-management","title":"Backup management","text":"<p>Learn what you can do to maintain your backup strategy.</p> <p>Backup management </p>"},{"location":"index.html#administration","title":"Administration","text":"<p>Tweak PBM to effectively perform your day-to-day operations.</p> <p>Administration </p>"},{"location":"index.html#diagnostics-and-faq","title":"Diagnostics and FAQ","text":"<p>Our comprehensive resources will help you overcome challenges, from everyday issues to specific doubts.</p> <p>Run diagnostics </p>"},{"location":"index.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"404.html","title":"404 - Not Found","text":"<p>We can\u2019t find the page you are looking for. Try using the Search or return to the homepage.</p> <p></p>"},{"location":"404.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"copyright.html","title":"Copyright and licensing information","text":""},{"location":"copyright.html#documentation-licensing","title":"Documentation licensing","text":"<p>Percona Backup for MongoDB documentation is (C)2016-2023 Percona LLC and/or its affiliates and is distributed under the Creative Commons Attribution 4.0 International Public License license.</p> <p></p>"},{"location":"copyright.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"installation.html","title":"Quickstart guide","text":"<p>Percona Backup for MongoDB (PBM) is an open source and distributed solution for consistent backups and restore of MongoDB sharded clusters and replica sets. Learn how PBM works.</p> <p>Find the list of supported platforms for Percona Backup for MongoDB on the Percona Software and Platform Lifecycle page.</p>"},{"location":"installation.html#system-requirements","title":"System requirements","text":"<ul> <li>At least 1GB RAM is required on every node for <code>pbm-agents</code> to operate successfully.</li> <li> <p>All <code>pbm-agents</code> in the cluster must be able to connect to all config server replica set nodes that could become a new primary. In non-sharded replica set deployments, this means to connect to all the nodes that could become a new primary node. To become a primary, a node must meet the following criteria:</p> <ul> <li>have <code>priority</code> greater than <code>0</code> and must be able to vote (<code>votes</code>: 1)</li> <li>is not an arbiter (<code>arbiterOnly: false</code>)</li> <li>is not hidden (<code>hidden: false</code>)</li> <li>is not delayed </li> </ul> </li> <li> <p>All <code>pbm-agents</code> in your deployment must be able to connect to the same remote backup storage using the same credentials.</p> </li> </ul> <p>Note that networking issues like connection to the remote backup storage can also affect PBM performance. </p>"},{"location":"installation.html#tutorials","title":"Tutorials","text":"<p>You can use any of the easy-install guides but we recommend using the package manager of your operating system for a convenient and quick way to try the software first.</p>  Package manager Docker Kubernetes Build from source Manual download <p>Use the package manager of your operating system to install Percona Backup for MongoDB:</p> <ul> <li><code>apt</code> - for Debian and Ubuntu Linux</li> <li><code>yum</code> - for Red Hat Enterprise Linux and compatible Linux derivatives</li> </ul> <p>Install from repositories </p> <p>Get our Docker image and spin up PBM for a quick evaluation. </p> <p>Check the Docker guide for step-by-step guidelines.</p> <p>Run in Docker </p> <p>Percona Operator for Kubernetes is a controller introduced to simplify complex deployments that require meticulous and secure database expertise. </p> <p>Check the Quickstart guides how to deploy and run PBM on Kubernetes with Percona Operator for MongoDB.</p> <p>Deploy in Kubernetes Quickstart </p> <p>Have a full control over the installation by building PBM from source code.</p> <p>Check the guide below for step-by-step instructions.</p> <p>Build from source </p> <p>If you need to install PBM offline or prefer a specific version of it, check out the link below for a step-by-step guide and get access to the downloads directory.</p> <p>Install from tarballs </p>"},{"location":"installation.html#next-steps","title":"Next steps","text":"<p>Initial setup </p> <p></p>"},{"location":"installation.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"intro.html","title":"How Percona Backup for MongoDB works","text":"<p>Even in a highly-available architecture, such as with MongoDB replication, backups are still required even though losing one server is not fatal. Whether for a complete or partial data disaster, you can use PBM (Percona Backup for MongoDB) to go back in time to the best available backup snapshot.</p> <p>Percona Backup for MongoDB is a command line interface. It provides the set of commands to manage backup and restore operations in your database.</p>"},{"location":"intro.html#usage-example","title":"Usage example","text":"<p>Let\u2019s have a look at how Percona Backup for MongoDB works.</p> <p>With Percona Backup for MongoDB up and running in your environment, make a backup:</p> <pre><code>$ pbm backup\n</code></pre> <p>To save all events that occurred to the data between the backups, enable saving oplog slices:</p> <pre><code>$ pbm config --set pitr.enabled=true\n</code></pre> <p>Now, imagine that your web application\u2019s update was released on February 7 at 03:00 UTC. By 15:23 UTC, someone realizes that this update has a bug that is wiping the historical data of any user who logged in. To remediate this negative impact on data, it\u2019s time to roll back up to the time of the application\u2019s update - up to February 7, 03:00 UTC.</p> <pre><code>$ pbm list\n</code></pre> <p>The output lists the valid time ranges for the restore. The desired time (February 7, 03:00 UTC) falls within the <code>2021-02-03T08:08:36Z-2021-02-09T12:20:23Z</code> range, so let\u2019s restore the database up to that time.</p> <p>Since the restore and saving oplog slices are exclusive operations and cannot run together, let\u2019s stop the oplog slicing first:</p> <pre><code>$ pbm config --set pitr.enabled=false\n</code></pre> <p>Now, let\u2019s restore the database:</p> <pre><code>$ pbm restore --time 2021-02-07T02:59:59\n</code></pre> <p>To be on the safe side, it is a good practice to make a fresh backup after the restore is complete.</p> <pre><code>$ pbm backup\n</code></pre> <p>This backup refreshes the timeline and serves as the base for saving oplog slices. To re-enable this process, run:</p> <pre><code>$ pbm config --set pitr.enabled=true\n</code></pre>"},{"location":"intro.html#next-steps","title":"Next steps","text":"<p>Ready to try it out? </p> <p>Quickstart</p>"},{"location":"intro.html#useful-links","title":"Useful links","text":"<ul> <li>PBM architecture</li> <li>Backup types</li> </ul>"},{"location":"intro.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"pmm.html","title":"Backup management via Percona Monitoring and Management","text":"<p>You can manage backups not only via the command line, but also via the web interface using Percona Monitoring and Management (PMM). This way you don\u2019t have to manually run commands on multiple servers. Instead, you can schedule backups or run them on demand from a single place and also receive real-time monitoring alerts.</p> <p>Check PMM documentation for the following guides:</p> <ul> <li>How to configure PMM to monitor MongoDB</li> <li>Backup management for MongoDB in PMM. </li> </ul> <p></p>"},{"location":"pmm.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes.html","title":"Percona Backup for MongoDB release notes","text":"<ul> <li>Percona Backup for MongoDB 2.3.1</li> <li>Percona Backup for MongoDB 2.3.0</li> <li>Percona Backup for MongoDB 2.2.1</li> <li>Percona Backup for MongoDB 2.2.0</li> <li>Percona Backup for MongoDB 2.1.0</li> <li>Percona Backup for MongoDB 2.0.5</li> <li>Percona Backup for MongoDB 2.0.4</li> <li>Percona Backup for MongoDB 2.0.3</li> <li>Percona Backup for MongoDB 2.0.2</li> <li>Percona Backup for MongoDB 2.0.1</li> <li>Percona Backup for MongoDB 2.0.0</li> <li>Percona Backup for MongoDB 1.8.1</li> <li>Percona Backup for MongoDB 1.8.0</li> <li>Percona Backup for MongoDB 1.7.0</li> <li>Percona Backup for MongoDB 1.6.1</li> <li>Percona Backup for MongoDB 1.6.0</li> <li>Percona Backup for MongoDB 1.5.0</li> <li>Percona Backup for MongoDB 1.4.1</li> <li>Percona Backup for MongoDB 1.4.0</li> <li>Percona Backup for MongoDB 1.3.4</li> <li>Percona Backup for MongoDB 1.3.3</li> <li>Percona Backup for MongoDB 1.3.2</li> <li>Percona Backup for MongoDB 1.3.1</li> <li>Percona Backup for MongoDB 1.3.0</li> <li>Percona Backup for MongoDB 1.2.1</li> <li>Percona Backup for MongoDB 1.2.0</li> <li>Percona Backup for MongoDB 1.1.3</li> <li>Percona Backup for MongoDB 1.1.1</li> <li>Percona Backup for MongoDB 1.1.0</li> <li>Percona Backup for MongoDB 1.0.0</li> <li>Percona Backup for MongoDB 0.5.0</li> </ul>"},{"location":"release-notes.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"trademark-policy.html","title":"Trademark policy","text":"<p>This Trademark Policy is to ensure that users of Percona-branded products or services know that what they receive has really been developed, approved, tested and maintained by Percona. Trademarks help to prevent confusion in the marketplace, by distinguishing one company\u2019s or person\u2019s products and services from another\u2019s.</p> <p>Percona owns a number of marks, including but not limited to Percona, XtraDB, Percona XtraDB, XtraBackup, Percona XtraBackup, Percona Server, and Percona Live, plus the distinctive visual icons and logos associated with these marks. Both the unregistered and registered marks of Percona are protected.</p> <p>Use of any Percona trademark in the name, URL, or other identifying characteristic of any product, service, website, or other use is not permitted without Percona\u2019s written permission with the following three limited exceptions.</p> <p>First, you may use the appropriate Percona mark when making a nominative fair use reference to a bona fide Percona product.</p> <p>Second, when Percona has released a product under a version of the GNU General Public License (\u201cGPL\u201d), you may use the appropriate Percona mark when distributing a verbatim copy of that product in accordance with the terms and conditions of the GPL.</p> <p>Third, you may use the appropriate Percona mark to refer to a distribution of GPL-released Percona software that has been modified with minor changes for the sole purpose of allowing the software to operate on an operating system or hardware platform for which Percona has not yet released the software, provided that those third party changes do not affect the behavior, functionality, features, design or performance of the software. Users who acquire this Percona-branded software receive substantially exact implementations of the Percona software.</p> <p>Percona reserves the right to revoke this authorization at any time in its sole discretion. For example, if Percona believes that your modification is beyond the scope of the limited license granted in this Policy or that your use of the Percona mark is detrimental to Percona, Percona will revoke this authorization. Upon revocation, you must immediately cease using the applicable Percona mark. If you do not immediately cease using the Percona mark upon revocation, Percona may take action to protect its rights and interests in the Percona mark. Percona does not grant any license to use any Percona mark for any other modified versions of Percona software; such use will require our prior written permission.</p> <p>Neither trademark law nor any of the exceptions set forth in this Trademark Policy permit you to truncate, modify or otherwise use any Percona mark as part of your own brand. For example, if XYZ creates a modified version of the Percona Server, XYZ may not brand that modification as \u201cXYZ Percona Server\u201d or \u201cPercona XYZ Server\u201d, even if that modification otherwise complies with the third exception noted above.</p> <p>In all cases, you must comply with applicable law, the underlying license, and this Trademark Policy, as amended from time to time. For instance, any mention of Percona trademarks should include the full trademarked name, with proper spelling and capitalization, along with attribution of ownership to Percona Inc. For example, the full proper name for XtraBackup is Percona XtraBackup. However, it is acceptable to omit the word \u201cPercona\u201d for brevity on the second and subsequent uses, where such omission does not cause confusion.</p> <p>In the event of doubt as to any of the conditions or exceptions outlined in this Trademark Policy, please contact trademarks@percona.com for assistance and we will do our very best to be helpful.</p> <p></p>"},{"location":"trademark-policy.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"details/architecture.html","title":"Architecture","text":"<p>Percona Backup for MongoDB consists of the following components:</p> <ul> <li> <p><code>pbm-agent</code> is a process running on every <code>mongod</code> node within the cluster or within a replica set that performs backup and restore operations.</p> </li> <li> <p><code>pbm</code> CLI is a command-line utility that instructs <code>pbm-agents</code> to perform an operation.</p> </li> <li> <p>PBM Control collections are special collections in MongoDB that store the configuration data and backup states. Both <code>pbm</code> CLI and <code>pbm-agent</code> use PBM Control collections to check backup status in MongoDB and communicate with each other.</p> </li> <li> <p>Remote backup storage is where Percona Backup for MongoDB saves backups. It can be either an S3 compatible storage or a filesystem-type storage.</p> </li> </ul> <p>The following diagram illustrates how Percona Backup for MongoDB components communicate with MongoDB.</p> <p></p> <p></p>"},{"location":"details/architecture.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"details/authentication.html","title":"Authentication","text":"<p>Percona Backup for MongoDB has no authentication and authorization subsystem of its own \u2014\u2014 it uses that of MongoDB. This means that <code>pbm</code> CLI and <code>pbm-agent</code> require only a valid MongoDB connection URI string for the <code>pbm</code> user.</p> <p>For the S3-compatible remote storage authentication config, see Percona Backup for MongoDB configuration in a cluster (or non-sharded replica set).</p>"},{"location":"details/authentication.html#mongodb-connection-strings","title":"MongoDB connection strings","text":"<p>Percona Backup for MongoDB uses MongoDB Connection URI strings to open MongoDB connections. Neither <code>pbm</code> CLI nor <code>pbm-agent</code> accept legacy-style command-line arguments for <code>--host</code>, <code>--port</code>, <code>--user</code>, <code>--password</code>, etc. as the <code>mongo</code> shell or <code>mongodump</code> command does.</p> The <code>pbm-agent</code> connection stringThe <code>pbm</code> CLI connection string <p>The <code>pbm-agent</code> processes should connect to their localhost <code>mongod</code> with a standalone type of connection.</p> <pre><code>pbm-agent --mongodb-uri \"mongodb://pbmuser:secretpwd@localhost:27017/?authSource=admin\"\n</code></pre> <p>Alternatively:</p> <pre><code>export PBM_MONGODB_URI=\"mongodb://pbmuser:secretpwd@localhost:27017/?authSource=admin\"\npbm-agent\n</code></pre> <p>Replace the <code>pbmuser:secretpwd</code> with the credentials of the user who owns the pbm process.</p> <pre><code>pbm list --mongodb-uri \"mongodb://pbmuser:secretpwd@mongocsvr1:27017,mongocsvr2:27017,mongocsvr3:27017/?replicaSet=configrs&amp;authSource=admin\"\n</code></pre> <p>Alternatively:</p> <pre><code>export PBM_MONGODB_URI=\"mongodb://pbmuser:secretpwd@mongocsvr1:27017,mongocsvr2:27017,mongocsvr3:27017/?replicaSet=configrs&amp;authSource=admin\"\n$ pbm list\n</code></pre> <p>Replace the <code>pbmuser:secretpwd</code> with the credentials of the user who owns the pbm process</p> <p>The <code>pbm</code> CLI will ultimately connect to the replica set with PBM Control Collections.</p> <ul> <li>In a non-sharded replica set it is simply that replica set.</li> <li>In a cluster it is the config server replica set.</li> </ul> <p>You do not necessarily have to provide that connection string. If you provide a connection to any live node (shard, configsvr, or non-sharded replica set member), <code>pbm</code> CLI will automatically determine the right hosts and establish a new connection to those instead.</p> <p>The connection URI above is the format that MongoDB drivers have accepted universally since approximately the release time of MongoDB server v3.6. The <code>mongo</code> shell has accepted it too since v4.0. Using a v4.0+ mongo shell is a recommended way to debug connection URI validity from the command line.</p> <p>Since Percona Backup for MongoDB must authenticate in MongoDB, we recommend specifying the authentication database associated with the <code>pbm</code> user\u2019s credentials in the connection URI string using the <code>authSource</code> option.</p> <p>The MongoDB Connection URI specification also allows specifying the authentication database via the <code>defaultauthdb</code> component. However, in this case, Percona Backup for MongoDB makes a backup of only this specified database.</p> <p>If both <code>authSource</code> and <code>defaultauthdb</code> are unspecified, the authentication database defaults to the <code>admin</code> database.</p> <p>The MongoDB Connection URI specification includes several non-default options you may need to use. For example, the TLS certificates/keys needed to connect to a cluster or non-sharded replica set with network encryption enabled are \u201ctls=true\u201d plus \u201ctlsCAFile\u201d and/or \u201ctlsCertificateKeyFile\u201d (see tls options).</p> <p></p>"},{"location":"details/authentication.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"details/cli.html","title":"PBM Command Line Utility (<code>pbm</code>)","text":"<p><code>pbm</code> CLI is the command line tool with which you operate Percona Backup for MongoDB. <code>pbm</code> provides the pbm command that you will use manually in the shell. It will also work as a command that can be executed in scripts (for example, by <code>crond</code>).</p> <p>The set of pbm sub-commands enables you to manage backups in your MongoDB environment.</p> <p><code>pbm</code> uses PBM Control collections to communicate with <code>pbm-agent</code> processes. It starts and monitors backup or restore operations by updating and reading the corresponding PBM control collections for operations, log, etc. Likewise, it modifies the PBM config by saving it in the PBM Control collection for config values.</p> <p><code>pbm</code> CLI does not have its own config and/or cache files. Setting the <code>PBM_MONGODB_URI</code> environment variable in your shell is a configuration-like step that should be done for practical ease though. (Without <code>PBM_MONGODB_URI</code>, the <code>--mongodb-uri</code> command line argument will need to be specified each time.)</p> <p>To learn how to set the <code>PBM_MONGODB_URI</code> environment variable, see Set the MongoDB connection URI for <code>pbm</code> CLI. For more information about MongoDB URI connection strings, see Authentication.</p> <p></p>"},{"location":"details/cli.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"details/control-collections.html","title":"PBM control collections","text":"<p>The config and state (current and historical) for backups is stored in collections in the MongoDB cluster or non-sharded replica set itself. These are put in the system <code>admin</code> db to keep them cleanly separated from user db namespaces.</p> <p>In sharded clusters, this is the <code>admin</code> db of the config server replica set. In a non-sharded replica set, the PBM control collections are stored in <code>admin</code> db of the replica set itself.</p> <ul> <li>admin.pbmBackups - Log / status of each backup.</li> <li>admin.pbmAgents - Contains information about <code>pbm-agents</code> statuses and health.</li> <li>admin.pbmConfig - Contains configuration information for Percona Backup for MongoDB.</li> <li>admin.pbmCmd - Is used to define and trigger operations.</li> <li>admin.pbmLock - pbm-agent synchronization-lock structure.</li> <li>admin.pbmLockOp - Is used to coordinate operations that are not mutually exclusive such as make backup and delete backup.</li> <li>admin.pbmLog - Stores log information from all <code>pbm-agents</code> in the MongoDB environment. Available in Percona Backup for MongoDB as of version 1.4.0.</li> <li>admin.pbmOpLog - Stores operation IDs.</li> <li>admin.pbmPITRChunks - Stores Point-in-time recovery oplog slices.</li> <li>admin.pbmPITRState - Contains current state of Point-in-time recovery incremental backups.</li> <li>admin.pbmRestores - Contains restore history and the restore state for all replica sets.</li> <li>admin.pbmStatus - Stores Percona Backup for MongoDB status records.</li> </ul> <p>The <code>pbm</code> command line tool creates these collections as needed. You do not have to maintain these collections, but you should not drop them unnecessarily either. Dropping them during a backup will cause an abort of the backup.</p> <p>Filling the config collection is a prerequisite to using Percona Backup for MongoDB for executing backups or restores. (See config page later.)</p> <p></p>"},{"location":"details/control-collections.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"details/deployments.html","title":"Supported MongoDB deployments","text":"<p>Percona Backup for MongoDB works with sharded clusters and replica sets. It doesn\u2019t work on standalone MongoDB instances. This is because Percona Backup for MongoDB requires oplog to guarantee backup consistency. Oplog is available on nodes with replication enabled.</p> <p>For testing purposes, you can deploy Percona Backup for MongoDB on a single-node replica set. To convert a standalone server into a replica set, specify the <code>replication.replSetName</code> option in the configuration file and then initiate the replica set.</p> <p>Version added: 2.1.0</p> <p>Physical restores are available for deployments with arbiter nodes. However, since these nodes don\u2019t have the <code>pbm-agent</code> installed, you must manually stop them before the restore.</p> <p>See also</p> <p>MongoDB Documentation: Convert a Standalone to a Replica Set</p> <p></p>"},{"location":"details/deployments.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"details/pbm-agent.html","title":"pbm-agent","text":"<p>A <code>pbm-agent</code> is a process that runs backup, restore, delete, and other operations available with Percona Backup for MongoDB.</p> <p>A <code>pbm-agent</code> instance must run on each <code>mongod</code> instance. This includes replica set nodes that are currently secondaries and config server replica set nodes in a sharded cluster.</p> <p>An operation is triggered when the <code>pbm</code> CLI makes an update to the PBM Control collection. All <code>pbm-agents</code> monitor changes to the PBM control collections, but only one <code>pbm-agent</code> in each replica set will be elected to execute an operation. The elections are done by a random choice among secondary nodes. If no secondary nodes respond, then the <code>pbm-agent</code> on the primary node is elected for an operation.</p> <p>The elected <code>pbm-agent</code> acquires a lock for an operation. This prevents mutually exclusive operations like backup and restore to be executed simultaneously.</p> <p>When the operation is complete, the <code>pbm-agent</code> releases the lock and updates the PBM control collections.</p> <p>A single <code>pbm-agent</code> is involved with only one cluster (or non-sharded replica set). The <code>pbm</code> CLI utility can connect to any cluster to which it has network access, so it is possible for one user to list and launch backups or restores on many clusters.</p> <p></p>"},{"location":"details/pbm-agent.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"details/storage-config-example.html","title":"Remote backup storage configuration examples","text":"<p>Provide the remote backup storage configuration as a YAML config file. The following are the examples of config files for supported remote storages. For how to insert the config file, see Insert the whole Percona Backup for MongoDB config from a YAML file.</p>"},{"location":"details/storage-config-example.html#s3-compatible-remote-storage","title":"S3-compatible remote storage","text":""},{"location":"details/storage-config-example.html#amazon-simple-storage-service","title":"Amazon Simple Storage Service","text":"<pre><code>storage:\n  type: s3\n  s3:\n    region: us-west-2\n    bucket: pbm-test-bucket\n    prefix: data/pbm/backup\n    credentials:\n      access-key-id: &lt;your-access-key-id-here&gt;\n      secret-access-key: &lt;your-secret-key-here&gt;\n    serverSideEncryption:\n      sseAlgorithm: aws:kms\n      kmsKeyID: &lt;your-kms-key-here&gt;\n</code></pre>"},{"location":"details/storage-config-example.html#gcs","title":"GCS","text":"<pre><code>storage:\n type: s3\n s3:\n     region: us-east1\n     bucket: pbm-testing\n     prefix: pbm/test\n     endpointUrl: https://storage.googleapis.com\n     credentials:\n       access-key-id: &lt;your-access-key-id-here&gt;\n       secret-access-key: &lt;your-secret-key-here&gt;\n</code></pre>"},{"location":"details/storage-config-example.html#minio","title":"MinIO","text":"<pre><code>storage:\n  type: s3\n  s3:\n    endpointUrl: \"http://localhost:9000\"\n    region: my-region\n    bucket: pbm-example\n    prefix: data/pbm/test\n    credentials:\n      access-key-id: &lt;your-access-key-id-here&gt;\n      secret-access-key: &lt;your-secret-key-here&gt;\n</code></pre>"},{"location":"details/storage-config-example.html#remote-filesystem-server-storage","title":"Remote filesystem server storage","text":"<pre><code>storage:\n  type: filesystem\n  filesystem:\n    path: /data/local_backups\n</code></pre>"},{"location":"details/storage-config-example.html#microsoft-azure-blob-storage","title":"Microsoft Azure Blob Storage","text":"<pre><code>storage:\n  type: azure\n  azure:\n    account: &lt;your-account&gt;\n    container: &lt;your-container&gt;\n    prefix: pbm\n    credentials:\n      key: &lt;your-access-key&gt;\n</code></pre> <p>For the description of configuration options, see Configuration file options.</p> <p></p>"},{"location":"details/storage-config-example.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"details/storage-configuration.html","title":"Remote backup storage","text":"<p>Percona Backup for MongoDB saves your files to a directory. Using <code>pbm list</code>, a user can scan this directory to find existing backups even if they never used <code>pbm</code> on their computer before.</p> <p>The files are prefixed with the (UTC) starting time of the backup. For each backup, there is one metadata file. For each replica set, a backup includes the following:</p> <ul> <li>A mongodump-format compressed archive that is the dump of collections</li> <li>A (compressed) BSON file dump of the oplog covering the time span of the backup</li> </ul> <p>The end time of the oplog slice(s) is the data-consistent point in time of a backup snapshot.</p>"},{"location":"details/storage-configuration.html#supported-storage-types","title":"Supported storage types","text":"<p>Percona Backup for MongoDB supports the following storage types:</p> <ul> <li> <p>S3-compatible storage</p> </li> <li> <p>Filesystem type storage</p> </li> <li> <p>Microsoft Azure Blob storage</p> </li> </ul>"},{"location":"details/storage-configuration.html#s3-compatible-storage","title":"S3-compatible storage","text":"<p>Percona Backup for MongoDB should work with other S3-compatible storages, but was only tested with the following ones:</p> <ul> <li> <p>Amazon Simple Storage Service</p> </li> <li> <p>Google Cloud Storage</p> </li> <li> <p>MinIO</p> </li> </ul>"},{"location":"details/storage-configuration.html#server-side-encryption","title":"Server-side encryption","text":"<p>Version added: 1.3.2</p> <p>Percona Backup for MongoDB supports server-side encryption for S3 buckets with customer-provided keys stored in AWS KMS (SSE-KMS).</p> <p>To use the SSE-KMS encryption, specify the following parameters in the Percona Backup for MongoDB configuration file: </p> <pre><code>serverSideEncryption:\n   kmsKeyID: &lt;kms_key_ID&gt;\n   sseAlgorithm: aws:kms\n</code></pre> <p>Version added: 2.0.1</p> <p>Percona Backup for MongoDB also supports server-side encryption with customer-provided keys that are stored on the client side (SSE-C). Percona Backup for MongoDB provides the encryption keys as part of the requests to the S3 storage. The S3 storage uses them to encrypt/decrypt the data using the <code>AES-256</code> encryption algorithm. In such a way you save on subscribing to AWS KMS services and can use the server-side encryption with the S3-compatible storage of your choice.</p> <p>SSE-C encryption should work with other S3-compatible storage types, but was only tested with the AWS and MinIO. Check the support of this functionality with your S3 storage provider.</p> <p>Warning</p> <ol> <li>Enable/disable the server-side encryption only for the empty bucket. Otherwise, Percona Backup for MongoDB fails to save/retrieve objects to/from the storage properly.</li> <li>S3 storage doesn\u2019t manage or store the encryption key. It is your responsibility to track what key was used to encrypt what object in the bucket. If you lose the key, any request for an object without the encryption key fails and you lose the object. </li> </ol> <p>To use the SSE-C encryption, specify the following parameters in the Percona Backup for MongoDB configuration file:    </p> <pre><code>serverSideEncryption:\n  sseCustomerAlgorithm: AES256\n  sseCustomerKey: &lt;your_encryption_key&gt;\n</code></pre> <p>See also</p> <p>AWS Documentation:</p> <ul> <li>Protecting Data Using Server-Side Encryption with CMKs Stored in AWS Key Management Service (SSE-KMS)</li> <li>Protecting data using server-side encryption with customer-provided encryption keys (SSE-C)</li> </ul>"},{"location":"details/storage-configuration.html#debug-logging","title":"Debug logging","text":"<p>Version added: 1.7.0</p> <p>You can enable debug logging for different types of S3 requests in Percona Backup for MongoDB. Percona Backup for MongoDB prints S3 log messages in the <code>pbm logs</code> output so that you can debug and diagnose S3 request issues or failures.</p> <p>To enable S3 debug logging, set the <code>storage.s3.DebugLogLevel</code> option in Percona Backup for MongoDB configuration. The supported values are: <code>LogDebug</code>, <code>Signing</code>, <code>HTTPBody</code>, <code>RequestRetries</code>, <code>RequestErrors</code>, <code>EventStreamBody</code>.</p>"},{"location":"details/storage-configuration.html#storage-classes","title":"Storage classes","text":"<p>Version added: 1.7.0</p> <p>Percona Backup for MongoDB supports Amazon S3 storage classes. Knowing your data access patterns, you can set the S3 storage class in Percona Backup for MongoDB configuration. When Percona Backup for MongoDB uploads data to S3, the data is distributed to the corresponding storage class. The support of S3 bucket storage types allows you to effectively manage S3 storage space and costs.</p> <p>To set the storage class, specify the <code>storage.s3.storageClass</code> option in Percona Backup for MongoDB configuration file</p> <pre><code>storage:\n  type: s3\n  s3:\n    storageClass: INTELLIGENT_TIERING\n</code></pre> <p>When the option is undefined, the S3 Standard storage type is used.</p>"},{"location":"details/storage-configuration.html#configure-upload-retries","title":"Configure upload retries","text":"<p>Version added: 1.7.0</p> <p>You can set up the number of attempts for Percona Backup for MongoDB to upload data to S3 storage as well as the min and max time to wait for the next retry. Set the options <code>storage.s3.retryer.numMaxRetries</code>, <code>storage.s3.retryer.minRetryDelay</code> and <code>storage.s3.retryer.maxRetryDelay</code> in Percona Backup for MongoDB configuration.</p> <pre><code>retryer:\n  numMaxRetries: 3\n  minRetryDelay: 30\n  maxRetryDelay: 5\n</code></pre> <p>This upload retry increases the chances of data upload completion in cases of unstable connection.</p>"},{"location":"details/storage-configuration.html#data-upload-for-storage-with-self-issued-tls-certificates","title":"Data upload for storage with self-issued TLS certificates","text":"<p>Version added: 1.7.0</p> <p>Percona Backup for MongoDB supports data upload to S3-like storage that supports self-issued TLS certificates. To make this happen, disable the TLS verification of the S3 storage in Percona Backup for MongoDB configuration:</p> <pre><code>$ pbm config --set storage.s3.insecureSkipTLSVerify=True\n</code></pre> <p>Warning</p> <p>Use this option with caution as it might leave a hole for man-in-the-middle attacks.</p>"},{"location":"details/storage-configuration.html#remote-filesystem-server-storage","title":"Remote filesystem server storage","text":"<p>This storage must be a remote file server mounted to a local directory. It is the responsibility of the server administrators to guarantee that the same remote directory is mounted at exactly the same local path on all servers in the MongoDB cluster or non-sharded replica set.</p> <p>Warning</p> <p>Percona Backup for MongoDB uses the directory as if it were any normal directory, and does not attempt to confirm it is mounted from a remote server.</p> <p>If the path is accidentally a normal local directory, errors will eventually occur, most likely during a restore attempt. This will happen because pbm-agent processes of other nodes in the same replica set can\u2019t access backup archive files in a normal local directory on another server.</p>"},{"location":"details/storage-configuration.html#local-filesystem-storage","title":"Local filesystem storage","text":"<p>This cannot be used except if you have a single-node replica set. (See the warning note above as to why). We recommend using any object store you might be already familiar with for testing. If you don\u2019t have an object store yet, we recommend using MinIO for testing as it has simple setup. If you plan to use a remote filesytem-type backup server, please see the Remote Filesystem Server Storage above.</p>"},{"location":"details/storage-configuration.html#microsoft-azure-blob-storage","title":"Microsoft Azure Blob storage","text":"<p>Version added: 1.5.0</p> <p>You can use Microsoft Azure Blob Storage as the remote backup storage for Percona Backup for MongoDB.</p> <p>This gives users a vendor choice. Companies with Microsoft-based infrastructure can set up Percona Backup for MongoDB with less administrative efforts.</p>"},{"location":"details/storage-configuration.html#permissions-setup","title":"Permissions setup","text":"<p>Regardless of the remote backup storage you use, grant the <code>List/Get/Put/Delete</code> permissions to this storage for the user identified by the access credentials.</p> <p>The following example shows the permissions configuration to the <code>pbm-testing</code> bucket on the AWS S3 storage.</p> <pre><code>{\n    \"Version\": \"2021-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListBucket\"\n            ],\n            \"Resource\": \"arn:aws:s3:::pbm-testing\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\",\n                \"s3:PutObjectAcl\",\n                \"s3:GetObject\",\n                \"s3:GetObjectAcl\",\n                \"s3:DeleteObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::pbm-testing/*\"\n        }\n    ]\n}\n</code></pre> <p>Please refer to the documentation of your selected storage for the data access management.</p> <p>See also</p> <ul> <li>AWS documentation: Controlling access to a bucket with user policies</li> <li>Google Cloud Storage documentation: Overview of access control</li> <li>Microsoft Azure documentation: Assign an Azure role for access to blob data</li> <li>MinIO documentation: Policy Management</li> </ul> <p></p>"},{"location":"details/storage-configuration.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"details/versions.html","title":"Supported MongoDB versions","text":"<p>Percona Backup for MongoDB is compatible with the following MongoDB versions:</p> PBM version MongoDB Community / Enterprise Percona Server for MongoDB 2.3.0 Logical backups - version 4.4 and higher with MongoDB Replication enabled - Logical backups - version 4.4 and higher  - Physical backups -  version 4.4.6-8, 5.0 and higher with MongoDB Replication enabled and WiredTiger configured as the storage engine. 1.7.0 Logical backups - version 4.2 and higher with MongoDB Replication enabled - Logical backups - version 4.2 and higher  - Physical backups (tech preview) -  version 4.2.15-16, 4.4.6-8, 5.0 and higher with MongoDB Replication enabled and WiredTiger configured as the storage engine. 1.6.1 Logical backups - version 3.6 and higher with MongoDB Replication enabled Logical backups - version 3.6 and higher <p></p>"},{"location":"details/versions.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"features/backup-types.html","title":"Backup and restore types","text":"<p>You can use several types of database backups and restores to develop your backup strategy. </p> <p></p> <p>The following table provides an overview of each type</p> Type Status Version added Supported deployments Percona Server for MongoDB MongoDB Community /Enterprise Edition Logical GA 1.0.0 Sharded clusters and non-sharded replica sets Yes Yes Physical GA 2.0.0 Sharded clusters and non-sharded replica sets Yes (starting with 4.2.15-16, 4.4.6-8 and higher, 5.0.x, 6.0.x) No Selective Tech preview 2.0.0 Sharded clusters (starting with version 2.0.3) and non-sharded replica sets. Sharded collections are supported starting with version 2.1.0. Yes Yes Incremental GA 2.1.0 (Supported for PSMDB versions 4.2.24-24, 4.4.18-18, 5.0.2-1, 6.0.2-1 and higher) Sharded clusters and non-sharded replica sets Yes No Point-in-time recovery GA 1.3.0 (logical), 2.0.0 (physical manually), 2.2.0 (physical automated) Sharded clusters and non-sharded replica sets Yes Yes Snapshot-based Tech preview 2.2.0 Sharded clusters and non-sharded replica sets Yes No <p></p>"},{"location":"features/backup-types.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"features/comparison.html","title":"Comparison with MongoDB","text":"<p>Percona Backup for MongoDB is a fully supported community backup solution that can perform cluster-wide consistent backups in MongoDB. The following table compares Percona Backup for MongoDB with the MongoDB backup solutions:</p> Feature name Percona Backup for MongoDB MongoDB Community <code>mongodump</code> MongoDB Enterprise MongoDB Atlas Open source backup Yes No No No Binary database export (logical backup) Yes Yes Yes Yes Built-in point-in-time recovery support Yes No Yes Yes Physical backup Yes No Yes Yes Incremental backup (physical) Yes No Yes Yes Backup management interfaces Percona Backup for MongoDB (CLI)  PMM  mongodump / mongorestore (CLI) -  -  mongodump / mongorestore (CLI) Ops Manager  Cloud Manager  mongodump / mongorestore (CLI) Atlas backups  mongodump / mongorestore (CLI) Sharded cluster restores supported Yes No Yes Yes"},{"location":"features/comparison.html#what-you-get-with-percona-backup-for-mongodb","title":"What you get with Percona Backup for MongoDB","text":"<ul> <li>Enterprise features without extra costs </li> <li>Works for both sharded clusters and non-sharded replica sets</li> <li>Simple command-line management utility. For backup management via a user interface, consider using PBM through Percona Monitoring and Management</li> <li>Simple, integrated-with-MongoDB authentication</li> <li>Distributed transaction consistency with MongoDB 4.2+</li> <li>Compatibility with different storage types: S3-compatible storage, Microsoft Azure Blob storage, <code>filesystem</code> storage type for locally-mounted remote filesystem backup servers</li> </ul>"},{"location":"features/comparison.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"features/incremental-backup.html","title":"Incremental physical backups","text":"<p>Version added: 2.0.3</p>"},{"location":"features/incremental-backup.html#considerations","title":"Considerations","text":"<ul> <li> <p> Incremental backups made with Percona Backup for MongoDB prior to 2.1.0 are incompatible for restore with Percona Backup for MongoDB 2.1.0. This is because of the changed set of metadata files that are now stored in backups. These files are absent in backups made with previous PBM versions but are required for the restore with PBM 2.1.0.</p> <p>We recommend to make a new incremental base backup and start the incremental backup chain from it after the upgrade to Percona Backup for MongoDB 2.1.0 </p> </li> <li> <p>Incremental backup implementation is based on the <code>$backupCursor</code> aggregation stage that is available only in Percona Server for MongoDB. Therefore, you must be running Percona Server for MongoDB in your deployment to use incremental physical backups.</p> </li> <li>Incremental backups are supported for Percona Server for MongoDB starting with the following versions: 4.2.24-24, 4.4.18, 5.0.14-12, 6.0.3-2 and higher. </li> <li>Due to WiredTger restrictions in Log-Structured Merge (LSM) trees behavior when the <code>$backupCursor</code> is opened, incremental backups are not available if the LSM tree is configured in the database.</li> </ul> <p>Owners of large datasets may need to back up data frequently. Making full physical backups every time is costly in terms of storage space. Incremental physical backups come in handy in this scenario, enabling you to optimize backup strategy and reduce storage costs.</p> <p>During incremental backups, Percona Backup for MongoDB saves only the data that was changed after the previous backup was taken. This results in faster backup / restore performance. Since incremental backups are smaller in size compared to full backups, you also save on costs for their storage and transfer in case of cloud deployments.</p> <pre><code>graph LR\n  A[Full physical ] --&gt; B([Increment 1 ]);\n  B --&gt; C([Increment 2 ]);\n  C --&gt; |.....| D([Increment n ]);</code></pre>"},{"location":"features/incremental-backup.html#implementation-specifics","title":"Implementation specifics","text":"<p>Percona Backup for MongoDB tracks the backup history only on the node where the base incremental backup was taken. This means that subsequent incremental backups must always be run on that very node. To make this happen, Percona Backup for MongoDB tries to schedule backups on that same node.</p> <p>If the node with the base incremental backup is down or unavailable, you must start the incremental backup chain anew on another node.</p> <p>Make a backup Restore a backup</p> <p></p>"},{"location":"features/incremental-backup.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"features/logical.html","title":"Logical backups and restores","text":"<p>Logical backup is the copying of the actual database data. A <code>pbm-agent</code> connects to the database, retrieves the data, and writes it to the remote backup storage. </p> <p>Logical restore is the reverse process: The <code>pbm-agent</code> retrieves the backup data from the storage and inserts it on every primary node in the cluster. The remaining nodes receive the data during the replication process.</p> <p>The following diagram shows the restore flow.</p> <p></p> <p>Logical backups allow for point-in-time recovery. </p> Advantages Disadvantages - Easy to operate with, using a single command  - Support for point-in-time recovery  - The backup size is smaller as it includes only the data - Much slower than physical backup / restore  - Adds database overhead on reading and inserting the data <p>Make a backup Restore a backup</p> <p></p>"},{"location":"features/logical.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"features/physical.html","title":"Physical backups and restores","text":"<p>Version added: 1.7.0</p>"},{"location":"features/physical.html#availability-and-system-requirements","title":"Availability and system requirements","text":"<ul> <li>Percona Server for MongoDB starting from versions 4.2.15-16, 4.4.6-8, 5.0 and higher. </li> <li>WiredTiger is used as the storage engine in Percona Server for MongoDB, since physical backups heavily rely on the WiredTiger <code>$backupCursor</code> functionality.</li> </ul> <p>See also</p> <p>Percona Blog</p> <ul> <li>Physical Backup Support in Percona Backup for MongoDB</li> <li>$backupCursorExtend in Percona Server for MongoDB</li> </ul> <p>Physical backup is copying of physical files from the Percona Server for MongoDB <code>dbPath</code> data directory to the remote backup storage. These files include data files, journal, index files, etc. Starting with version 2.0.0, Percona Backup for MongoDB also copies the WiredTiger storage options to the backup\u2019s metadata. </p> <p>Physical restore is the reverse process: <code>pbm-agents</code> shut down the <code>mongod</code> nodes, clean up the <code>dbPath</code> data directory and copy the physical files from the storage to it. </p> <p>The following diagram shows the physical restore flow:</p> <p></p> <p>During the restore, the <code>pbm-agents</code> temporarily start the <code>mongod</code> nodes using the the WiredTiger storage options retrieved from the backup\u2019s metadata. The logs for these starts are saved to the <code>pbm.restore.log</code> file inside the <code>dbPath</code>. Upon successful restore, this file is deleted. However, it remains for debugging if the restore were to fail. </p> <p>During physical backups and restores, <code>pbm-agents</code> don\u2019t export / import data from / to the database. This significantly reduces the backup / restore time compared to logical ones and is the recommended backup method for big (multi-terabyte) databases.</p> Advantages Disadvantages - Faster backup and restore speed  - Recommended for big, multi-terabyte datasets  - No database overhead - The backup size is bigger than for logical backups due to data fragmentation extra cost of keeping data and indexes in appropriate data structures  - Extra manual operations are required after the restore  - Point-in-time recovery requires manual operations <p>Make a backup Restore a backup</p>"},{"location":"features/physical.html#physical-backups-in-mixed-deployments","title":"Physical backups in mixed deployments","text":"<p>Version added: 2.3.0</p> <p>You may run both MongoDB Community / Enterprise Edition nodes and Percona Server for MongoDB (PSMDB) nodes in your environment, for example, when migrating to or evaluating PSMDB. </p> <p>You can make a physical, incremental or a snapshot-based backup in such a mixed deployment using PBM. This saves you from having to reconfigure your deployment for a backup, and keeps both your migration and backup strategies intact.</p> <p>Physical, incremental and snapshot-based backups are only possible from PSMDB nodes since their implementation is based on the <code>$backupCursorExtend</code> functionality. When it\u2019s time to make a backup, PBM searches the PSMDB node and makes a backup from it. The PSMDB node must not be an arbiter nor a delayed node. </p> <p>If more than 2 nodes are suitable for a backup, PBM selects the one with a higher priority. Note that if you override a priority for at least one node, PBM assigns priority <code>1.0</code> for the remaining nodes and uses the new priority list . </p> <p>Consider the following flow for incremental backups: By default, PBM picks the node from where it made the incremental base backup when it makes subsequent backups. PBM assigns priority <code>3.0</code> to this node ensuring that it is the first in the list. If you change the node priority, make a new incremental base backup to ensure data continuity.</p> <p>The physical restore in mixed deployments has no restrictions except the versions in backup and in the source cluster must match.</p>"},{"location":"features/physical.html#physical-restores-with-data-at-rest-encryption","title":"Physical restores with data-at-rest encryption","text":"<p>Version added: 2.0.0</p> <p>You can back up and restore the data encrypted at rest. Thereby you ensure data safety and can also comply with security requirements such as GDPR, HIPAA, PCI DSS, or PHI.</p> <p>This is how it works: </p> <p>During a backup, Percona Backup for MongoDB stores the encryption settings in the backup metadata. This allows you to verify them using the <code>pbm describe-backup</code> command. Note that the encryption key is not stored nor shown.</p> <p>Important</p> <p>Make sure that you know what master encryption key was used and store it, as this key is required for the restore.</p> <p>Starting with Percona Server for MongoDB version 4.4.19-19, 5.0.15-13, 6.0.5-4 and higher, the master key rotation for data-at-rest encrypted with HashiCorp Vault has been improved to use the same secret key path on every server in your entire deployment. For the restore with earlier versions of Percona Server for MongoDB and PBM 2.0.5 and earlier, see the Restore for Percona Server for MongoDB before 4.4.19-19, 5.0.15-13, 6.0.5-4 using HashiCorpVault section.</p> <p>To restore the encrypted data from the backup, configure data-at-rest encryption settings on all nodes of your destination cluster or replica set to match the settings of the target cluster where you made the backup</p> <p>During the restore, Percona Backup for MongoDB restores the data all nodes using the same master key. To meet the security policy requirements in your organization, we recommend to rotate the master encryption keys afterwards. </p> <p>To learn more about master key rotation, refer to the following documentation:</p> <ul> <li>Master key rotation in HashiCorp Vault server</li> <li>KMIP master key rotation</li> </ul>"},{"location":"features/physical.html#restore-for-percona-server-for-mongodb-before-4419-19-5015-13-605-4-using-hashicorpvault","title":"Restore for Percona Server for MongoDB before 4.4.19-19, 5.0.15-13, 6.0.5-4 using HashiCorpVault","text":"<p>In Percona Server for MongoDB version before 4.4.19-19, 5.0.15-13, 6.0.5-4 with the Vault server used for data-at-rest encryption, the master key rotation with the same key used for 2+ nodes is not supported. If you run these versions of Percona Server for MongoDB and PBM before 2.1.0, consider using the scenario where PBM restores the data on one node of every replica set. The remaining nodes receive the data during the initial sync. </p> <p>Here\u2019s how it works:</p> <p>Configure data-at-rest encryption on one node of every shard in your destination cluster or a replica set.</p> <p>During the restore, Percona Backup for MongoDB restores the data on the node where the encryption key matches the one with which the backed up data was encrypted. The other nodes are not restored, so the restore has the \u201cpartially done\u201d status. You can start this node and initiate the replica set. The remaining nodes receive the data as the result of the initial sync from the restored node.  </p> <p></p>"},{"location":"features/physical.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"features/point-in-time-recovery.html","title":"Point-in-time recovery","text":"<p>Version added: 1.3.0</p> <p>Point-in-time recovery is restoring a database up to a specific timestamp. This includes restoring the data from a backup snapshot and replaying all events that occurred to this data up to a specified time from oplog slices. </p> Advantages Disadvantages Helps you prevent data loss during a disaster such as a crashed database, accidental data deletion or drop of tables, and unwanted update of multiple fields instead of a single one. Restore takes longer since it requires you to restore the backup and then replay oplog events on top of it."},{"location":"features/point-in-time-recovery.html#enable-point-in-time-recovery","title":"Enable point-in-time recovery","text":"<p>Set the <code>pitr.enabled</code> configuration option to <code>true</code>.</p> Command lineConfiguration file <pre><code>$ pbm config --set pitr.enabled=true\n</code></pre> <pre><code>pitr:\n  enabled: true\n</code></pre> <p>The <code>pbm-agent</code> starts saving consecutive slices of the oplog periodically. A method similar to the way replica set nodes elect a new primary is used to select the <code>pbm-agent</code> that saves the oplog slices. (Find more information in pbm-agent.)</p> <p>Restore to a point-in-time</p>"},{"location":"features/point-in-time-recovery.html#oplog-slicing","title":"Oplog slicing","text":"<p>To start saving oplog slices, the following preconditions must be met:</p> Logical backupsPhysical backups <ul> <li>A full logical backup snapshot is required. Make sure that a backup exists. See the Make a backup guide to make a backup snapshot.</li> <li>Point-in-time recovery routine is enabled. </li> </ul> <p>Enable point-in-time recovery routine and configure it to save oplog slices without the base backup.</p> <pre><code>pitr:\n   enabled: true\n   oplogOnly: true\n</code></pre> <p>If you just enabled point-in-time recovery, it requires 10 minutes for the first chunk to appear in the <code>pbm list</code> output.</p> <p>Important</p> <p>For in MongoDB 5.0 and higher versions</p> <p>If you reshard a collection, make a fresh backup and re-enable point-in-time recovery oplog slicing to prevent data inconsistency and restore failure.</p>"},{"location":"features/point-in-time-recovery.html#oplog-duration","title":"Oplog duration","text":"<p>Version added: 1.6.0</p> <p>By default, a slice covers a 10-minute span of oplog events. It can be shorter if point-in-time recovery is disabled or interrupted by the start of a backup snapshot operation.</p> <p>You can change the duration of an oplog span via the configuration file. Specify the new value (in minutes) for the <code>pitr.oplogSpanMin</code> option.</p> Command lineConfiguration file <pre><code>$ pbm config --set pitr.oplogSpanMin=5\n</code></pre> <pre><code>pitr:\n  oplogSpanMin: 5\n</code></pre> <p>If you set the new duration when the <code>pbm-agent</code> is making an oplog slice, the slice\u2019s span is updated right away.</p> <p>If the new duration is shorter, this triggers the <code>pbm-agent</code> to make a new slice with the updated span immediately. If the new duration is larger,  the <code>pbm-agent</code> makes the next slice with the updated span in its scheduled time.</p>"},{"location":"features/point-in-time-recovery.html#compressed-oplog-slices","title":"Compressed oplog slices","text":"<p>Version added: 1.7.0</p> <p>The oplog slices are saved with the <code>s2</code> compression method by default. You can specify a different compression method via the configuration file. Specify the new value for the <code>pitr.compression</code> option.</p> Command lineConfiguration file <pre><code>$ pbm config --set pitr.compression=gzip\n</code></pre> <pre><code>pitr:\n  compression: gzip\n</code></pre> <p>Supported compression methods are: <code>gzip</code>, <code>snappy</code>, <code>lz4</code>, <code>s2</code>, <code>pgzip</code>, <code>zstd</code>.</p> <p>Additionally, you can override the compression level used by the compression method by setting the <code>pitr.compressionLevel</code> option. The default values differ for each compression level. </p> <p>Note that the higher value you specify, the more time and computing resources it will take to compress the data.</p> <p>Note</p> <p>You can use different compression methods for backup snapshots and point-in-time recovery slices. However, backup snapshot-related oplog is compressed with the same compression method as the backup itself.</p>"},{"location":"features/point-in-time-recovery.html#view-oplog-slices","title":"View oplog slices","text":"<p>The oplog slices are stored in the <code>pbmPitr</code> subdirectory in the remote storage defined in the config. A slice name reflects the start and end time this slice covers.</p> <p>The <code>pbm list</code> output includes the following information:</p> <ul> <li>Backup snapshots. As of version 1.4.0, it also shows the completion time (renamed to the <code>restore_to_time</code> in version 2.0.0)</li> <li>Valid time ranges for recovery</li> <li>Point-in-time recovery status</li> </ul> <pre><code>$ pbm list\n\n  2021-08-04T13:00:58Z [restore_to_time: 2021-08-04T13:01:23Z]\n  2021-08-05T13:00:47Z [restore_to_time: 2021-08-05T13:01:11Z]\n  2021-08-06T08:02:44Z [restore_to_time: 2021-08-06T08:03:09Z]\n  2021-08-06T08:03:43Z [restore_to_time: 2021-08-06T08:04:08Z]\n  2021-08-06T08:18:17Z [restore_to_time: 2021-08-06T08:18:41Z]\n\nPITR &lt;off&gt;:\n  2021-08-04T13:01:24 - 2021-08-05T13:00:11\n  2021-08-06T08:03:10 - 2021-08-06T08:18:29\n  2021-08-06T08:18:42 - 2021-08-06T08:33:09\n</code></pre> <p></p>"},{"location":"features/point-in-time-recovery.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"features/selective-backup.html","title":"Selective backup and restore","text":"<p>Version added: 2.0.0</p> <p>Important</p> <p>Selective backup and restore is the technical preview feature.</p> <p>You can back up and restore certain namespaces - databases or collections. For example, if your \u201cPayments\u201d collection in the \u201cStaff\u201d database was corrupted, you can restore only this collection from your full backup up to a specific point in time. Or, if your \u201cInvoices\u201d database contains sensitive data and must be backed up frequently, you can configure the backup of only this database. This way you work only with the desired subset of data without disrupting the operations of your whole cluster. </p> <p>You also drastically reduce time on backup / restore operations of the whole data set and save on storage consumption.</p> <p>With the selective backup and restore functionality, you have the following options:</p> <ol> <li>Backup a single database or a specific collection and restore all data from it. </li> <li>Restore a specific collection from a single database backup</li> <li>Restore certain databases and / or collections from a full backup</li> <li>Make a point-in time recovery for the specified databases / collections.</li> </ol>"},{"location":"features/selective-backup.html#sharded-collections","title":"Sharded collections","text":"<p>Version added: 2.1.0</p> <p>You can back up and restore sharded collections. During backup, <code>pbm-agents</code> on each shard save the documents for the specified databases/collections and the full oplog for the period of the backup process. A <code>pbm-agent</code> on the config server replica set saves router config documents from the <code>config</code> database required for restoring the selected namespaces.</p> <p>During the restore, the reverse process occurs:</p> <ul> <li>A <code>pbm-agent</code> on each shard restores only the specified databases/collections and replays the oplog that relates only to the specified namespaces. The operations for other namespaces are ignored.</li> <li>On the config server replica set, the <code>pbm-agent</code> restores the router configuration only for the specified sharded collections. The router configuration for other databases, collections and chunks remains intact.</li> </ul> <p>The restore for sharded time series collections is not supported.</p> <p>Note that selective backups and restores operate only with data and router configuration. The cluster configuration and topology-related settings are ignored. Therefore, we recommended to restore the databases/collections on the same environment.</p>"},{"location":"features/selective-backup.html#implementation-specifics","title":"Implementation specifics","text":"<p>During the selective restore, the primary shard for a database is set to the state it had during the backup. For example, the primary shard for the database \u201cStaff\u201d during backup was A. After you restore the  \u201cStaff\u201d database, the primary shard will be set to A even if you moved the primary from A to B before the restore. All non-sharded collections will be restored on A; however, they will not be deleted from B. You must take needed actions (cleanup or move the primary back to B) to maintain them. </p>"},{"location":"features/selective-backup.html#known-limitations-of-selective-backups-and-restores","title":"Known limitations of selective backups and restores","text":"<ol> <li>Only logical backups and restores are supported.</li> <li>Selective backups and restores are supported in sharded clusters for non-sharded collections starting with version 2.0.3. Sharded collections are supported starting with version 2.1.0. </li> <li>Sharded time series collections are not supported.</li> <li>Multiple namespaces are not yet supported for selective backups. However, you can specify several namespaces for the restore (e.g., restore several collections of a database).</li> <li>Multi-collection transactions are not yet supported for selective restore.</li> <li>System collections in <code>admin</code>, <code>config</code>, and <code>local</code> databases cannot be backed up and restored selectively. You must make a full backup and restore to include them.</li> <li>Selective point-in-time recovery is not supported for sharded clusters.</li> </ol> <p>Make a backup Restore a backup</p> <p></p>"},{"location":"features/selective-backup.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"features/snapshots.html","title":"Snapshot-based physical backups","text":"<p>Version added: 2.2.0</p>"},{"location":"features/snapshots.html#considerations","title":"Considerations","text":"<ol> <li>This is a technical preview feature.</li> <li>Supported only for full physical backups</li> <li>Available only if you run Percona Server for MongoDB in your environment  as PBM uses the <code>$backupCursor and $backupCursorExtended aggregation stages</code>. </li> </ol> <p>While a physical backup is a physical copy of your data directory, a snapshot is a point in time copy of your disk or a volume where the data files are stored. Restoring from snapshots is much faster and allows almost immediate access to data, while the database is unavailable during physical restore. Snapshot-based backups are especially useful for owners of large data sets with terabytes of data. Yet the snapshots don\u2019t guarantee data consistency in sharded clusters.</p> <p>This is where Percona Backup for MongoDB steps in. It provides the interface to make snapshot-based physical backups and restores and ensures data consistency. As a result, database owners benefit from increased performance and reduced downtime, and are sure that their data remains consistent.</p> <p>The snapshot-based physical backup / restore flow consists of three distinct stages:</p> <ul> <li>Preparing the database \u2014 done by PBM</li> <li>Copying files \u2014 done by the user / client app</li> <li>Completing the backup / restore \u2014 done by PBM. </li> </ul> <p>This is the first stage of the snapshot-based backups where you can make them manually. Automated snapshot-based backups are planned for the future.</p>"},{"location":"features/snapshots.html#make-a-backup","title":"Make a backup","text":"<ol> <li> <p>Refer to the Before you start section and make sure that you have made all the preparation steps for the backup. </p> </li> <li> <p>To make a snapshot-based backup, run the <code>pbm backup</code> command with the type <code>external</code>:</p> <pre><code>$ pbm backup -t external \n</code></pre> <p>When executing the command, PBM does the following:    </p> <ul> <li>opens the <code>$backupCursor</code></li> <li>prepares the database for file copy</li> <li>stores the backup metadata on the storage and adds it to the files to copy</li> <li>prints the prompt similar to the following:    </li> </ul> <pre><code>Ready to copy data from:\n&lt;node-list&gt;\n</code></pre> <p>You also see the backup name. </p> </li> <li> <p>(Optional) You can check the backup progress with the <code>pbm describe-backup</code>. The command output provides the backup state and what nodes are running backup.</p> </li> <li> <p>At this stage, you can copy the <code>dataDir</code> contents to the storage / make a snapshot using the technology of your choice. </p> </li> <li> <p>After the file copy, run the following command to close the <code>$backupCursor</code> and complete the backup: </p> <pre><code>$ pbm backup-finish &lt;backup_name&gt;\n</code></pre> </li> </ol>"},{"location":"features/snapshots.html#restore-a-backup","title":"Restore a backup","text":""},{"location":"features/snapshots.html#before-you-start","title":"Before you start:","text":"<ol> <li>Shut down all <code>mongos</code> nodes. If you have set up the automatic restart of the database, disable it.</li> <li>Stop the arbiter nodes manually since there\u2019s no <code>pbm-agent</code> on these nodes to do that automatically.</li> </ol>"},{"location":"features/snapshots.html#restore-from-a-backup-made-through-pbm","title":"Restore from a backup made through PBM","text":"<p>The following procedure describes the restore from backups made through PBM. See Restore from a backup made outside PBM for how to restore from a backup made outside of PBM.</p> <ol> <li> <p>To make a restore, run the following command:</p> <pre><code>$ pbm restore --external \n</code></pre> <p>Percona Backup for MongoDB stops the database, cleans up data directories on all nodes, provides the restore name and prompts you to copy the data:    </p> <pre><code>Starting restore &lt;restore_name&gt; from '[external]'.................................................................................................................................Ready to copy data to the nodes data directory.\n    After the copy is done, run: pbm restore-finish &lt;restore_name&gt; -c &lt;/path/to/pbm.conf.yaml&gt;\n    Check restore status with: pbm describe-restore &lt;restore_name&gt; -c &lt;/path/to/pbm.conf.yaml&gt;\n    No other pbm command is available while the restore is running!\n</code></pre> </li> <li> <p>Copy the data. While a backup is made from a single node of a replica set, for the restore you must copy the data on every node of a corresponding replica set in a cluster. For example, copy files from a backup for a replica set <code>rs1</code> to all nodes in <code>rs1</code> in the target cluster and so on.</p> </li> <li> <p>After you copied the files to the nodes, complete the restore with the following command:    </p> <pre><code>$ pbm restore-finish &lt;restore_name&gt; -c &lt;/path/to/pbm-conf.yaml&gt;\n</code></pre> <p>At this stage, Percona Backup for MongoDB reads the metadata from the backup, prepares the data for the cluster / replica set start and ensures its consistency. The database is restored to the timestamp specified in the <code>restore_to_time</code> of the metadata.</p> <p>Note</p> <p>If you use the filesystem as a remote backup storage, both <code>pbm-agent</code> and <code>pbm</code> CLI must have the same permissions to it. To achieve this, run the <code>pbm restore-finish</code> command as the <code>mongod</code> user:</p> <pre><code>$ sudo -u mongod -s pbm restore-finish &lt;restore_name&gt; -c &lt;/path/to/pbm-conf.yaml&gt; --mongodb-uri=MONGODB_URI\n</code></pre> </li> <li> <p>Optional. You can track the restore progress by running the <code>pbm describe-restore</code> command.</p> </li> </ol>"},{"location":"features/snapshots.html#post-restore-steps","title":"Post-restore steps","text":"<p>After the restore is complete, do the following:</p> <ol> <li> <p>Start all <code>mongod</code> nodes</p> </li> <li> <p>Start all <code>pbm-agents</code></p> </li> <li> <p>Run the following command to resync the backup list with the storage:</p> <pre><code>$ pbm config --force-resync\n</code></pre> </li> <li> <p>Start the balancer and start <code>mongos</code> nodes.</p> </li> <li> <p>Make a fresh backup to serve as the new base for future restores. </p> </li> </ol>"},{"location":"features/snapshots.html#restore-form-a-backup-made-outside-pbm","title":"Restore form a backup made outside PBM","text":"<p>Important</p> <p>For external backups made through PBM, PBM performs compatibility checks for the backup and the target cluster. If you restore the backup made outside PBM, it cannot ensure that the backup was made properly and in a consistent manner. Therefore, the backup compatibility is your responsibility.</p> <p>To restore an external backup made outside PBM, you need to specify the following for the <code>pbm restore</code> command:</p> <ul> <li>a path to the configuration file of the <code>mongod</code> node on the source cluster from where the backup was made. This is the configuration file that PBM uses during the restore. It should contain the storage options per replica set name, for example:</li> </ul> <pre><code>rs1:\n    storage:\n        directoryPerDB: true\nrs2:\n    storage:\n        directoryPerDB: true\n</code></pre> <p>To restore the data encrypted at rest, make sure data-at-rest encryption settings on the source and target clusters are the same. </p> <ul> <li>a timestamp to restore to</li> </ul> <p>To restore from a backup, do the following:</p> <ol> <li> <p>Start a restore</p> <pre><code>$ pbm restore --external -c &lt;/path/to/mongod.conf&gt; --ts \n</code></pre> <p>If the path to the source cluster <code>mongod.conf</code> is undefined, PBM tries to retrieve the required configuration options from the <code>mongod.conf</code> of the target cluster.    </p> <p>If the timestamp to restore to is undefined, PBM looks into the actual data during the restore and defines the most recent common cluster time across all shards. PBM restores the database up to this time.</p> </li> <li> <p>Next, copy the data files. Note that you must copy the data on every data-bearing node of your cluster / replica set.</p> </li> <li> <p>Complete the restore by running:</p> <pre><code>$ pbm restore-finish &lt;restore_name&gt; -c &lt;/path/to/pbm.conf.yaml&gt;\n</code></pre> <p>At this stage, Percona Backup for MongoDB prepares the data for the cluster / replica set start and ensures its consistency. </p> <p>Note</p> <p>If you use the filesystem as a remote backup storage, both <code>pbm-agent</code> and <code>pbm</code> CLI must have the same permissions to it. To achieve this, run the <code>pbm restore-finish</code> command as the <code>mongod</code> user:</p> <pre><code>$ sudo -u mongod -s pbm restore-finish &lt;restore_name&gt; -c &lt;/path/to/pbm-conf.yaml&gt; --mongodb-uri=MONGODB_URI\n</code></pre> </li> <li> <p>Don\u2019t forget to complete the post-restore steps</p> </li> </ol> <p></p>"},{"location":"features/snapshots.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/backup-storage.html","title":"Configure remote backup storage","text":"<p>The easiest way to provide remote backup storage configuration is to specify it in a YAML config file and upload this file to Percona Backup for MongoDB using <code>pbm</code> CLI.</p> <p>The storage configuration itself is out of scope of the present document. We assume that you have configured one of the supported remote backup storages.</p> <ol> <li> <p>Create a config file (e.g. <code>pbm_config.yaml</code>).</p> </li> <li> <p>Specify the storage information within.</p> <p>The following is the sample configuration for Amazon AWS:</p> <pre><code>storage:\n  type: s3\n  s3:\n    region: us-west-2\n    bucket: pbm-test-bucket\n    prefix: data/pbm/backup\n    credentials:\n      access-key-id: &lt;your-access-key-id-here&gt;\n      secret-access-key: &lt;your-secret-key-here&gt;\n    serverSideEncryption:\n      sseAlgorithm: aws:kms\n      kmsKeyID: &lt;your-kms-key-here&gt;\n</code></pre> <p>This is the sample configuration for Microsoft Azure Blob storage:</p> <pre><code>storage:\n  type: azure\n  azure:\n    account: &lt;your-account&gt;\n    container: &lt;your-container&gt;\n    prefix: pbm\n    credentials:\n      key: &lt;your-access-key&gt;\n</code></pre> <p>This is the sample configuration for filesystem storage:</p> <pre><code>storage:\n  type: filesystem\n  filesystem:\n    path: /data/local_backups\n</code></pre> <p>See more examples in Configuration file examples.</p> </li> <li> <p>Insert the config file</p> </li> </ol> <pre><code>$ pbm config --file pbm_config.yaml\n</code></pre> <p>To learn more about Percona Backup for MongoDB configuration, see Percona Backup for MongoDB configuration in a cluster (or non-sharded replica set).</p>"},{"location":"install/backup-storage.html#next-steps","title":"Next steps","text":"<p>Start <code>pbm-agent</code> </p> <p></p>"},{"location":"install/backup-storage.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/configure-authentication.html","title":"Configure authentication in MongoDB","text":"<p>Percona Backup for MongoDB uses the authentication and authorization subsystem  of MongoDB. This means that to authenticate Percona Backup for MongoDB, you need to:</p> <ul> <li>Create a corresponding <code>pbm</code> user in the <code>admin</code> database </li> <li>Set a valid MongoDB connection URI string for pbm-agent </li> <li>Set a valid MongoDB connection URI string for <code>pbm</code> CLI</li> </ul>"},{"location":"install/configure-authentication.html#create-the-pbm-user","title":"Create the <code>pbm</code> user","text":"<p> Info: Execute this step on a primary node of each replica set. In a sharded cluster, this means on every shard replica set and the config server replica set.</p> <ol> <li> <p>Create the role that allows any action on any resource.</p> <pre><code>db.getSiblingDB(\"admin\").createRole({ \"role\": \"pbmAnyAction\",\n      \"privileges\": [\n         { \"resource\": { \"anyResource\": true },\n           \"actions\": [ \"anyAction\" ]\n         }\n      ],\n      \"roles\": []\n   });\n</code></pre> </li> <li> <p>Create the user and assign the role you created to it.</p> <pre><code>db.getSiblingDB(\"admin\").createUser({user: \"pbmuser\",\n       \"pwd\": \"secretpwd\",\n       \"roles\" : [\n          { \"db\" : \"admin\", \"role\" : \"readWrite\", \"collection\": \"\" },\n          { \"db\" : \"admin\", \"role\" : \"backup\" },\n          { \"db\" : \"admin\", \"role\" : \"clusterMonitor\" },\n          { \"db\" : \"admin\", \"role\" : \"restore\" },\n          { \"db\" : \"admin\", \"role\" : \"pbmAnyAction\" }\n       ]\n    });\n</code></pre> </li> </ol> <p>You can specify the <code>username</code> and <code>password</code> values and other options of the <code>createUser</code> command as you require so long as the roles shown above are granted.</p> <p>Tip</p> <p>To list all the host+port lists for the shard replica sets in a cluster, run the following command:</p> <pre><code>db.getSiblingDB(\u201cconfig\u201d).shards.find({}, {\u201chost\u201d: true, \u201c_id\u201d: false}) \n</code></pre> <p>The replica set name at the front of these \u201chost\u201d strings will have to be placed as a \u201c/?replicaSet=xxxx\u201d argument in the parameters part of the connection URI (see below).</p>"},{"location":"install/configure-authentication.html#set-the-mongodb-connection-uri-for-pbm-agent","title":"Set the MongoDB connection URI for <code>pbm-agent</code>","text":"<p> Info: Execute this step needs on each node where <code>pbm-agent</code> is installed.</p> <p>A pbm-agent process connects to its localhost <code>mongod</code> node with a standalone type of connection. </p> <p>To set the MongoDB URI connection string means to configure a service init script (<code>pbm-agent.service</code> systemd unit file) that runs a pbm-agent.</p> <p>The <code>pbm-agent.service</code> systemd unit file includes the environment file. You set the MongoDB URI connection string for the  <code>PBM_MONGODB_URI</code> variable within the environment file for every pbm-agent.</p> How to find the environment file <p>The path to the environment file is specified in the <code>pbm-agent.service</code> systemd unit file.</p> <p>In Ubuntu and Debian, the pbm-agent.service systemd unit file is at the path <code>/lib/systemd/system/pbm-agent.service</code>.</p> <p>In Red Hat and CentOS, the path to this file is <code>/usr/lib/systemd/system/pbm-agent.service</code>.</p> <p>Example of pbm-agent.service systemd unit file</p> <pre><code>[Unit]\nDescription=pbm-agent\nAfter=time-sync.target network.target\n\n[Service]\nEnvironmentFile=-/etc/default/pbm-agent\nType=simple\nUser=pbm\nGroup=pbm\nPermissionsStartOnly=true\nExecStart=/usr/bin/pbm-agent\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> On Debian and Ubuntu LinuxOn Red Hat Enterprise Linux and derivatives <p>Edit the environment file <code>/etc/default/pbm-agent</code> and specify the MongoDB connection URI string for the <code>pbm</code> user to the local <code>mongod</code> node.</p> <p>For example, if <code>mongod</code> node listens on port 27017, the MongoDB connection URI string will be the following:</p> <pre><code>PBM_MONGODB_URI=\"mongodb://pbmuser:secretpwd@localhost:27017/?authSource=admin\"\n</code></pre> <p>Edit the environment file <code>/etc/sysconfig/pbm-agent</code> and specify the MongoDB connection URI string for the <code>pbm</code> user to the local <code>mongod</code> node. </p> <p>For example, if <code>mongod</code> node listens on port 27017, the MongoDB connection URI string will be the following:</p> <pre><code>PBM_MONGODB_URI=\"mongodb://pbmuser:secretpwd@localhost:27017/?authSource=admin\"\n</code></pre>"},{"location":"install/configure-authentication.html#passwords-with-special-characters","title":"Passwords with special characters","text":"<p>If the password includes special characters like <code>#</code>, <code>@</code>, <code>/</code> and so on, you must convert these characters using the percent-encoding mechanism when passing them to Percona Backup for MongoDB. For example, the password <code>secret#pwd</code> should be passed as follows in <code>PBM_MONGODB_URI</code>:</p> <pre><code>PBM_MONGODB_URI=\"mongodb://pbmuser:secret%23pwd@localhost:27017/?authSource=admin\"\n</code></pre>"},{"location":"install/configure-authentication.html#set-the-mongodb-connection-uri-for-pbm-cli","title":"Set the MongoDB connection URI for <code>pbm CLI</code>","text":"<p> Info: Execute this step only on a host at which you will use <code>pbm</code> CLI.</p> <p>Set the MongoDB URI connection string for <code>pbm</code> CLI in your shell. This allows you to call <code>pbm</code> commands without the <code>--mongodb-uri</code> flag.</p> <p>Use the following command:</p> <pre><code>export PBM_MONGODB_URI=\"mongodb://pbmuser:secretpwd@localhost:27017/?authSource=admin&amp;replSetName=xxxx\"\n</code></pre> <p>For more information about what connection string to specify, refer to the pbm connection string section.</p>"},{"location":"install/configure-authentication.html#external-authentication-support-in-percona-backup-for-mongodb","title":"External authentication support in Percona Backup for MongoDB","text":"<p>In addition to SCRAM, Percona Backup for MongoDB supports other authentication methods that you use in MongoDB or Percona Server for MongoDB.</p> <p>For external authentication, you create the <code>pbm</code> user in the format used by the authentication system and set the MongoDB connection URI string to include both the authentication method and authentication source.</p> <p>For example, for Kerberos authentication, create the <code>pbm</code> user in the <code>$external</code> database in the format <code>&lt;username@KERBEROS_REALM&gt;</code> (e.g. pbm@PERCONATEST.COM).</p> <p>Specify the following string for MongoDB connection URI:</p> <pre><code>PBM_MONGODB_URI=\"mongodb://&lt;username&gt;%40&lt;KERBEROS_REALM&gt;@&lt;hostname&gt;:27018/?authMechanism=GSSAPI&amp;authSource=%24external&amp;replSetName=xxxx\"\n</code></pre> <p>Note that you must first obtain the ticket for the <code>pbm</code> user with the <code>kinit</code> command before you start the pbm-agent:</p> <pre><code>$ sudo -u {USER} kinit pbm\n</code></pre> <p>Note that the <code>{USER}</code> is the user that you will run the <code>pbm-agent</code> process.</p> <p>For authentication and authorization via Native LDAP, you only create roles for LDAP groups in MongoDB as the users are stored and managed on the LDAP server. However, you still define the <code>$external</code> database as your authentication source:</p> <pre><code>PBM_MONGODB_URI=\"mongodb://&lt;user&gt;:&lt;password&gt;@&lt;hostname&gt;:27017/?authMechanism=PLAIN&amp;authSource=%24external&amp;replSetName=xxxx\"\n</code></pre> <p>When using AWS IAM authentication, create the <code>pbm</code> user in the <code>$external</code> database with the username that contains the ARN of the IAM user/role.</p> User authenticationRole authentication <pre><code>arn:aws:iam::&lt;ARN&gt;:user/&lt;user_name&gt;\n</code></pre> <pre><code>arn:aws:iam::&lt;ARN&gt;:role/&lt;role_name&gt;\n</code></pre> <p>The MongoDB connection URI string then looks like the following:</p> <pre><code>PBM_MONGODB_URI=\"mongodb://&lt;aws_access_key_id&gt;:&lt;aws_secret_access_key&gt;@&lt;hostname&gt;:27017/?authMechanism=MONGODB-AWS&amp;authSource=%24external&amp;replSetName=xxxx\"\n</code></pre>"},{"location":"install/configure-authentication.html#next-steps","title":"Next steps","text":"<p>Configure backup storage </p> <p></p>"},{"location":"install/configure-authentication.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/docker.html","title":"Run Percona Backup for MongoDB in a Docker container","text":"<p>Docker images of Percona Backup for MongoDB are hosted publicly on Docker Hub.</p> <p>For more information about using Docker, see the Docker Docs.</p> <p>Note</p> <p>Make sure that you are using the latest version of Docker. The ones provided via apt and yum may be outdated and cause errors.</p> <p>By default, Docker will pull the image from Docker Hub if it is not available locally.</p>"},{"location":"install/docker.html#prerequisites","title":"Prerequisites","text":"<ul> <li>You need to deploy MongoDB or Percona Server for MongoDB. See what MongoDB deployments are supported.</li> <li>Create the pbm user in your deployment. You will need this user credentials to start Percona Backup for MongoDB container. </li> </ul>"},{"location":"install/docker.html#start-percona-backup-for-mongodb","title":"Start Percona Backup for MongoDB","text":"<p>Start Percona Backup for MongoDB container with the following command:</p> <pre><code>$ docker run --name &lt;container-name&gt; -e PBM_MONGODB_URI=\"mongodb://&lt;PBM_USER&gt;:&lt;PBM_USER_PASSWORD&gt;@&lt;HOST&gt;:&lt;PORT&gt;\" -d percona/percona-backup-mongodb:&lt;tag&gt;-multi\n</code></pre> <p>Where:</p> <ul> <li><code>container-name</code> is the name you want to assign to your container.</li> <li><code>PBM_MONGODB-URI</code> is a MongoDB Connection URI string used to connect to MongoDB nodes. See the Initial setup how to create the PBM user. </li> <li><code>tag-multi</code> is the tag specifying the version you need. For example, <code>{{release}}-multi</code>. The <code>multi</code> part of the tag serves to identify the architecture (x86_64 or ARM64) and pull the respective image. See the full list of tags.</li> </ul> <p>Note that every MongoDB node (including replica set secondary members and config server replica set nodes) requires a separate instance of Percona Backup for MongoDB. Thus, a typical, 3-node MongoDB replica set requires three instances of Percona Backup for MongoDB.</p>"},{"location":"install/docker.html#set-up-percona-backup-for-mongodb","title":"Set up Percona Backup for MongoDB","text":"<p>Percona Backup for MongoDB requires the remote storage where to store data. Use the following commands to configure it:</p> <ol> <li> <p>Start a Bash session:</p> <pre><code>$ docker exec -it --name &lt;container-name&gt; bash\n</code></pre> </li> <li> <p>Create a YAML configuration file:</p> <pre><code>$ vi /tmp/pbm_config.yaml\n</code></pre> </li> <li> <p>Specify remote storage parameters in the config file. The following example is for S3-compatible backup storage. Check what other storages are supported and examples of storage configurations:</p> <pre><code>storage:\n    type: s3\n    s3:\n      region: &lt;your-region-here&gt;\n      bucket: &lt;your-bucket-here&gt;\n      credentials:\n        access-key-id: &lt;your-access-key-id-here&gt;\n    secret-access-key: &lt;your-secret-key-here&gt;\n</code></pre> </li> <li> <p>Upload the config file: </p> <pre><code>$ pbm config --file /tmp/pbm_config.yaml\n</code></pre> <p>The command output displays your uploaded configuration.</p> </li> </ol>"},{"location":"install/docker.html#run-percona-backup-for-mongodb","title":"Run Percona Backup for MongoDB","text":"<p>Percona Backup for MongoDB command line utility (<code>pbm</code>) provides the set of commands to control backups: create, restore, cancel backups, etc. </p> <p>For example, to start a backup, use the following command:</p> <pre><code>$ docker exec -it --name &lt;container-name&gt; pbm backup\n</code></pre> <p>where <code>&lt;container-name&gt;</code> is the name you assigned to the container and <code>pbm backup</code> is the command to start a backup.</p> <p>In the same way you can run other pbm commands. Find the full list of available commands in Percona Backup for MongoDB reference.</p>"},{"location":"install/docker.html#next-steps","title":"Next steps","text":"<p>List backups</p> <p></p>"},{"location":"install/docker.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/initial-setup.html","title":"Initial setup overview","text":"<p>The following diagram outlines the installation and setup steps:</p> <p></p> <p>After you installed Percona Backup for MongoDB on every server with the <code>mongod</code> node that is not an arbiter node, complete the following setup steps:</p> <ol> <li> <p>Configure authentication in MongoDB.</p> </li> <li> <p>Configure the remote backup storage.</p> </li> <li> <p>Start <code>pbm-agent</code> process.</p> </li> </ol>"},{"location":"install/initial-setup.html#next-steps","title":"Next steps","text":"<p>Configure authentication </p> <p></p>"},{"location":"install/initial-setup.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/repos.html","title":"Install from Percona repositories","text":"<p>To install the software from Percona repositories means to subscribe to them. Percona provides the <code>percona-release</code> repository management tool. It automatically enables the required repository so that you can install and update both Percona Backup for MongoDB packages and required dependencies smoothly.</p>"},{"location":"install/repos.html#what-nodes-to-install-on","title":"What nodes to install on","text":""},{"location":"install/repos.html#pbm-agent","title":"<code>pbm-agent</code>","text":"<p>Install <code>pbm-agent</code> on all servers that have <code>mongod</code> nodes in the MongoDB cluster (or non-sharded replica set). You don\u2019t need to start it on the <code>arbiter</code> node, since it doesn\u2019t have the data set.</p>"},{"location":"install/repos.html#pbm-cli","title":"<code>pbm</code> CLI","text":"<p>You can install <code>pbm</code> CLI on any or all servers or desktop computers you wish to use it from. Those computers must not be network-blocked from accessing the MongoDB cluster.</p>"},{"location":"install/repos.html#procedure","title":"Procedure","text":"<p> Warning: Run the following commands as root or via the <code>sudo</code> command.</p> <ol> <li> <p>Install <code>percona-release</code>. If you have installed it before, update it to the latest version.</p> </li> <li> <p>Enable the repository</p> <pre><code>$ sudo percona-release enable pbm release\n</code></pre> </li> <li> <p>Install Percona Backup for MongoDB packages</p> On Debian and UbuntuOn Red Hat Enterprise Linux and derivatives <ol> <li> <p>Reload the local package database:    </p> <pre><code>$ sudo apt update\n</code></pre> </li> <li> <p>Install Percona Backup for MongoDB:    </p> <pre><code>$ sudo apt install percona-backup-mongodb\n</code></pre> </li> </ol> <pre><code>$ sudo yum install percona-backup-mongodb\n</code></pre> </li> </ol> <p>After the installation completes, you have the following tools:</p> Tool Purpose <code>pbm</code> Command-line interface for controlling the backup system <code>pbm-agent</code> An agent for running backup/restore actions on a database host <code>pbm-speed-test</code> An interface for field-testing compression and backup upload speed <code>pbm-agent-entrypoint</code> An entry point application that allows starting <code>pbm-agent</code> and also restarts it in case of any faults"},{"location":"install/repos.html#next-steps","title":"Next steps","text":"<p>Initial setup </p> <p></p>"},{"location":"install/repos.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/source.html","title":"Build from source code","text":""},{"location":"install/source.html#prerequisites","title":"Prerequisites","text":"<p>To build Percona Backup for MongoDB from source, you need the following:</p> <ul> <li>Go 1.19 or above. Install and set up Go tools</li> <li>make</li> <li>git</li> <li><code>krb5-devel</code> for Red Hat Enterprise Linux / CentOS or <code>libkrb5-dev</code> for Debian / Ubuntu. This package is required for Kerberos authentication in Percona Server for MongoDB.</li> </ul>"},{"location":"install/source.html#procedure","title":"Procedure","text":"<p>Here\u2019s how to build Percona Backup for MongoDB:</p> <ol> <li> <p>Clone the repository</p> <pre><code>$ git clone https://github.com/percona/percona-backup-mongodb\n</code></pre> </li> <li> <p>Go to the project directory and build it</p> <pre><code>$ cd percona-backup-mongodb\n$ make build\n</code></pre> </li> </ol> <p>After make completes, you can find <code>pbm</code> and <code>pbm-agent</code> binaries in the <code>./bin</code> directory. </p> <ol> <li> <p>Check that Percona Backup for MongoDB has been built correctly and is ready for use. </p> <pre><code>$ cd bin\n$ ./pbm version\n</code></pre> Output <pre><code>Version:   [pbm version number]\nPlatform:  linux/amd64\nGitCommit: [commit hash]\nGitBranch: main\nBuildTime: [time when this version was produced in UTC format]\nGoVersion: [Go version number]\n</code></pre> <p>Tip</p> <p>Instead of specifying the path to pbm binaries, you can add it to the PATH environment variable:    </p> <pre><code>$ export PATH=/percona-backup-mongodb/bin:$PATH\n</code></pre> </li> </ol>"},{"location":"install/source.html#post-install-steps","title":"Post-install steps","text":"On Debian and UbuntuOn Red Hat Enterprise Linux and derivatives <p>{.power-number}</p> <ol> <li> <p>Create the environment file:</p> <pre><code>$ touch /etc/default/pbm-agent\n</code></pre> </li> <li> <p>Create the <code>pbm-agent.service</code> systemd unit file.</p> <pre><code>$ sudo vim /lib/systemd/system/pbm-agent.service\n</code></pre> </li> <li> <p>In the <code>pbm-agent.service</code> file, specify the following:</p> <pre><code>[Unit]\nDescription=pbm-agent\nAfter=time-sync.target network.target\n\n[Service]\nEnvironmentFile=-/etc/default/pbm-agent\nType=simple\nUser=mongod\nGroup=mongod\nPermissionsStartOnly=true\nExecStart=/usr/bin/pbm-agent\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Note</p> <p>Make sure that the <code>ExecStart</code> directory includes the Percona Backup for MongoDB binaries. Otherwise, copy them from the <code>./bin</code> directory of you installation path.</p> </li> <li> <p>Make <code>systemd</code> aware of the new service:</p> <pre><code>$ sudo systemctl daemon-reload\n</code></pre> </li> </ol> <ol> <li> <p>Create the environment file:</p> <pre><code>$ touch /etc/sysconfig/pbm-agent\n</code></pre> </li> <li> <p>Create the <code>pbm-agent.service</code> systemd unit file.</p> <pre><code>$ sudo vim /usr/lib/systemd/system/pbm-agent.service\n</code></pre> </li> <li> <p>In the <code>pbm-agent.service</code> file, specify the following:</p> <pre><code>[Unit]\nDescription=pbm-agent\nAfter=time-sync.target network.target\n\n[Service]\nEnvironmentFile=-/etc/default/pbm-agent\nType=simple\nUser=mongod\nGroup=mongod\nPermissionsStartOnly=true\nExecStart=/usr/bin/pbm-agent\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Note</p> <p>Make sure that the <code>ExecStart</code> directory includes the Percona Backup for MongoDB binaries. Otherwise, copy them from the <code>./bin</code> directory of you installation path.</p> </li> <li> <p>Make <code>systemd</code> aware of the new service:</p> <pre><code>$ sudo systemctl daemon-reload\n</code></pre> </li> </ol>"},{"location":"install/source.html#next-steps","title":"Next steps","text":"<p>Initial setup </p> <p></p>"},{"location":"install/source.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/start-pbm-agent.html","title":"Start the <code>pbm-agent</code> process","text":"<p>Start <code>pbm-agent</code> on every server with the <code>mongod</code> node installed. It is best to use the packaged service scripts to run <code>pbm-agent</code>.</p> <pre><code>$ sudo systemctl start pbm-agent\n$ sudo systemctl status pbm-agent\n</code></pre> <p>For example, imagine that you put configsvr nodes (listen port <code>27019</code>) collocated on the same servers as the first shard\u2019s <code>mongod</code> nodes (listen port <code>27018</code>, replica set name <code>sh1rs</code>). In this server there should be two <code>pbm-agent</code> processes, one connected to the shard (e.g. <code>\u201cmongodb://username:password@localhost:27018/\u201d</code>) and one to the configsvr node (e.g. <code>\u201cmongodb://username:password@localhost:27019/\u201d</code>).</p> <p>For reference, the following is an example of starting <code>pbm-agent</code> manually. The output is redirected to a file and the process is backgrounded.</p> <p>Important</p> <p>Start the <code>pbm-agent</code> as the <code>mongod</code> user. The <code>pbm-agent</code> requires write access to the MongoDB data directory to make physical restores.</p> <pre><code>$ su mongod nohup pbm-agent --mongodb-uri \"mongodb://username:password@localhost:27018/\" &gt; /data/mdb_node_xyz/pbm-agent.$(hostname -s).27018.log 2&gt;&amp;1 &amp;\n</code></pre> <p>Replace <code>username</code> and <code>password</code> with those of your <code>pbm</code> user. <code>/data/mdb_node_xyz/</code> is the path where pbm-agent log files will be written. Make sure you have created this directory and granted write permissions to it for the <code>mongod</code> user.</p> <p>Alternatively, you can run <code>pbm-agent</code> on a shell terminal temporarily if you want to observe and/or debug the startup from the log messages.</p>"},{"location":"install/start-pbm-agent.html#how-to-see-the-pbm-agent-log","title":"How to see the <code>pbm-agent</code> log","text":"<p>With the packaged <code>systemd</code> service, the log output to <code>stdout</code> is captured by systemd\u2019s default redirection to <code>systemd-journald</code>. You can view it with the command below. See <code>man journalctl</code> for useful options such as <code>--lines</code>, <code>--follow</code>, etc.</p> <pre><code>$ journalctl -u pbm-agent.service\n-- Logs begin at Tue 2019-10-22 09:31:34 JST. --\nJan 22 15:59:14 : Started pbm-agent.\nJan 22 15:59:14 pbm-agent[3579]: pbm agent is listening for the commands\n...\n...\n</code></pre> <p>If you started <code>pbm-agent</code> manually, see the file you redirected stdout and stderr to.</p> <p>When a message <code>pbm agent is listening for the commands</code> is printed to the <code>pbm-agent</code> log file, <code>pbm-agent</code> confirms that it has connected to its <code>mongod</code> node successfully.</p>"},{"location":"install/start-pbm-agent.html#next-steps","title":"Next steps","text":"<p>Make a backup </p> <p></p>"},{"location":"install/start-pbm-agent.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"install/tarball.html","title":"Download Percona Backup for MongoDB from Percona website","text":"<p>You can download Percona Backup for MongoDB from Percona website and install it:</p> <ul> <li>From binary tarballs.</li> <li>Manually, from the installation packages using <code>dpkg</code> (Debian and Ubuntu) or <code>rpm</code> (Red Hat Enterprise Linux and CentOS). However, you must make sure that all dependencies are satisfied.</li> </ul>"},{"location":"install/tarball.html#what-nodes-to-install-on","title":"What nodes to install on","text":""},{"location":"install/tarball.html#pbm-agent","title":"<code>pbm-agent</code>","text":"<p>Install <code>pbm-agent</code> on all servers that have <code>mongod</code> nodes in the MongoDB cluster (or non-sharded replica set). You don\u2019t need to start it on the <code>arbiter</code> node, since it doesn\u2019t have the data set.</p>"},{"location":"install/tarball.html#pbm-cli","title":"<code>pbm</code> CLI","text":"<p>You can install <code>pbm</code> CLI on any or all servers or desktop computers you wish to use it from. Those computers must not be network-blocked from accessing the MongoDB cluster.</p>"},{"location":"install/tarball.html#install-from-binary-tarball","title":"Install from binary tarball","text":"<p>Find the link to the binary tarballs under the Generic Linux menu item on Percona website.</p> <ol> <li> <p>Fetch the binary tarball. Replace the <code>&lt;version&gt;</code> with the required version.</p> <pre><code>$ wget https://downloads.percona.com/downloads/percona-backup-mongodb/percona-backup-mongodb-&lt;version&gt;/binary/tarball/percona-backup-mongodb-&lt;version&gt;-x86_64.tar.gz\n</code></pre> </li> <li> <p>Extract the tarball</p> <pre><code>$ tar -xf percona-backup-mongodb-&lt;version&gt;-x86_64.tar.gz\n</code></pre> </li> <li> <p>Export the location of the binaries to the <code>PATH</code> variable</p> <p>For example, if you\u2019ve extracted the tarball to your <code>home</code> directory, the command would be the following:</p> <pre><code>$ export PATH=~/percona-backup-mongodb-&lt;version&gt;/:$PATH\n</code></pre> </li> </ol> <p>After the installation completes, you have the following tools:</p> Tool Purpose <code>pbm</code> Command-line interface for controlling the backup system <code>pbm-agent</code> An agent for running backup/restore actions on a database host <code>pbm-speed-test</code> An interface for field-testing compression and backup upload speed <code>pbm-agent-entrypoint</code> An entry point application that allows starting <code>pbm-agent</code> and also restarts it in case of any faults"},{"location":"install/tarball.html#next-steps","title":"Next steps","text":"<p>Initial setup </p> <p></p>"},{"location":"install/tarball.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"manage/automate-s3-access.html","title":"Automate access to S3 buckets for Percona Backup for MongoDB","text":"<p>When you run MongoDB and Percona Backup for MongoDB using AWS resources (on EC2 instances or using EKS), you can automate access to AWS S3 buckets for Percona Backup for MongoDB. Percona Backup for MongoDB uses the AWS environment variables and metadata to access S3 buckets so that you don\u2019t have to explicitly specify the S3 credentials in the PBM configuration file. Thereby you control the access to your cloud infrastructure from a single place.</p>"},{"location":"manage/automate-s3-access.html#iam-instance-profile","title":"IAM instance profile","text":"<p>Version added: 1.6.0</p> <p>IAM (Identity Access Management) is the AWS service that allows you to securely control access to AWS resources.</p> <p>Using the IAM instance profile, you can automate access to S3 buckets for Percona Backup for MongoDB running on EC2 instance. The steps are the following:</p> <ol> <li> <p>Create the IAM instance profile and the permission policy within where you specify the access level that grants the access to S3 buckets.</p> </li> <li> <p>Attach the IAM profile to an EC2 instance.</p> </li> <li> <p>Configure an S3 storage bucket and verify the connection from the EC2 instance to it.</p> </li> <li> <p>Provide the remote storage information for PBM in a config file. Leave the <code>s3.credentials</code> array empty</p> <pre><code>storage:\n  type: s3\n  s3:\n   region: &lt;your-S3-region&gt;\n   bucket: &lt;bucket-name&gt;\n</code></pre> <p>Note</p> <p>If you specify S3 credentials, they override the EC2 instance environment variables and metadata, and are used for authentication instead.</p> </li> <li> <p>Start the <code>pbm-agent</code> process</p> </li> </ol> <p>See also</p> <p>AWS documentation: How can I grant my Amazon EC2 instance access to an Amazon S3 bucket?</p>"},{"location":"manage/automate-s3-access.html#iam-roles-for-service-accounts-irsa","title":"IAM Roles for Service Accounts (IRSA)","text":"<p>Version added: 2.0.3</p> <p>IRSA is the native way for AWS EKS (Amazon Elastic Kubernetes Service) to allow applications running in EKS pods to access the AWS API using permissions configured in AWS IAM roles.</p> <p>To benefit from using the AWS IRSA credentials with PBM, the high-level steps are the following:</p> <ol> <li>Create a cluster with <code>eksctl</code> and OIDC provider setup enabled. This feature works with EKS clusters version 1.13 and above.</li> <li>Create an IAM role and specify the policy that defines the access to an S3 bucket.</li> <li>Create a service account and annotate it with the IAM role.</li> <li>Configure your pod by using the service account created in the previous step and assume the IAM role.</li> <li>Provide the remote storage information for PBM in a config file. Leave the <code>s3.credentials</code> array empty, since PBM uses the <code>AWS_ROLE_ARN</code>/<code>AWS_WEB_IDENTITY_TOKEN_FILE</code> environment variables which are either automatically provided (i.e. injected by Kubernetes mutating admission controller in EKS) or which you can define manually (if you don\u2019t want to the admission controller to modify your pods)</li> </ol> <p>Note</p> <p>If IRSA-related credentials are defined, they have the priority over any IAM instance profile. However, if you intentionally specify S3 credentials in PBM configuration file, they override any IRSA/IAM instance profile related credentials and are used for authentication instead.</p> <p>See also</p> <p>AWS documentation: </p> <ul> <li>Introducing fine-grained IAM roles for service accounts</li> <li>How do I use the IAM roles for service accounts (IRSA) feature with Amazon EKS to restrict access to an Amazon S3 bucket?</li> </ul> <p></p>"},{"location":"manage/automate-s3-access.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"manage/configure-remotely.html","title":"Percona Backup for MongoDB configuration via pipelines","text":"<p>Version added: 2.0.1</p> <p>To apply or update the configuration, Percona Backup for MongoDB reads the configuration file on the filesystem. When you run PBM remotely (in a cloud as Docker containers or pods in Kubernetes), you must upload the configuration file to the remote host\u2019s filesystem every time you update it.  </p> <p>To simplify the configuration management, you can manage the configuration file locally and use the UNIX pipeline to pass the file\u2019s contents to Percona Backup for MongoDB on a remote host/running in a container. </p> <p>Here\u2019s how to do it:</p> <ol> <li>Create/update the configuration file (for example, <code>/etc/pbm_config.yaml</code>)</li> <li> <p>Create an environment variable for the path to the configuration file</p> <pre><code>$ export CONFIG_PATH=\"/etc/pbm_config.yaml\"\n</code></pre> </li> <li> <p>Pass the configuration file contents to Percona Backup for MongoDB. For example, if you run Percona Backup for MongoDB in Docker, use one of the following commands:</p> <ul> <li> <p>Connect to the existing container and pass the configuration:</p> <pre><code>$ cat \"$CONFIG_PATH\" | docker compose exec -T $SERVICE_NAME pbm config --file=\"-\"\n</code></pre> <p>Replace the <code>$SERVICE_NAME</code> with your service name.</p> </li> <li> <p>Create a new container to pass the configuration and exit: </p> <pre><code>$ cat \"$CONFIG_PATH\" | docker run -i --env PBM_MONGODB_URI=\"mongodb://&lt;PBM_USER&gt;:&lt;PBM_USER_PASSWORD&gt;@&lt;HOST&gt;:&lt;PORT&gt;\" --network=$NET_ID $CONTAINER_ID pbm config --file=\"-\"\n</code></pre> <p>Specify the valid PBM_MONGODB_URI connection string, the ID of the network the container will connect to and the container ID.</p> </li> </ul> </li> </ol> <p>As a result, your DBAs spend less time on administering Percona Backup for MongoDB and can focus on other activities instead.</p> <p></p>"},{"location":"manage/configure-remotely.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"manage/overview.html","title":"Overview","text":"<p>Need to fine-tune PBM to effectively manage your day-to-day operations? This section is the right place to be. Find what you can do with PBM in the followng topics:</p> <ul> <li>Configure PBM via pipelines</li> <li>Automate access to S3 buckets for PBM</li> <li>Upgrade PBM</li> <li>Remove PBM</li> </ul> <p></p>"},{"location":"manage/overview.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"manage/uninstalling.html","title":"Uninstall Percona Backup for MongoDB","text":"<p>To uninstall Percona Backup for MongoDB, do the following steps:</p> <ol> <li> <p>Check that no backups are currently in progress in the output of <code>pbm list</code>.</p> </li> <li> <p>Before the next 2 steps, make sure you know where the remote backup storage is, so you can delete backups made by Percona Backup for MongoDB. If it is an  S3-compatible object storage, you will need to use another tool such as Amazon AWS\u2019s \u201caws s3\u201d, Minio\u2019s <code>mc</code>, the web AWS Management Console, etc. to do that once Percona Backup for MongoDB is uninstalled. Don\u2019t forget to note the connection credentials before they are deleted too.</p> </li> <li> <p>Uninstall the pbm-agent and <code>pbm</code> executables. If you installed using a package manager, see Install Percona Backup for MongoDB for relevant package names and commands for your OS distribution.</p> </li> <li> <p>Drop the PBM control collections.</p> </li> <li> <p>Drop the PBM database user. If this is a cluster, the <code>dropUser</code> command will need to be run on each shard as well as in the config server replica set.</p> </li> <li> <p>(Optional) Delete the backups from the remote backup storage.</p> </li> </ol> <p></p>"},{"location":"manage/uninstalling.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"manage/upgrading.html","title":"Upgrade Percona Backup for MongoDB","text":"<p>The recommended and most convenient way to upgrade PBM is from Percona repositories.</p>"},{"location":"manage/upgrading.html#important-notes","title":"Important notes","text":"<ol> <li> <p>Backward compatibility between data backup and restore is supported for upgrades within one major version only (for example, from 1.1.x to 1.2.y). When you upgrade Percona Backup for MongoDB over several major versions (for example, from 1.0.x to 1.2.y), we recommend to make a backup right after the upgrade.</p> </li> <li> <p>Percona Backup for MongoDB v1.5.0 and later is incompatible with Percona Backup for MongoDB v1.4.1 and earlier due to different processing of system collections <code>Users</code> and <code>Roles</code> during backup / restore operations. After the upgrade to Percona Backup for MongoDB v1.5.0 and later, make sure to make a fresh backup.</p> </li> <li> <p>Starting from v1.7.0, the user running the <code>pbm-agent</code> process is changed from <code>pbm</code> to <code>mongod</code>. This is done for the following reasons:</p> <ul> <li> <p>To make physical backups and restores, the user running the <code>pbm-agent</code> process must have the read / write permissions to the MongoDB <code>dataDir</code>.</p> </li> <li> <p>To use the filesystem-based backup storage, the user running the <code>pbm-agent</code> process must also have the read / write permissions to the backup directory.</p> </li> </ul> </li> <li> <p>Starting from version 1.3.0, Percona Backup for MongoDB packages are stored in the <code>pbm</code> repository and the <code>tools</code> repository for backward compatibility.</p> </li> <li> <p>Upgrade Percona Backup for MongoDB on all nodes where it is installed.</p> </li> </ol>"},{"location":"manage/upgrading.html#prerequisites","title":"Prerequisites","text":"<p>Run all commands as root or via <code>sudo</code>.</p> <ol> <li> <p>Install <code>percona-release</code> tool. If you have installed it before, update it to the latest version.</p> </li> <li> <p>Enable the repository</p> <pre><code>$ sudo percona-release enable pbm release\n</code></pre> </li> </ol> <p>Note</p> <p>For <code>apt</code>-based systems, run <code>sudo apt update</code> to update the local cache.</p>"},{"location":"manage/upgrading.html#upgrade-to-the-latest-version","title":"Upgrade to the latest version","text":"On Debian and Ubuntu LinuxOn Red Hat Enterprise Linux and derivatives"},{"location":"manage/upgrading.html#1-stop-pbm-agent","title":"1. Stop <code>pbm-agent</code>","text":"<pre><code>$ sudo systemctl stop pbm-agent\n</code></pre>"},{"location":"manage/upgrading.html#2-install-new-packages","title":"2. Install new packages","text":"<pre><code>$ sudo apt install percona-backup-mongodb\n</code></pre>"},{"location":"manage/upgrading.html#3-reload-the-systemd-process","title":"3. Reload the <code>systemd</code> process","text":"<p>Starting from v1.7.0, reload the <code>systemd</code> process to update the unit file with the following command:</p> <pre><code>$ sudo systemctl daemon-reload\n</code></pre>"},{"location":"manage/upgrading.html#4-update-permissions","title":"4. Update permissions","text":"<p>For a filesystem-based backup storage, grant read / write permissions to the backup directory to the <code>mongod</code> user.</p>"},{"location":"manage/upgrading.html#5-start-pbm-agent","title":"5. Start <code>pbm-agent</code>","text":"<pre><code>$ sudo systemctl start pbm-agent\n</code></pre>"},{"location":"manage/upgrading.html#1-stop-pbm-agent_1","title":"1. Stop <code>pbm-agent</code>","text":"<pre><code>$ sudo systemctl stop pbm-agent\n</code></pre>"},{"location":"manage/upgrading.html#2-install-new-packages_1","title":"2. Install new packages","text":"<pre><code>$ sudo yum install percona-backup-mongodb\n</code></pre>"},{"location":"manage/upgrading.html#3-reload-the-systemd-process_1","title":"3. Reload the <code>systemd</code> process","text":"<p>Starting from v1.7.0, reload the <code>systemd</code> process to update the unit file with the following command:</p> <pre><code>$ sudo systemctl daemon-reload\n</code></pre>"},{"location":"manage/upgrading.html#4-update-permissions_1","title":"4. Update permissions","text":"<p>For a filesystem-based backup storage, grant read / write permissions to the backup directory to the <code>mongod</code> user.</p>"},{"location":"manage/upgrading.html#5-start-pbm-agent_1","title":"5. Start <code>pbm-agent</code>","text":"<pre><code>$ sudo systemctl start pbm-agent\n</code></pre>"},{"location":"manage/upgrading.html#upgrade-to-a-specific-version","title":"Upgrade to a specific version","text":"On Debian and Ubuntu LinuxOn Red Hat Enterprise Linux and derivatives <p>Note</p> <p>If MongoDB runs under a different user than <code>mongod</code> (the default configuration for Percona Server for MongoDB), use the same user to run the <code>pbm-agent</code>. For filesystem-based storage, grant the read / write permissions to the backup directory for this user.</p> <p></p>"},{"location":"manage/upgrading.html#1-list-available-versions","title":"1. List available versions","text":"<pre><code>$ sudo apt-cache madison percona-backup-mongodb\n</code></pre> <p>Output:</p> <pre><code>percona-backup-mongodb | 1.8.1-1.stretch | http://repo.percona.com/tools/apt stretch/main amd64 Packages\npercona-backup-mongodb | 1.8.0-1.stretch | http://repo.percona.com/tools/apt stretch/main amd64 Packages\npercona-backup-mongodb | 1.7.0-1.stretch | http://repo.percona.com/tools/apt stretch/main amd64 Packages\npercona-backup-mongodb | 1.6.1-1.stretch | http://repo.percona.com/tools/apt stretch/main amd64 Packages\npercona-backup-mongodb | 1.6.0-1.stretch | http://repo.percona.com/tools/apt stretch/main amd64 Packages\npercona-backup-mongodb | 1.5.0-1.stretch | http://repo.percona.com/tools/apt stretch/main amd64 Packages\n</code></pre>"},{"location":"manage/upgrading.html#2-stop-pbm-agent","title":"2. Stop <code>pbm-agent</code>","text":"<pre><code>$ sudo systemctl stop pbm-agent\n</code></pre>"},{"location":"manage/upgrading.html#3-install-packages","title":"3. Install packages","text":"<p>Install a specific version packages. For example, to upgrade to Percona Backup for MongoDB 1.7.0, run the following command:</p> <pre><code>$ sudo apt install percona-backup-mongodb=1.7.0-1.stretch\n</code></pre>"},{"location":"manage/upgrading.html#4-update-permissions_2","title":"4. Update permissions","text":"<p>For a filesystem-based backup storage, grant read / write permissions to the backup directory to the <code>mongod</code> user.</p>"},{"location":"manage/upgrading.html#5-start-pbm-agent_2","title":"5. Start <code>pbm-agent</code>","text":"<pre><code>$ sudo systemctl start pbm-agent\n</code></pre>"},{"location":"manage/upgrading.html#1-list-available-versions_1","title":"1. List available versions","text":"<pre><code>$ sudo yum list percona-backup-mongodb --showduplicates\n</code></pre> <p>Output:</p> <pre><code>Available Packages\npercona-backup-mongodb.x86_64    1.8-1.el7            pbm-release-x86_64\npercona-backup-mongodb.x86_64    1.8.0-1.el7          pbm-release-x86_64\npercona-backup-mongodb.x86_64    1.7.0-1.el7          pbm-release-x86_64\npercona-backup-mongodb.x86_64    1.6.1-1.el7          pbm-release-x86_64\npercona-backup-mongodb.x86_64    1.6.0-1.el7          pbm-release-x86_64\npercona-backup-mongodb.x86_64    1.5.0-1.el7          pbm-release-x86_64\n</code></pre>"},{"location":"manage/upgrading.html#2-stop-pbm-agent_1","title":"2. Stop <code>pbm-agent</code>","text":"<pre><code>$ sudo systemctl stop pbm-agent\n</code></pre>"},{"location":"manage/upgrading.html#3-install-packages_1","title":"3. Install packages","text":"<p>Install a specific version packages. For example, to upgrade to Percona Backup for MongoDB 1.7.1, run the following command:</p> <pre><code>$ sudo yum install percona-backup-mongodb-1.7.1-1.el7\n</code></pre>"},{"location":"manage/upgrading.html#4-update-permissions_3","title":"4. Update permissions","text":"<p>For a filesystem-based backup storage, grant read / write permissions to the backup directory to the <code>mongod</code> user.</p>"},{"location":"manage/upgrading.html#5-start-pbm-agent_3","title":"5. Start <code>pbm-agent</code>","text":"<pre><code>$ sudo systemctl start pbm-agent\n</code></pre>"},{"location":"manage/upgrading.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"reference/backup-options.html","title":"Backup options","text":"<pre><code>backup:\n  priority:\n    \"localhost:28019\": 2.5\n    \"localhost:27018\": 2.5\n    \"localhost:27020\": 2.0\n    \"localhost:27017\": 0.1\n  compression: &lt;string&gt;\n  compressionLevel: &lt;int&gt;\n  timeouts:\n    startingStatus: 60\n</code></pre>"},{"location":"reference/backup-options.html#priority","title":"priority","text":"<p>Type: array of strings</p> <p>The list of <code>mongod</code> nodes and their priority for making backups. The node with the highest priority is elected for making a backup. If several nodes have the same priority, the one among them is randomly elected to make a backup.</p> <p>If not set, the replica set nodes have the default priority as follows:</p> <ul> <li>hidden nodes - 2.0</li> <li>secondary nodes - 1.0</li> <li>primary node - 0.5</li> </ul>"},{"location":"reference/backup-options.html#backupcompression","title":"backup.compression","text":"<p>Type: string  Default: s2</p> <p>The compression method for backup snapshots. Available in Percona Backup for MongoDB as of version 1.8.0.</p> <p>When <code>none</code> is specified, backups are made without compression.</p> <p>Supported values: <code>gzip</code>, <code>snappy</code>, <code>lz4</code>, <code>s2</code>, <code>pgzip</code>, <code>zstd</code>. Default: <code>s2</code>.</p>"},{"location":"reference/backup-options.html#backupcompressionlevel","title":"backup.compressionLevel","text":"<p>Type: int</p> <p>The compression level. The default value depends on the compression method used. </p> <p>The following table shows available compression levels per compression method:</p> Compression method Supported compression levels Default <code>zstd</code> 1 - fastest speed, 2 - default, 3 - better compression, 4 - best compression 2 <code>snappy</code> no levels <code>lz4</code> From 1 (fastest) to 16 1 <code>gzip</code> and <code>pgzip</code> -1 - default compression, 0 - no compression, 1 - best speed, 9 - best compression -1 <p>Note that the greater value you specify, the more time and computing resources it will take to compress the data.</p>"},{"location":"reference/backup-options.html#backuptimeoutsstartingstatus","title":"backup.timeouts.startingStatus","text":"<p>Type: unit32  Default: 33</p> <p>The wait time (in seconds) for PBM to start physical backups on all shards. Increasing this value is useful when it takes longer than usual to open the <code>$backupCursor</code>.</p> <p>The 0 (zero) value resets the timeout to the default 33 seconds. </p> <p></p>"},{"location":"reference/backup-options.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"reference/config.html","title":"Percona Backup for MongoDB configuration in a cluster (or non-sharded replica set)","text":"<p>The configuration information is stored in a single document of the <code>admin.pbmConfig</code> collection. That single copy is shared by all the <code>pbm-agent</code> processes in a cluster (or non-sharded replica set), and can be read or updated using the <code>pbm</code> CLI tool.</p> <p>You can see the whole config by running</p> <pre><code>&gt; db.getSiblingDB(\u201cadmin\u201d).pbmConfig.findOne()\n</code></pre> <p>But you don\u2019t have to use the <code>mongo</code> shell; the <code>pbm</code> CLI has a \u201cconfig\u201d subcommand to read and update it.</p> <p>Percona Backup for MongoDB config contains the following settings:</p> <ul> <li> <p>Remote backup storage configuration is available starting with version 1.0 or 1.1.</p> </li> <li> <p>Point-in-time recovery configuration is available starting with version 1.3.0.</p> </li> <li> <p>Restore options are available as starting with version 1.3.2.</p> </li> </ul> <p>Run <code>pbm config --list</code> to see the whole config. (Sensitive fields such as keys will be redacted.)</p>"},{"location":"reference/config.html#insert-the-whole-percona-backup-for-mongodb-config-from-a-yaml-file","title":"Insert the whole Percona Backup for MongoDB config from a YAML file","text":"<p>If you are initializing a cluster or a non-sharded replica set for the first time, it is simplest to write the whole config as YAML file and use the <code>pbm config --file</code> command to upload all the values in one command.</p> <p>Find the config file examples for the remote backup storage (required) in the Example config files section. For more information about available config file options, see Configuration file options.</p> <p>Use the following command to upload the config file. For example, config file name is <code>pbm_config.yaml</code>:</p> <pre><code>$ pbm config --file pbm_config.yaml\n</code></pre> <p>Execute the command while connecting to config server replica set if it is a cluster. Otherwise just connect to the non-sharded replica set as normal. (See MongoDB connection strings - A Reminder (or Primer) if you are not familiar with MongoDB connection strings yet.)</p>"},{"location":"reference/config.html#accessing-or-updating-single-config-values","title":"Accessing or updating single config values","text":"<p>You can set a single value at a time. For nested values, use dot-concatenated key names as shown in the following example:</p> <pre><code>pbm config --set storage.s3.bucket=\"operator-testing\"\n</code></pre> <p>To list a single value, you can specify just the key name by itself.  If set, the command returns the value.</p> SuccessNo value <pre><code>pbm config storage.s3.bucket\noperator-testing\n</code></pre> <pre><code>pbm config storage.s3.INVALID-KEY\nError: unable to get config key: invalid config key\n</code></pre> <p></p>"},{"location":"reference/config.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"reference/configuration-options.html","title":"Remote backup storage options","text":""},{"location":"reference/configuration-options.html#common-options","title":"Common options","text":""},{"location":"reference/configuration-options.html#storagetype","title":"storage.type","text":"<p>Type: string  Required:     YES   </p> <p>Remote backup storage type. Supported values: <code>s3</code>, <code>filesystem</code>, <code>azure</code>.</p>"},{"location":"reference/configuration-options.html#s3-type-storage-options","title":"S3 type storage options","text":"<pre><code>storage:\n  type: s3\n  s3:\n    region: &lt;string&gt;\n    bucket: &lt;string&gt;\n    prefix: &lt;string&gt;\n    endpointUrl: &lt;string&gt;\n    credentials:\n      access-key-id: &lt;your-access-key-id-here&gt;\n      secret-access-key: &lt;your-secret-key-here&gt;\n      session-token: &lt;string&gt;\n    uploadPartSize: &lt;int&gt;\n    maxUploadParts: &lt;int&gt;\n    storageClass: &lt;string&gt;\n    serverSideEncryption:\n      sseAlgorithm: aws:kms\n      kmsKeyID: &lt;your-kms-key-here&gt;\n      sseCustomerAlgorithm: AES256\n      sseCustomerKey: &lt;your_encryption_key&gt;\n    retryer:\n      numMaxRetries: 3\n      minRetryDelay: 30\n      maxRetryDelay: 5\n</code></pre>"},{"location":"reference/configuration-options.html#storages3provider","title":"storage.s3.provider","text":"<p>Type: string  Required: NO</p> <p>The storage provider\u2019s name. </p> <p>Supported values: <code>aws</code>, <code>gcs</code></p>"},{"location":"reference/configuration-options.html#storages3bucket","title":"storage.s3.bucket","text":"<p>Type: string  Required: YES</p> <p>The name of the storage bucket. See the AWS Bucket naming rules and GCS bucket naming guidelines for bucket name requirements.</p>"},{"location":"reference/configuration-options.html#storages3region","title":"storage.s3.region","text":"<p>Type: string  Required: YES (for AWS and GCS)</p> <p>The location of the storage bucket. Use the AWS region list and GCS region list to define the bucket region</p>"},{"location":"reference/configuration-options.html#storages3prefix","title":"storage.s3.prefix","text":"<p>Type: string  Required: NO</p> <p>The path to the data directory on the bucket. If undefined, backups are stored in the bucket root directory</p>"},{"location":"reference/configuration-options.html#storages3endpointurl","title":"storage.s3.endpointUrl","text":"<p>Type: string  Required: YES (for MinIO and GCS)</p> <p>The URL to access the bucket. The default value for GCS is <code>https://storage.googleapis.com</code></p>"},{"location":"reference/configuration-options.html#storages3forcepathstyle","title":"storage.s3.forcePathStyle","text":"<p>Type: boolean  Required: NO</p> <p>By default, PBM uses the path-style URLs for accessing the S3 bucket. Setting this option to <code>false</code> instructs PBM to send virtual-hosted\u2013style requests instead.</p>"},{"location":"reference/configuration-options.html#storages3credentialsaccess-key-id","title":"storage.s3.credentials.access-key-id","text":"<p>Type: string  Required: YES</p> <p>Your access key to the storage bucket. This option can be omitted when you run Percona Backup for MongoDB using an EC2 instance profile. To learn more, refer to Automate access to S3 buckets for Percona Backup for MongoDB</p>"},{"location":"reference/configuration-options.html#storages3credentialssecret-access-key","title":"storage.s3.credentials.secret-access-key","text":"<p>Type: string  Required: YES</p> <p>The key to sign your programmatic requests to the storage bucket. This option can be omitted when you run Percona Backup for MongoDB using an EC2 instance profile. To learn more, refer to Automate access to S3 buckets for Percona Backup for MongoDB</p>"},{"location":"reference/configuration-options.html#storages3credentialssession-token","title":"storage.s3.credentials.session-token","text":"<p>Type: string  Required: NO</p> <p>The AWS session token used to validate the temporary security credentials for accessing the S3 storage. </p>"},{"location":"reference/configuration-options.html#storages3uploadpartsize","title":"storage.s3.uploadPartSize","text":"<p>Type: int  Required: NO</p> <p>The size of data chunks in bytes to be uploaded to the storage bucket. Default: 10MB</p> <p>Percona Backup for MongoDB automatically increases the <code>uploadPartSize</code> value if the size of the file to be uploaded exceeds the max allowed file size. (The max allowed file size is calculated with the default values of <code>uploadPartSize</code> * <code>maxUploadParts</code> and is appr. 97,6 GB).</p> <p>The <code>uploadPartSize</code> value is printed in the <code>pbm-agent</code> log.</p> <p>By setting this option, you can manually adjust the size of data chunks if Percona Backup for MongoDB failed to do it for some reason. The defined <code>uploadPartSize</code> value overrides the default value and is used for calculating the max allowed file size</p>"},{"location":"reference/configuration-options.html#storages3maxuploadparts","title":"storage.s3.maxUploadParts","text":"<p>Type: int  Required: NO  Default: 10,000</p> <p>The maximum number of data chunks to be uploaded to the storage bucket. Default: 10,000</p> <p>By setting this option, you can override the value defined in the AWS SDK.</p> <p>It can be useful when using an S3 provider that supports a smaller number of chunks for multipart uploads.</p> <p>The <code>maxUploadParts</code> value is printed in the pbm-agent log.</p>"},{"location":"reference/configuration-options.html#storages3storageclass","title":"storage.s3.storageClass","text":"<p>Type: string  Required: NO</p> <p>The storage class assigned to objects stored in the S3 bucket. If not provided, the <code>STANDARD</code> storage class will be used. This option is available in Percona Backup for MongoDB as of v1.7.0.</p>"},{"location":"reference/configuration-options.html#storages3debugloglevels","title":"storage.s3.debugLogLevels","text":"<p>Type: string  Required: NO</p> <p>Enables S3 debug logging for different types of S3 requests. S3 log messages are printed in the <code>pbm logs</code> output.</p> <p>Supported values are: <code>LogDebug</code>, <code>Signing</code>, <code>HTTPBody</code>, <code>RequestRetries</code>, <code>RequestErrors</code>, <code>EventStreamBody</code>.</p> <p>To specify several event types, separate them by comma. To lean more about the event types, see the documentation</p> <p>When undefined, no S3 debug logging is performed.</p>"},{"location":"reference/configuration-options.html#storages3insecureskiptlsverify","title":"storage.s3.insecureSkipTLSVerify","text":"<p>Type: bool  Required: NO  Default: False</p> <p>Disables the TLS verification of the S3 storage. This allows Percona Backup for MongoDB to upload data to S3-like storages that use self-issued TLS certificates. Available in Percona Backup for MongoDB as of version 1.7.0.</p> <p>Warning</p> <p>Use this option with caution as it might leave a hole for man-in-the-middle attacks.</p>"},{"location":"reference/configuration-options.html#server-side-encryption-options","title":"Server-side encryption options","text":""},{"location":"reference/configuration-options.html#serversideencryptionssealgorithm","title":"serverSideEncryption.sseAlgorithm","text":"<p>Type: string  Required: NO </p> <p>The key management mode used for server-side encryption with the encryption keys stored in AWS KMS.</p> <p>Supported value: <code>aws:kms</code></p>"},{"location":"reference/configuration-options.html#serversideencryptionkmskeyid","title":"serverSideEncryption.kmsKeyID","text":"<p>Type: string  Required: NO</p> <p>Your customer-managed key stored in the AWS KMS.</p>"},{"location":"reference/configuration-options.html#serversideencryptionssecustomeralgorithm","title":"serverSideEncryption.sseCustomerAlgorithm","text":"<p>Type: string  Required: NO </p> <p>The key management mode for server-side encryption with customer-provided keys (SSE-C).</p> <p>Supported value: <code>AES256</code></p>"},{"location":"reference/configuration-options.html#serversideencryptionssecustomerkey","title":"serverSideEncryption.sseCustomerKey","text":"<p>Type: string  Required: NO</p> <p>Your custom encryption key. This key is not stored on the S3 storage side. Thus, it is your responsibility to track what data is encrypted with what key and for storing the key. </p>"},{"location":"reference/configuration-options.html#upload-retry-options","title":"Upload retry options","text":""},{"location":"reference/configuration-options.html#retryernummaxretries","title":"retryer.numMaxRetries","text":"<p>Type: int  Required: NO  Default: 3</p> <p>The maximum number of retries to upload data to S3 storage. A zero value means no retries will be performed. Available in Percona Backup for MongoDB as of 1.7.0.</p>"},{"location":"reference/configuration-options.html#retryerminretrydelay","title":"retryer.minRetryDelay","text":"<p>Type: time.Duration  Required: NO  Default: 30</p> <p>The minimum time (in ms) to wait till the next retry. Available in Percona Backup for MongoDB as of 1.7.0.</p>"},{"location":"reference/configuration-options.html#retryermaxretrydelay","title":"retryer.maxRetryDelay","text":"<p>Type: time.Duration  Required: NO  Default: 5</p> <p>The maximum time (in minutes) to wait till the next retry. Available in Percona Backup for MongoDB as of 1.7.0.</p>"},{"location":"reference/configuration-options.html#filesystem-storage-options","title":"Filesystem storage options","text":"<pre><code>storage:\n  type: filesystem\n  filesystem:\n    path: &lt;string&gt;\n</code></pre>"},{"location":"reference/configuration-options.html#storagefilesystempath","title":"storage.filesystem.path","text":"<p>Type: string  Required: YES</p> <p>The path to the backup directory</p>"},{"location":"reference/configuration-options.html#microsoft-azure-blob-storage-options","title":"Microsoft Azure Blob storage options","text":"<pre><code>storage:\n  type: azure\n  azure:\n    account: &lt;string&gt;\n    container: &lt;string&gt;\n    endpointUrl: &lt;string&gt;\n    prefix: &lt;string&gt;\n    credentials:\n      key: &lt;your-access-key&gt;\n</code></pre>"},{"location":"reference/configuration-options.html#storageazureaccount","title":"storage.azure.account","text":"<p>Type: string  Required: YES</p> <p>The name of your storage account.</p>"},{"location":"reference/configuration-options.html#storageazurecontainer","title":"storage.azure.container","text":"<p>Type: string  Required: YES</p> <p>The name of the storage container. See the  Container names for naming conventions.</p>"},{"location":"reference/configuration-options.html#storageazureendpointurl","title":"storage.azure.endpointUrl","text":"<p>Type: string  Required: NO</p> <p>The URL to access the data in Microsoft Azure Blob Storage. The default value is <code>https://&lt;storage-account&gt;.blob.core.windows.net</code>.</p>"},{"location":"reference/configuration-options.html#storageazureprefix","title":"storage.azure.prefix","text":"<p>Type: string  Required: NO</p> <p>The path (sub-folder) to the backups inside the container. If undefined, backups are stored in the container root directory.</p>"},{"location":"reference/configuration-options.html#storageazurecredentialskey","title":"storage.azure.credentials.key","text":"<p>Type: string  Required: YES</p> <p>Your access key to authorize access to data in your storage account.</p> <p></p>"},{"location":"reference/configuration-options.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"reference/contributing.html","title":"Contribution guidelines","text":"<p>We\u2019re glad that you would like to become a Percona community member and participate in keeping open source open.  </p> <p>There are many ways how you can contribute:</p> <ul> <li>Submit bug reports or feature requests.</li> <li>Submit a code patch.</li> <li>Contribute to documentation.</li> </ul>"},{"location":"reference/contributing.html#submit-bug-reports-or-feature-requests","title":"Submit bug reports or feature requests","text":"<p>If you find a bug in Percona Backup for MongoDB, you can submit a report to the JIRA issue tracker for Percona Backup for MongoDB.</p> <p>Start by searching the open tickets for a similar report. If you find that someone else has already reported your problem, then you can upvote that report to increase its visibility.</p> <p>If there is no existing report, submit a report following these steps:</p> <ol> <li> <p>Sign in to JIRA issue tracker. You will need to create an account if you do not have one.</p> </li> <li> <p>In the Summary, Description, Steps To Reproduce, Affects Version fields describe the problem you have detected. For PBM the important diagnostic information is: log files from the pbm-agents; a dump of the PBM control collections.</p> </li> </ol> <p>As a general rule of thumb, try to create bug reports that are:</p> <ul> <li> <p>Reproducible: Describe the steps to reproduce the problem.</p> </li> <li> <p>Specific: Include the version of Percona Backup for MongoDB, your environment, and so on.</p> </li> <li> <p>Unique: Check if there already exists a JIRA ticket to describe the problem.</p> </li> <li> <p>Scoped to a Single Bug: Report only one bug in one JIRA ticket.</p> </li> </ul>"},{"location":"reference/contributing.html#submit-a-code-patch","title":"Submit a code patch","text":"<p>If you\u2019d like to submit a code patch, follow the Contributing guide in PBM code repository. </p>"},{"location":"reference/contributing.html#contribute-to-documentation","title":"Contribute to documentation","text":""},{"location":"reference/contributing.html#edit-documentation-online-via-github","title":"Edit documentation online via GitHub","text":"<ol> <li> <p>Click the  Edit this page icon next to the page title. The source <code>.md</code> file of the page opens in GitHub editor in your browser. If you haven\u2019t worked with the repository before, GitHub creates a fork of it for you.</p> </li> <li> <p>Edit the page. You can check your changes on the Preview tab.</p> </li> <li> <p>Commit your changes.</p> <ul> <li>In the Commit changes section, describe your changes.</li> <li>Select the Create a new branch for this commit and start a pull request option</li> <li>Click Propose changes.</li> </ul> </li> <li> <p>GitHub creates a branch and a commit for your changes. It loads a new page on which you can open a pull request to Percona. The page shows the base branch - the one you offer your changes for, your commit message and a diff - a visual representation of your changes against the original page.  This allows you to make a last-minute review. When you are ready, click the Create pull request button.</p> </li> <li>Someone from our team reviews the pull request and if everything is correct, merges it into the documentation. Then it gets published on the site.</li> </ol>"},{"location":"reference/contributing.html#edit-documentation-locally","title":"Edit documentation locally","text":"<p>If you wish to have full control over the documentation process, follow the Contributing to documentation guide.</p> <p></p>"},{"location":"reference/contributing.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"reference/glossary.html","title":"Glossary","text":""},{"location":"reference/glossary.html#acid","title":"ACID","text":"<p>Set of properties that guarantee database transactions are processed reliably. Stands for <code>Atomicity</code>, <code>Consistency</code>, <code>Isolation</code>, <code>Durability</code>.</p>"},{"location":"reference/glossary.html#amazon-s3","title":"Amazon S3","text":"<p>Amazon S3 (Simple Storage Service) is an object storage service provided through a web service interface offered by Amazon Web Services.</p>"},{"location":"reference/glossary.html#atomicity","title":"Atomicity","text":"<p>Atomicity means that database operations are applied following an \u201call or nothing\u201d rule. A transaction is either fully applied or not at all.</p>"},{"location":"reference/glossary.html#blob","title":"Blob","text":"<p>A blob stands for Binary Large Object, which includes objects such as images and multimedia files. In other words these are various data files that you store in Microsoft\u2019s data storage platform. Blobs are organized in containers which are kept in Azure Blob storage under your storage account.</p>"},{"location":"reference/glossary.html#bucket","title":"Bucket","text":"<p>A bucket is a container on the s3 remote storage that stores backups.</p>"},{"location":"reference/glossary.html#collection","title":"Collection","text":"<p>A collection is the way data is organized in MongoDB. It is analogous to a table in relational databases.</p>"},{"location":"reference/glossary.html#completion-time","title":"Completion time","text":"<p>Starting with version 2.0.0, the completion time is renamed \u201crestore_to_time\u201d</p> <p>The completion time is the time to which the sharded cluster / non-shared replica set will be returned to after the restore.  It is reflected in the \u201ccomplete\u201d section of the <code>pbm list</code> / <code>pbm status</code> command outputs.</p> <p>In <code>logical</code> backups, the completion time almost coincides with the backup finish time. To define the completion time, Percona Backup for MongoDB waits for the backup snapshot to finish on all cluster nodes. Then it captures the oplog from the backup start time up to that time. </p> <p>In <code>physical</code> backups, the completion time is only a few seconds after the backup start time. By holding the <code>$backupCursor</code> open, Percona Backup for MongoDB guarantees that the checkpoint data won\u2019t change during the backup. In such a way Percona Backup for MongoDB can define the completion time ahead.</p>"},{"location":"reference/glossary.html#consistency","title":"Consistency","text":"<p>In the context of backup and restore, consistency means that the data restored will be consistent in a given point in time. Partial or incomplete writes to disk of atomic operations (for example, to table and index data structures separately) won\u2019t be served to the client after the restore. The same applies to multi-document transactions that started but didn\u2019t complete by the time the backup was finished.</p>"},{"location":"reference/glossary.html#container","title":"Container","text":"<p>A container is like a directory in Azure Blob storage that contains a set of blobs.</p>"},{"location":"reference/glossary.html#durability","title":"Durability","text":"<p>Once a transaction is committed, it will remain so.</p>"},{"location":"reference/glossary.html#ebs-snapshot","title":"EBS-snapshot","text":"<p>An EBS (Amazon Elastic Block Storage) snapshot is the point-in-time copy of your data, and can be used to enable disaster recovery, migrate data across regions and accounts, and improve backup compliance.</p>"},{"location":"reference/glossary.html#gcp","title":"GCP","text":"<p>GCP (Google Cloud Platform) is the set of services, including storage service, that runs on Google Cloud infrastructure.</p>"},{"location":"reference/glossary.html#isolation","title":"Isolation","text":"<p>The Isolation requirement means that no transaction can interfere with another.</p>"},{"location":"reference/glossary.html#jenkins","title":"Jenkins","text":"<p>Jenkins is a continuous integration system that we use to help ensure the continued quality of the software we produce. It helps us achieve the aims of:</p> <ul> <li>No failed tests in trunk on any platform</li> <li>Aid developers in ensuring merge requests build and test on all platforms,</li> <li>No known performance regressions (without a damn good explanation).</li> </ul>"},{"location":"reference/glossary.html#minio","title":"MinIO","text":"<p>MinIO is a cloud storage server compatible with Amazon S3, released under Apache License v2.</p>"},{"location":"reference/glossary.html#oplog","title":"Oplog","text":"<p>Oplog (operations log) is a fixed-size collection that keeps a rolling record of all operations that modify data in the database. </p>"},{"location":"reference/glossary.html#oplog-slice","title":"Oplog slice","text":"<p>A compressed bundle of oplog entries stored in the Oplog Store database in MongoDB. The oplog size captures an approximately 10-minute frame. For a snapshot, the oplog size is defined by the time that the slowest replica set member requires to perform mongodump.    </p>"},{"location":"reference/glossary.html#opid","title":"OpID","text":"<p>A unique identifier of an operation such as backup, restore, resync. When a pbm-agent starts processing an operation, it acquires a lock and an opID. This prevents processing the same operation twice (for example, if there are network issues in distributed systems). Using opID as a log filter allows viewing logs for an operation in progress.</p>"},{"location":"reference/glossary.html#pbm-agent","title":"<code>pbm-agent</code>","text":"<p>A <code>pbm-agent</code> is a PBM process running on the mongod node for backup and restore operations. A pbm-agent instance is required for every mongod node (including replica set secondary members and config server replica set nodes).   </p>"},{"location":"reference/glossary.html#pbm-cli","title":"pbm CLI","text":"<p>Command-line interface for controlling the backup system. PBM CLI can connect to several clusters so that a user can manage backups on many clusters.</p>"},{"location":"reference/glossary.html#pbm-control-collections","title":"PBM Control collections","text":"<p>PBM Control collections are collections with config, authentication data and backup states. They are stored in the admin db  in the cluster or non-sharded replica set and serve as the communication channel between <code>pbm-agent</code> and <code>pbm CLI</code>. <code>pbm CLI</code> creates a new <code>pbmCmd</code> document for a new operation. <code>pbm-agents</code> monitor it and update as they process the operation.</p>"},{"location":"reference/glossary.html#percona-backup-for-mongodb","title":"Percona Backup for MongoDB","text":"<p>Percona Backup for MongoDB (PBM) is a low-impact backup solution for MongoDB non-sharded replica sets and clusters. It supports both Percona Server for MongoDB and MongoDB Community Edition. </p>"},{"location":"reference/glossary.html#percona-server-for-mongodb","title":"Percona Server for MongoDB","text":"<p>Percona Server for MongoDB is a drop-in replacement for MongoDB Community Edition with enterprise-grade features.</p>"},{"location":"reference/glossary.html#point-in-time-recovery","title":"Point-in-Time Recovery","text":"<p>Point-in-Time Recovery is restoring the database up to a specific moment in time. The data is restored from the backup snapshot and then events that occurred to the data are replayed from oplog. </p>"},{"location":"reference/glossary.html#replica-set","title":"Replica set","text":"<p>A replica set is a group of <code>mongod</code> nodes that host the same data set.</p>"},{"location":"reference/glossary.html#s3-compatible-storage","title":"S3 compatible storage","text":"<p>This is the storage that is built on the S3 API.</p>"},{"location":"reference/glossary.html#server-side-encryption","title":"Server-side encryption","text":"<p>Server-side encryption is the encryption of data by the remote storage server as it receives it. The data is encrypted when it is written to S3 bucket and decrypted when you access the data. </p>"},{"location":"reference/glossary.html#technical-preview-feature","title":"Technical preview feature","text":"<p>Technical preview features are not yet ready for enterprise use and are not included in support via SLA. They are included in this release so that users can provide feedback prior to the full release of the feature in a future GA release (or removal of the feature if it is deemed not useful). This functionality can change (APIs, CLIs, etc.) from tech preview to GA. </p> <p></p>"},{"location":"reference/glossary.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"reference/pbm-commands.html","title":"<code>pbm</code> commands","text":"<p><code>pbm</code> CLI is the command line utility to control the backup system. This page describes <code>pbm</code> commands available in Percona Backup for MongoDB.</p> <p>For how to get started with Percona Backup for MongoDB, see Initial setup.</p>"},{"location":"reference/pbm-commands.html#pbm-backup","title":"pbm backup","text":"<p>Creates a backup snapshot and saves it in the remote backup storage.</p> <p>The command has the following syntax:</p> <pre><code>$ pbm backup [&lt;flags&gt;]\n</code></pre> <p>For more information about using <code>pbm backup</code>, see Starting a backup</p> <p>The command accepts the following flags:</p> Flag Description <code>-t</code>, <code>--type</code> The type of backup. Supported values: physical, logical (default), incremental, external. When not specified, Percona Backup for MongoDB makes a logical backup. <code>--base</code> For incremental backups only. Set the backup as the base and start tracking the incremental backup history to calculate and save the difference in data blocks for subsequent incremental backups. <code>--compression</code> Create a backup with compression.  Supported compression methods: <code>gzip</code>, <code>snappy</code>, <code>lz4</code>, <code>s2</code>, <code>pgzip</code>, <code>zstd</code>. Default: <code>s2</code>  The <code>none</code> value means no compression is done during backup. <code>--compression-level</code> Configure the compression level from 0 to 10. The default value depends on the compression method used. <code>-o</code>, <code>--out=text</code> Shows the output format as either plain text or a JSON object. Supported values: <code>text</code>, <code>json</code> <code>--wait</code> Wait for the backup to finish. The flag blocks the shell session. <code>-l</code>, <code>--list-files</code> For external backups only. Shows the list of fines per node to copy. <code>--ns=\"database.collection\"</code> Makes a logical backup of the specified namespace - the database and collection(s). To back up all collections in the database, specify the value in the <code>--ns=\"database.*\"</code> format. In version 2.0.0, only a single namespace is supported for the backup. JSON output <pre><code>{\n  \"name\": \"&lt;backup_name&gt;\",\n  \"storage\": \"&lt;my-backup-dir&gt;\"\n}\n</code></pre>"},{"location":"reference/pbm-commands.html#pbm-backup-finish","title":"pbm backup-finish","text":"<p>Closes the <code>backupCursor</code> and finishes the external backup. Must be run after running <code>pbm backup -t external</code>. To learn more, refer to API for snapshot-based physical backups.</p> <p>The command has the following syntax:</p> <pre><code>$ pbm backup-finish [backup-name] \n</code></pre>"},{"location":"reference/pbm-commands.html#pbm-cancel-backup","title":"pbm cancel-backup","text":"<p>Cancels a running backup. The backup is marked as canceled in the backup list.</p> <p>The command accepts the following flags:</p> Flag Description <code>-o</code>, <code>--out=text</code> Shows the output format as either plain text or a JSON object. Supported values: <code>text</code>, <code>json</code> JSON output <pre><code>{\n  \"msg\": \"Backup cancellation has started\"\n}\n</code></pre>"},{"location":"reference/pbm-commands.html#pbm-cleanup","title":"pbm cleanup","text":"<p>Deletes outdated backup snapshots and point-in-time recovery oplog slices.</p> <p>The command has the following syntax:</p> <pre><code>pbm cleanup [&lt;flags&gt;]\n</code></pre> <p>The command accepts the following flags:</p> Flag Description <code>--older-than=TIMESTAMP</code> Deletes backups older than date / time specified in the format: - <code>%Y-%M-%DT%H:%M:%S</code> (e.g. 2020-04-20T13:13:20),  - <code>%Y-%M-%D</code> (e.g. 2020-04-20),  - <code>XXd</code> (e.g. 30d). Only days are supported <code>-w</code>, <code>--wait</code> Wait for the cleanup to finish. The flag blocks the shell session <code>-y</code>, <code>--yes</code> Cleans up the data storage without asking for a user\u2019s confirmation <code>--dry-run</code> Checks for the old data to be deleted without deleting it. Allows to verify what data to delete"},{"location":"reference/pbm-commands.html#pbm-config","title":"pbm config","text":"<p>Sets, changes or lists Percona Backup for MongoDB configuration.</p> <p>The command has the following syntax:</p> <pre><code>$ pbm config [&lt;flags&gt;] [&lt;key&gt;]\n</code></pre> <p>The command accepts the following flags:</p> Flag Description <code>--force-resync</code> Resync backup list with the current storage <code>--list</code> List current settings <code>--file=FILE</code> Upload the config information from a YAML file <code>--set=SET</code> Set a new config option value. Specify the option in the <code>&lt;key.name=value&gt;</code> format. <code>-o</code>, <code>--out=text</code> Shows the output format as either plain text or a JSON object. Supported values: text, json PBM configuration output <pre><code>{\n  \"pitr\": {\n    \"enabled\": false,\n    \"oplogSpanMin\": 0\n  },\n  \"storage\": {\n    \"type\": \"filesystem\",\n    \"s3\": {\n      \"region\": \"\",\n      \"endpointUrl\": \"\",\n      \"bucket\": \"\"\n    },\n    \"azure\": {},\n    \"filesystem\": {\n      \"path\": \"&lt;my-backup-dir&gt;\"\n    }\n  },\n  \"restore\": {\n    \"batchSize\": 500,\n    \"numInsertionWorkers\": 10\n  },\n  \"backup\": {}\n}\n</code></pre> Setting a config value <pre><code>[\n  {\n    \"key\": \"pitr.enabled\",\n    \"value\": \"true\"\n  }\n]\n</code></pre>"},{"location":"reference/pbm-commands.html#pbm-delete-backup","title":"pbm delete-backup","text":"<p>Deletes the specified backup snapshot or all backup snapshots that are older than the specified time. The command deletes backups that are not running regardless of the remote backup storage being used.</p> <p>The following is the command syntax:</p> <pre><code>$ pbm delete-backup [&lt;flags&gt;] [&lt;name&gt;]\n</code></pre> <p>The command accepts the following flags:</p> Flag Description <code>--older-than=TIMESTAMP</code> Deletes backups older than date / time specified in the format: - <code>%Y-%M-%DT%H:%M:%S</code> (e.g. 2020-04-20T13:13:20) or  - <code>%Y-%M-%D</code> (e.g. 2020-04-20) <code>--force</code> Forcibly deletes backups without asking for user\u2019s confirmation <code>--yes</code> Deletes backups without asking for user\u2019s confirmation"},{"location":"reference/pbm-commands.html#pbm-delete-pitr","title":"pbm delete-pitr","text":"<p>Deletes oplog slices produced for Point-in-Time Recovery.</p> <p>The command has the following syntax:</p> <pre><code>pbm delete-pitr [&lt;flags&gt;]\n</code></pre> <p>The command accepts the following flags:</p> Flag Description <code>-a</code>, <code>--all</code> Deletes all oplog <code>--older-than=TIMESTAMP</code> Deletes oplog slices older than date / time specified in the format:  - <code>%Y-%M-%DT%H:%M:%S</code> (e.g. 2020-04-20T13:13:20) or  - <code>%Y-%M-%D</code> (e.g. 2020-04-20)  When you specify a timestamp, Percona Backup for MongoDB rounds it down to align with the completion time of the closest backup snapshot and deletes oplog slices that precede this time. Thus, extra slices remain. This is done to ensure oplog continuity. To illustrate, the PITR time range is <code>2021-08-11T11:16:21 - 2021-08-12T08:55:25</code> and backup snapshots are:  <code>2021-08-12T08:49:46Z 13.49MB [restore_to_time: 2021-08-12T08:50:06]</code> <code>2021-08-11T11:36:17Z 7.37MB [restore_to_time: 2021-08-11T11:36:38]</code>  Say you specify the timestamp <code>2021-08-11T19:16:21</code>. The closest backup is <code>2021-08-11T11:36:17Z 7.37KB [restore_to_time: 2021-08-11T11:36:38]</code>. PBM rounds down the timestamp to <code>2021-08-11T11:36:38</code> and deletes all slices that precede this time. As a result, your PITR time range is <code>2021-08-11T11:36:38 - 2021-08-12T09:00:25</code>.  NOTE: Percona Backup for MongoDB doesn\u2019t delete the oplog slices that follow the most recent backup. This is done to ensure point in time recovery from that backup snapshot. For example, if the snapshot is <code>2021-07-20T07:05:23Z [restore_to_time: 2021-07-21T07:05:44]</code> and you specify the timestamp <code>2021-07-20T07:05:45</code>, Percona Backup for MongoDB deletes only slices that were made before <code>2021-07-20T07:05:23Z</code>. <code>--force</code> Forcibly deletes oplog slices without asking a user\u2019s confirmation <code>-o</code>, <code>--out=json</code> Shows the output as either the plain text (default) or a JSON object. Supported values: <code>text</code>, <code>json</code>. <code>--yes</code> Deletes backups without asking for user\u2019s confirmation"},{"location":"reference/pbm-commands.html#pbm-describe-backup","title":"pbm describe-backup","text":"<p>Provides the detailed information about a backup:</p> <ul> <li>backup name</li> <li>type</li> <li>status</li> <li>namespaces - what was backed up during a selective backup</li> <li>size</li> <li>error message for failed backup</li> <li>last write timestamp </li> <li>last write time - human-readable indication of the last write </li> <li>last transition time - the timestamp when a backup changed its status</li> <li>cluster information: the replica set name, the backup status on this replica set, whether it is used as a config server replica set, last write timestamp</li> <li>replica set info: name, backup status, last write timestamp and last transition time, <code>mongod</code> security options, if encryption is configured.</li> <li>for snapshot-based backups, provides the list of files being copied</li> <li>for logical and selective backups, provides the list of collections included in the backup. Available with version 2.3.0.</li> </ul> <p>The command has the following syntax:</p> <pre><code>$ pbm describe-backup [&lt;backup-name&gt;] [&lt;flags&gt;] \n</code></pre> Flag Description <code>-o</code>, <code>--out=text</code> Shows the status as either plain text or a JSON object. Supported values: <code>text</code>, <code>json</code> <code>-l</code>, <code>--list-files</code> Shows the list of files being copied for snapshot-based backups <code>--with-collections</code> Shows the collections included in the backup. For logical and selective backups only. Available with version 2.3.0. JSON output <pre><code>{\n  \"name\": \"&lt;backup_name&gt;\",\n  \"opid\": \"&lt;string&gt;\",\n  \"type\": \"logical\",\n  \"last_write_ts\": Timestamp,\n  \"last_transition_ts\": Timestamp,\n  \"last_write_time\": \"2022-09-30T14:02:49Z\",\n  \"last_transition_time\": \"2022-09-30T14:02:54Z\",\n  \"namespaces\": [\n    \"flight.booking\"\n  ],\n  \"mongodb_version\": \"&lt;version&gt;\",\n  \"pbm_version\": \"&lt;version&gt;\",\n  \"status\": \"done\",\n  \"size\": 470805945,\n  \"size_h\": \"449.0 MiB\",\n  \"replsets\": [\n    {\n      \"name\": \"&lt;name&gt;\",\n      \"status\": \"done\",\n      \"last_write_ts\": Timestamp,\n      \"last_transition_ts\": Timestamp,\n      \"last_write_time\": \"2022-09-30T14:02:49Z\",\n      \"last_transition_time\": \"2022-09-30T14:02:53Z\"\n    }\n  ]\n}\n</code></pre>"},{"location":"reference/pbm-commands.html#pbm-describe-restore","title":"pbm describe-restore","text":"<p>Shows the detailed information about the restore.</p> <p>The command has the following syntax:</p> <pre><code>$ pbm describe-restore [&lt;restore-timestamp&gt;] [&lt;flags&gt;] \n</code></pre> <p>The command accepts the following flags:</p> Flag Description <code>-c</code>, <code>--config=CONFIG</code> Only for physical restores. Points Percona Backup for MongoDB to a configuration file so it can read the restore status from the remote storage. For example, <code>pbm describe-restore -c /etc/pbm/conf.yaml &lt;restore-name&gt;</code>. <code>-o</code>, <code>--out=TEXT</code> Shows the output as either the plain text (default) or a JSON object. Supported values: <code>text</code>, <code>json</code>. Selective restore status <pre><code>{\n \"name\": \"&lt;restore_name&gt;\",\n \"opid\": \"string\",\n \"backup\": \"&lt;backup_name&gt;\",\n \"type\": \"logical\",\n \"status\": \"done\",\n \"ts_to_restore\": Timestamp,\n \"time_to_restore\": \"Time\",\n \"namespaces\": [\n    \"&lt;database.*&gt;\"\n ]\n \"replsets\": [\n   {\n     \"name\": \"rs1\",\n     \"status\": \"done\",\n     \"last_transition_ts\": Timestamp,\n     \"last_transition_time\": \"Time\"\n   },\n   {\n    \"name\": \"rs0\",\n     \"last_transition_ts\": Timestamp,\n     \"last_transition_time\": \"Time\"\n   },\n   {\n     \"name\": \"cfg\",\n     \"status\": \"done\",\n     \"last_transition_ts\": Timestamp,\n     \"last_transition_time\": \"Time\"\n   }\n ],\n}\n</code></pre> Physical restore status <pre><code>{\n \"name\": \"&lt;restore_name&gt;\",\n \"opid\": \"string\",\n \"backup\": \"&lt;backup_name&gt;\",\n \"type\": \"physical\",\n \"status\": \"done\",\n \"last_transition_ts\": Timestamp,\n \"last_transition_time\": \"Time\",\n \"replsets\": [\n   {\n     \"name\": \"rs1\",\n     \"status\": \"done\",\n     \"last_transition_ts\": Timestamp,\n     \"last_transition_time\": \"Timestamp\",\n     \"nodes\": [\n       {\n         \"name\": \"IP:port\",\n         \"status\": \"done\",\n         \"last_transition_ts\": Timestamp,\n         \"last_transition_time\": \"Timestamp\"\n       }\n     ]\n   }\n ],\n}\n</code></pre>"},{"location":"reference/pbm-commands.html#pbm-help","title":"pbm help","text":"<p>Returns the help information about <code>pbm</code> commands.</p>"},{"location":"reference/pbm-commands.html#pbm-list","title":"pbm list","text":"<p>Provides the list of backups. In versions 1.3.4 and earlier, the command lists all backups and their states. Backup states are the following:</p> <ul> <li>In progress - A backup is running</li> <li>Canceled - A backup was canceled</li> <li>Error - A backup was finished with an error</li> <li>No status means a backup is complete</li> </ul> <p>As of version 1.4.0, only successfully completed backups are listed. To view currently information about a running or a failed backup, run <code>pbm status</code>.</p> <p>When Point-in-Time Recovery is enabled, the <code>pbm list</code> also provides the list of valid time ranges for recovery and point-in-time recovery status.</p> <p>The command has the following syntax:</p> <pre><code>$ pbm list [&lt;flags&gt;]\n</code></pre> <p>The command accepts the following flags:</p> Flag Description <code>--restore</code> Shows last N restores. Starting with version 2.0, the output shows restore names instead of backup names, as multiple restores can be done from a single backup. <code>--size=0</code> Shows last N backups.  It also provides the information whether the restore is a selective one. <code>-o</code>, <code>--out=text</code> Shows the output format as either plain text or a JSON object. Supported values: <code>text</code>, <code>json</code> <code>--unbacked</code> Shows Point-in-Time Recovery oplog slices that were saved without the base backup snapshot. Available starting with version 1.8.0. <code>--replset-remapping</code> Maps the replica set names for the data restore / oplog replay. The value format is <code>to_name_1=from_name_1,to_name_2=from_name_2</code> List of backups <pre><code>{\n  \"snapshots\": [\n    {\n      \"name\": \"&lt;backup_name&gt;\",\n      \"status\": \"done\",\n      \"completeTS\": Timestamp,\n      \"pbmVersion\": \"1.6.0\"\n    }\n  ],\n  \"pitr\": {\n    \"on\": false,\n    \"ranges\": [\n      {\n        \"range\": {\n          \"start\": Timestamp,\n          \"end\": Timestamp\n        }\n      },\n      {\n        \"range\": {\n          \"start\": Timestamp,\n          \"end\": Timestamp\n        },\n      {\n        \"range\": {\n          \"start\": Timestamp,\n          \"end\": Timestamp (no base snapshot)\n        }\n      }\n    ]\n  }\n}\n</code></pre> Restore history <p>Full restore </p> <pre><code> {\n    \"start\": Timestamp,\n    \"status\": \"done\",\n    \"type\": \"snapshot\",\n    \"snapshot\": \"&lt;backup_name&gt;\",\n    \"name\": \"&lt;restore_name&gt;\"\n  }\n</code></pre> <p>Selective restore</p> <pre><code>  {\n    \"start\": Timestamp,\n    \"status\": \"done\",\n    \"type\": \"snapshot\",\n    \"snapshot\": \"&lt;backup_name&gt;\",\n    \"name\": \"&lt;restore_name&gt;\",\n    \"namespaces\": [\n      \"&lt;database.collection&gt;\"\n    ]\n  }\n</code></pre> <p>Point-in-time restore</p> <pre><code>  {\n    \"start\": Timestamp,\n    \"status\": \"done\",\n    \"type\": \"pitr\",\n    \"snapshot\": \"&lt;backup_name&gt;\",\n    \"point-in-time\": Timestamp,\n    \"name\": \"&lt;restore_name&gt;\"\n  }\n</code></pre> <p>Selective point-in-time restore</p> <pre><code>{\n    \"start\": Timestamp,\n    \"status\": \"done\",\n    \"type\": \"pitr\",\n    \"snapshot\": \"&lt;backup_name&gt;\",\n    \"point-in-time\": Timestamp,\n    \"name\": \"&lt;restore_name&gt;\",\n    \"namespaces\": [\n      \"&lt;database.collection&gt;\"\n    ]\n  }\n]\n</code></pre>"},{"location":"reference/pbm-commands.html#pbm-logs","title":"pbm logs","text":"<p>Shows log information from all <code>pbm-agent</code> processes.</p> <p>The command has the following syntax:</p> <pre><code>$ pbm logs [&lt;flags&gt;]\n</code></pre> <p>The command accepts the following flags:</p> Flag Description <code>-t</code>, <code>--tail=20</code> Shows last N entries. By default, the output shows last 20 entries.  <code>0</code> means to show all log messages. <code>-e</code>, <code>--event=EVENT</code> Shows logs filtered by a specified event. Supported events: - backup - restore  - resyncBcpList  - pitr  - pitrestore  - delete  <code>-o</code>, <code>--out=text</code> Shows log information as text (default) or in JSON format.  Supported values: <code>text</code>, <code>json</code> <code>-n</code>, <code>--node=NODE</code> Shows logs for a specified node or a replica set. Specify the node in the format <code>replset[/host:port]</code> <code>-f</code>, <code>--follow</code> Follow log output. Allow to view the logs dynamically <code>-s</code>, <code>--severity=I</code> Shows logs filtered by severity level. Supported levels are (from low to high): D - Debug, I - Info (default), W - Warning, E - Error, F - Fatal. The output includes both the specified severity level and all higher ones <code>--timezone</code>=TIMEZONE Timezone of the log output. Supported values: <code>UTC</code> (default), <code>local</code> or the timezone in the IANA timezone format (e.g. <code>America/New_York</code>) <code>-i</code>, <code>--opid=OPID</code> Show logs for an operation in progress. The operation is identified by the OpID <code>-x</code>, <code>--extra</code> Show extra data in the text format <p>Find the usage examples in Viewing backup logs.</p> Logs output <pre><code>[\n  {\n    \"t\": \"\",\n    \"s\": 3,\n    \"rs\": \"rs0\",\n    \"node\": \"example.mongodb.com:27017\",\n    \"e\": \"\",\n    \"eobj\": \"\",\n    \"ep\": {\n      \"T\": 0,\n      \"I\": 0\n    },\n    \"msg\": \"listening for the commands\"\n  },\n  ....\n]\n</code></pre>"},{"location":"reference/pbm-commands.html#pbm-oplog-replay","title":"pbm oplog-replay","text":"<p>Allows to replay the oplog on top of any backup: logical, physical, storage level snapshot (like EBS-snapshot) and restore it to a specific point in time.</p> <p>To learn more about the usage, refer to Point-in-Time Recovery oplog replay.</p> <p>The command has the following syntax:</p> <pre><code>$ pbm oplog-replay [&lt;flags&gt;]\n</code></pre> <p>The command accepts the following flags:</p> Flag Description <code>start=timestamp</code> The start time for the oplog replay. <code>end=timestamp</code> The end time for the oplog replay. <code>--replset-remapping</code> Maps the replica set names for the oplog replay. The value format is <code>to_name_1=from_name_1,to_name_2=from_name_2</code>."},{"location":"reference/pbm-commands.html#pbm-restore","title":"pbm restore","text":"<p>Restores database from a specified backup / to a specified point in time. Depending on the backup type, makes either logical, physical, or a snapshot-based restore.</p> <p>The command has the following syntax:</p> <pre><code>$ pbm restore [&lt;flags&gt;] [&lt;backup_name&gt;]\n</code></pre> <p>For more information about using <code>pbm restore</code>, see Restoring a backup.</p> <p>The command accepts the following flags:</p> Flag Description <code>--external</code> Indicates the backup as the one made outside PBM (for example, snapshot-based) <code>--time=TIME</code> Restores the database to the specified point in time. Available for logical restores and if Point-in-time recovery is enabled. <code>-w</code> Wait for the restore to finish. The flag blocks the shell session. <code>-o</code>, <code>--out=text</code> Shows the output format as either plain text or a JSON object. Supported values: <code>text</code>, <code>json</code> <code>--base-snapshot</code> Restores the database from a specified backup to the specified point in time. Without this flag, the most recent backup preceding the timestamp is used for point in recovery. Available in Percona Backup for MongoDB starting from version 1.6.0. In version 2.3.0, this flag is optional for point-in-time recovery from physical backups.  In version 2.2.0, this flag is mandatory for making a point-in-time recovery from physical backups. Without it, PBM looks for a logical backup to restore from. <code>--replset-remapping</code> Maps the replica set names for the data restore / oplog replay. The value format is <code>to_name_1=from_name_1,to_name_2=from_name_2</code> <code>--ns=\"database.collection\"</code> Restores the specified namespace(s) - databases and collections. To restore all collections in the database, specify the values as <code>--ns=\"database.*\"</code>. The <code>--ns</code> flag accepts several namespaces as the comma-separated list. For example, ns=\u201ddb1.*,db2.coll2,db3.coll1,db3.collX\u201d <code>-c</code>, <code>--config</code> The path to the <code>mongod.conf</code> file Restore output <pre><code>{\n   \"name\": \"&lt;restore_name&gt;\"\n   \"snapshot\": \"&lt;backup_name&gt;\"\n}\n</code></pre> Point-in-time restore <pre><code>{\n  \"name\":\"&lt;restore_name&gt;\",\n  \"point-in-time\":\"&lt;backup_name&gt;\"\n}\n</code></pre>"},{"location":"reference/pbm-commands.html#pbm-restore-finish","title":"pbm restore-finish","text":"<p>Instructs PBM to complete the snapshot-based physical restore. Must be run after running <code>pbm restore --external</code>. To learn more, refer to API for snapshot-based physical backups.</p> <p>The command has the following syntax:</p> <pre><code>$ pbm restore-finish &lt;restore_name&gt; [flags]\n</code></pre> <p>The command accepts the following flags:</p> Flag Description <code>-c</code> The path to the PBM configuration file. Required to complete the restore."},{"location":"reference/pbm-commands.html#pbm-status","title":"pbm status","text":"<p>Shows the status of Percona Backup for MongoDB. The output provides the following information:</p> <ul> <li><code>pbm-agent</code> processes version and state</li> <li>Currently running backups or restores</li> <li>Backups stored in the remote storage</li> <li>Point-in-Time Recovery status</li> <li>Valid time ranges for point-in-time recovery and the data size</li> </ul> <p>The command accepts the following flags:</p> Flag Description <code>-o</code>, <code>--out=text</code> Shows the status as either plain text or a JSON object. Supported values: <code>text</code>, <code>json</code> <code>-s</code>, <code>--sections=SECTIONS</code> Shows the status for the specified section. You can pass several flags to view the status for multiple sections. Supported values: cluster, pitr, running, backups. <code>--replset-remapping</code> Maps the replica set names for the data restore / oplog replay. The value format is <code>to_name_1=from_name_1,to_name_2=from_name_2</code> Status information <pre><code>{\n  \"backups\": {\n    \"type\": \"FS\",\n    \"path\": \"&lt;my-backup-dir&gt;\",\n    \"snapshot\": [\n       ...\n      {\n        \"name\": \"&lt;backup_name&gt;\",\n        \"size\": 3143396168,\n        \"status\": \"done\",\n        \"completeTS\": Timestamp,\n        \"pbmVersion\": \"1.6.0\"\n      },\n    ],\n    \"pitrChunks\": {\n      \"pitrChunks\": [\n         ...\n        {\n          \"range\": {\n            \"start\": Timestamp,\n            \"end\": Timestamp\n          }\n        },\n        {\n          \"range\": {\n            \"start\": Timestamp,\n            \"end\": Timestamp (no base snapshot) !!! no backup found\n          }\n        },\n      ],\n      \"size\": 677901884\n    }\n  },\n  \"cluster\": [\n    {\n      \"rs\": \"&lt;replSet_name&gt;\",\n      \"nodes\": [\n        {\n          \"host\": \"&lt;replSet_name&gt;/example.mongodb:27017\",\n          \"agent\": \"&lt;version&gt;\",\n          \"ok\": true\n        }\n      ]\n    }\n  ],\n  \"pitr\": {\n    \"conf\": true,\n    \"run\": false,\n    \"error\": \"Timestamp.000+0000 E [&lt;replSet_name&gt;/example.mongodb:27017] [pitr] &lt;error_message&gt;\"\n  },\n  \"running\": {\n      \"type\": \"backup\",\n      \"name\": \"&lt;backup_name&gt;\",\n      \"startTS\": Timestamp,\n      \"status\": \"oplog backup\",\n      \"opID\": \"6113b631ea9ba5b815fee7c6\"\n    }\n}\n</code></pre>"},{"location":"reference/pbm-commands.html#pbm-version","title":"pbm version","text":"<p>Shows the version of Percona Backup for MongoDB.</p> <p>The command accepts the following flags:</p> Flag Description <code>--short</code> Shows only version info <code>--commit</code> Shows only git commit info <code>-o</code>, <code>--out=text</code> Shows the output as either plain text or a JSON object. Supported values: <code>text</code>, <code>json</code> Version information <pre><code>{\n  \"Version\": \"1.6.0\",\n  \"Platform\": \"linux/amd64\",\n  \"GitCommit\": \"f9b9948bb8201ba1a6400f6558496934a0685efd\",\n  \"GitBranch\": \"main\",\n  \"BuildTime\": \"2021-07-28_15:24_UTC\",\n  \"GoVersion\": \"go1.16.6\"\n}\n</code></pre> <p></p>"},{"location":"reference/pbm-commands.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"reference/pitr-options.html","title":"Point-in-time recovery options","text":"<pre><code>pitr:\n  enabled: &lt;boolean&gt;\n  oplogSpanMin: &lt;float64&gt;\n  compression: &lt;string&gt;\n  compressionLevel: &lt;int&gt;\n</code></pre>"},{"location":"reference/pitr-options.html#pitrenabled","title":"pitr.enabled","text":"<p>Type: boolean  Default: False</p> <p>Enables point-in-time recovery</p>"},{"location":"reference/pitr-options.html#pitroplogspanmin","title":"pitr.oplogSpanMin","text":"<p>Type: float64  Default: 10</p> <p>The duration of an oplog span in minutes. If set when the <code>pbm-agent</code> is making an oplog slice, the slice\u2019s span is updated right away.</p> <p>If the new duration is smaller than the previous one, the <code>pbm-agent</code> is triggered to save a new slice with the updated span. If the duration is larger, then the next slice is saved with the updated span in scheduled time.</p>"},{"location":"reference/pitr-options.html#pitrcompression","title":"pitr.compression","text":"<p>Type: string  Default: s2</p> <p>The compression method for Point-in-Time Recovery oplog slices. Available in Percona Backup for MongoDB as of version 1.7.0.</p> <p>Supported values: <code>gzip</code>, <code>snappy</code>, <code>lz4</code>, <code>s2</code>, <code>pgzip</code>, <code>zstd</code>. Default: <code>s2</code>.</p>"},{"location":"reference/pitr-options.html#pitrcompressionlevel","title":"pitr.compressionLevel","text":"<p>Type: int</p> <p>The compression level is from <code>0</code> till <code>10</code>. The default value depends on the compression method used.</p> <p>The following table shows available compression levels per compression method:</p> Compression method Compression levels Default <code>zstd</code> 1 - fastest speed, 2 - default, 3 - better compression, 4 - best compression 2 <code>snappy</code> no levels <code>lz4</code> From 1 (fastest) to 16 1 <code>gzip</code> and <code>pgzip</code> -1 - default compression, 0 - no compression, 1 - best speed, 9 - best compression -1 <p>Note that the greater value you specify, the more time and computing resources it will take to compress the data.</p>"},{"location":"reference/pitr-options.html#pitroplogonly","title":"pitr.oplogOnly","text":"<p>Type: boolean  Default: False  Required: NO</p> <p>Controls whether the base backup is required to start Point-in-Time recovery oplog slicing. When set to true, Percona Backup for MongoDB saves oplog chunks without the base backup snapshot.</p> <p>Available in Percona Backup for MongoDB starting with version 1.8.0. To learn more about the usage, see Point-in-Time Recovery oplog replay.</p> <p></p>"},{"location":"reference/pitr-options.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"reference/restore-options.html","title":"Restore options","text":"<pre><code>restore:\n  batchSize: &lt;int&gt;\n  numInsertionWorkers: &lt;int&gt;\n  numDownloadWorkers: &lt;int&gt;\n  maxDownloadBufferMb: &lt;int&gt;\n  downloadChunkMb: &lt;int&gt;\n  mongodLocation: &lt;string&gt;\n  mongodLocationMap:\n     \"node01:2017\": &lt;string&gt;\n     \"node03:27017\": &lt;string&gt;\n</code></pre>"},{"location":"reference/restore-options.html#batchsize","title":"batchSize","text":"<p>Type: int  Default: 500</p> <p>The number of documents to buffer.</p>"},{"location":"reference/restore-options.html#numinsertionworkers","title":"numInsertionWorkers","text":"<p>Type: int  Default: 10</p> <p>The number of workers that add the documents to buffer.</p>"},{"location":"reference/restore-options.html#numdownloadworkers","title":"numDownloadWorkers","text":"<p>Type: int  Default: number of CPU cores</p> <p>The number of workers that request data chunks from the storage during the restore. The default value equals to the number of CPU cores.</p>"},{"location":"reference/restore-options.html#maxdownloadbuffermb","title":"maxDownloadBufferMb","text":"<p>Type: int </p> <p>The maximum size of the in-memory buffer that is used to download files from the S3 storage. When unspecified or set to 0, the size cannot exceed the value calculated as <code>numDownloadWorkers * downloadChunkMb * 16</code> MB. By default, the number of CPU cores * 32 * 16 MB.</p>"},{"location":"reference/restore-options.html#downloadchunkmb","title":"downloadChunkMb","text":"<p>Type: int  Default: 32</p> <p>The size of the data chunk in MB to download from the S3 storage.</p>"},{"location":"reference/restore-options.html#mongodlocation","title":"mongodLocation","text":"<p>Type: string</p> <p>The custom path to <code>mongod</code> binaries. When undefined, Percona Backup for MongoDB uses the default path to make database restarts during physical restore.</p>"},{"location":"reference/restore-options.html#mongodlocationmap","title":"mongodLocationMap","text":"<p>Type: array of strings</p> <p>The list of custom paths to <code>mongod</code> binaries on every node. Percona Backup for MongoDB uses the values to make restarts of the database during physical restore. </p> <p></p>"},{"location":"reference/restore-options.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/0.5.0.html","title":"Percona Backup for MongoDB 0.5.0","text":"<p>Percona is pleased to announce the early release of Percona Backup for MongoDB 0.5.0 of our latest software product on June 17, 2019. The GA version of Percona Backup for MongoDB is scheduled to be released later in 2019.</p> <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time. Percona Backup for MongoDB uses a distributed client/server architecture to perform backup/restore actions.</p> <p>The project was inspired by (and intends to replace) the Percona-Lab/mongodb_consistent_backup tool.</p> <p>Percona Backup for MongoDB supports Percona Server for MongoDB or MongoDB Community Server version 3.6 or higher with MongoDB replication enabled. Binaries for the supported platforms as well as the tarball with source code are available from the Percona Backup for MongoDB download page. For more information about Percona Backup for MongoDB and the installation steps, see the documentation.</p> <p>Percona Backup for MongoDB 0.5.0 features the following:</p> <ul> <li> <p>Enables storing backup metadata on Amazon Simple Storage Service storages.</p> </li> <li> <p>The API of Percona Backup for MongoDB introduces HTTP basic authentication to prevent an unauthorized user from running backups or restoring data if they manage to access the API port.</p> </li> <li> <p>To optimize the usage of network resources, the pbm-agent on <code>mongos</code> is not needed any more and backup-coordinator automatically establishes connection to the appropriate <code>mongos</code> instance.</p> </li> <li> <p>The output of <code>pbmctl list nodes</code> now includes the replica set name and informs the backup status of the node.</p> </li> </ul> <p>Percona doesn\u2019t recommend this release for production as its API and configuration fields are still likely to change. It only features a basic API level security. Please report any bugs you encounter in our bug tracking system.</p>"},{"location":"release-notes/0.5.0.html#new-features-and-improvements","title":"New Features and Improvements","text":"<ul> <li> <p>93: Support storage of backup metadata on AWS S3.</p> </li> <li> <p>99: pbm-agent is deprecated on <code>mongos</code>.</p> </li> <li> <p>105: Log a warning if a Primary node-type is used for a backup</p> </li> <li> <p>122: Include the replica set name to the output of <code>pmbctl list nodes</code></p> </li> <li> <p>130: Add HTTP Basic Authentication to gRPC servers (API and RPC)</p> </li> <li> <p>139: Support listing backup status in the output of <code>pmbctl list nodes</code></p> </li> <li> <p>170: Enable setting the \u2018stopOnError\u2019 attribute in <code>mongorestore</code> to ensure consistency of the data being restored.</p> </li> </ul> <p></p>"},{"location":"release-notes/0.5.0.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.0.0.html","title":"Percona Backup for MongoDB 1.0.0","text":"<p>Percona is happy to announce the GA release of our latest software product Percona Backup for MongoDB 1.8 on September 19, 2019.</p> <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time. The project was inspired by (and intends to replace) the Percona-Lab/mongodb_consistent_backup tool.</p> <p>Percona Backup for MongoDB supports Percona Server for MongoDB or MongoDB Community Server version 3.6 or higher with MongoDB replication enabled. Binaries for the supported platforms as well as the tarball with source code are available from the Percona Backup for MongoDB download page. For more information about Percona Backup for MongoDB and the installation steps, see the documentation.</p> <p>Percona Backup for MongoDB 1.0.0 features the following:</p> <ul> <li> <p>The architecture and the authentication of Percona Backup for MongoDB have been simplified compared to the previous release.</p> </li> <li> <p>Stores backup data on Amazon Simple Storage Service or compatible storages, such as MinIO.</p> </li> <li> <p>The output of pbm list shows all backups created from the connected MongoDB sharded cluster or replica set.</p> </li> </ul> <p></p>"},{"location":"release-notes/1.0.0.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.1.0.html","title":"Percona Backup for MongoDB 1.1.0","text":"<p>Percona is happy to announce the release of Percona Backup for MongoDB 1.1.0 on January 16, 2020.</p> <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time. The project was inspired by (and intends to replace) the Percona-Lab/mongodb_consistent_backup tool.</p> <p>Percona Backup for MongoDB supports Percona Server for MongoDB or MongoDB Community Server version 3.6 or higher with MongoDB replication enabled. Binaries for the supported platforms as well as the tarball with source code are available from the Percona Backup for MongoDB download page. For more information about Percona Backup for MongoDB and the installation steps, see the documentation.</p> <p>Percona Backup for MongoDB 1.1.0 introduces the new <code>pbm config</code> command to enable configuring the store from the command line in addition to the configuration file. This command effectively replaces pbm store which was only able to read store configuration from the configuration file.</p> <pre><code>$ pbm config --set storage.s3.bucket=\"operator-testing\"\n</code></pre>"},{"location":"release-notes/1.1.0.html#new-features","title":"New Features","text":"<ul> <li>PBM-344: New pbm config command to support configuring the store from the command line.</li> </ul>"},{"location":"release-notes/1.1.0.html#improvements","title":"Improvements","text":"<ul> <li>PBM-361: Improved the processing of timestamps when using oplog.</li> </ul>"},{"location":"release-notes/1.1.0.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PBM-214: <code>pbm-agent</code> could crash with restore command running forever, if the primary node became unavailable during the restore operation.</p> </li> <li> <p>PBM-279: <code>pbm-agent</code> could be started with an invalid config file.</p> </li> <li> <p>PBM-338: Backups that failed could appear in the output of the pbm list command.</p> </li> <li> <p>PBM-362: The <code>pbm backup</code> could fail when called from the primary node if there were no healthy secondaries.</p> </li> <li> <p>PBM-369: ReplicaSets could not establish connections when TLS was used in the cluster.</p> </li> </ul> <p></p>"},{"location":"release-notes/1.1.0.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.1.1.html","title":"Percona Backup for MongoDB 1.1.1","text":"Release date January 31, 2020 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time. The project was inspired by (and intends to replace) the Percona-Lab/mongodb_consistent_backup tool.</p> <p>Percona Backup for MongoDB supports Percona Server for MongoDB or MongoDB Community Server version 3.6 or higher with MongoDB replication enabled. Binaries for the supported platforms as well as the tarball with source code are available from the Percona Backup for MongoDB download page. For more information about Percona Backup for MongoDB and the installation steps, see the documentation.</p>"},{"location":"release-notes/1.1.1.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PBM-407: Very large collections experienced timeout due to full-collection scan for a preliminary count</p> </li> <li> <p>PBM-414: The upload on Google cloud storage was broken with \u201cInvalidArgument: Invalid argument. status code: 400\u201d</p> </li> <li> <p>PBM-409: Restore failed with \u201cincompatible auth version with target server\u201d</p> </li> </ul> <p></p>"},{"location":"release-notes/1.1.1.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.1.3.html","title":"Percona Backup for MongoDB 1.1.3","text":"Release date April 14, 2020 Installation Installing Percona Backup for MongoDB"},{"location":"release-notes/1.1.3.html#improvements","title":"Improvements","text":"<ul> <li> <p>PBM-424: Remove the <code>--mongodb-uri</code> arg from <code>pbm-agent.service</code> unit file</p> </li> <li> <p>PBM-419: Resolve restore-blocking issues related to admin.system.version</p> </li> <li> <p>PBM-417: Improve pbm control collection etc. metadata for restores</p> </li> </ul>"},{"location":"release-notes/1.1.3.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PBM-425: pbm-agent could fail when restoring</p> </li> <li> <p>PBM-430: S3 store resync didn\u2019t work if the store had a prefix</p> </li> <li> <p>PBM-438: <code>pbm list --size=5</code> worked in reverse</p> </li> </ul> <p></p>"},{"location":"release-notes/1.1.3.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.2.0.html","title":"Percona Backup for MongoDB 1.2.0","text":"Release date May 13, 2020 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set).</p>"},{"location":"release-notes/1.2.0.html#new-features","title":"New Features","text":"<ul> <li> <p>PBM-348: Add ability to delete old backups</p> </li> <li> <p>PBM-447: pbm-speed-test: Add a tool to field-test compression and upload speeds</p> </li> </ul>"},{"location":"release-notes/1.2.0.html#improvements","title":"Improvements","text":"<ul> <li> <p>PBM-431: Raise dump output speed through compression tuning, parallelization</p> </li> <li> <p>PBM-461: s2 is set as the default compression mechanism</p> </li> <li> <p>PBM-429: Periodic backup progress messages added to pbm-agent logs</p> </li> <li> <p>PBM-140: Added ability to cancel a backup</p> </li> </ul>"},{"location":"release-notes/1.2.0.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PBM-451: Resync didn\u2019t work if storage type was set to filesystem</li> </ul>"},{"location":"release-notes/1.2.0.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.2.1.html","title":"Percona Backup for MongoDB 1.2.1","text":"Release date July 27, 2020 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set).</p>"},{"location":"release-notes/1.2.1.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PBM-509: Include \u201cpbm-speed-test\u201d binary for debian packages</li> </ul>"},{"location":"release-notes/1.2.1.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.3.0.html","title":"Percona Backup for MongoDB 1.3.0","text":"Release date August 26, 2020 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/1.3.0.html#new-features","title":"New Features","text":"<ul> <li> <p>PBM-455: Add oplog archiver thread for PITR</p> </li> <li> <p>PBM-491: Modify \u201cpbm restore\u201d to accept arbitrary point in time when PITR oplog archives available</p> </li> </ul>"},{"location":"release-notes/1.3.0.html#improvements","title":"Improvements","text":"<ul> <li>PBM-526: Add pbm version information to the backup metadata</li> </ul>"},{"location":"release-notes/1.3.0.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.3.1.html","title":"Percona Backup for MongoDB 1.3.1","text":"Release date September 3, 2020 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/1.3.1.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PBM-542: Fix backup folder permissions on filesystem storage for Point-in-Time recovery</li> </ul>"},{"location":"release-notes/1.3.1.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.3.2.html","title":"Percona Backup for MongoDB 1.3.2","text":"Release date October 14, 2020 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/1.3.2.html#new-features","title":"New Features","text":"<ul> <li>PBM-426: Add AWS KMS key encryption/decryption for S3 buckets</li> </ul> <p>Config format</p> <pre><code>storage:\n  s3:\n    serverSideEncryption:\n      sseAlgorithm: \"aws:kms\"\n      kmsKeyID: \"........\"\n</code></pre> <p>(Thanks to user pedroalb for reporting this issue)</p>"},{"location":"release-notes/1.3.2.html#improvements","title":"Improvements","text":"<ul> <li> <p>PBM-568: Print uploadPartSize value to log during backup</p> </li> <li> <p>PBM-560: Use s2 compression as default for <code>pbm-speed-test</code> instead of gzip</p> </li> </ul>"},{"location":"release-notes/1.3.2.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PBM-485: Fix backups to S3 failing with <code>MaxUploadParts</code> limit by auto-adjusting <code>uploadPartSize</code> value (Thanks to user pedroalb for reporting this issue)</p> </li> <li> <p>PBM-559: pbm-agent runs out of memory while doing restore of large backup (Thanks to user Simon Bernier St-Pierre for reporting this issue)</p> </li> <li> <p>PBM-562: Correct calculation of available PITR time ranges by pbm list</p> </li> <li> <p>PBM-561: Fix setting of numeric options in config</p> </li> <li> <p>PBM-547: Allow deleting backups from local filesystem by moving delete operations to pbm-agents</p> </li> </ul> <p></p>"},{"location":"release-notes/1.3.2.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.3.3.html","title":"Percona Backup for MongoDB 1.3.3","text":"Release date November 4, 2020 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/1.3.3.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PBM-575: <code>mongodump</code> connects to the primary node</li> </ul>"},{"location":"release-notes/1.3.3.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.3.4.html","title":"Percona Backup for MongoDB 1.3.4","text":"Release date November 19, 2020 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/1.3.4.html#improvements","title":"Improvements","text":"<ul> <li> <p>PBM-586: Add a request timeout to the S3 downloader during the restore</p> </li> <li> <p>PBM-584: Ignore shard configuration during the restore</p> </li> </ul>"},{"location":"release-notes/1.3.4.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PBM-555: Fix the \u201d error demultiplexing archive\u201d error during restore by downloading backup from s3 storage in chunks</p> </li> <li> <p>PBM-460: Restore fails with conflicting namespace destinations (Thanks to user pedroalb for reporting this issue)</p> </li> </ul> <p></p>"},{"location":"release-notes/1.3.4.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.4.0.html","title":"Percona Backup for MongoDB 1.4.0","text":"Release date December 24, 2020 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/1.4.0.html#new-features","title":"New Features","text":"<ul> <li> <p>PBM-345: Centralize logs</p> </li> <li> <p>PBM-435: <code>pbm status</code> command</p> </li> </ul>"},{"location":"release-notes/1.4.0.html#improvements","title":"Improvements","text":"<ul> <li> <p>PBM-572: Change backup \u2018name\u2019 in \u2018pbm list\u2019 etc to be consistent time (~= end time) rather than start time</p> </li> <li> <p>PBM-556: Introduce operation ID</p> </li> </ul>"},{"location":"release-notes/1.4.0.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PBM-595: Shard backup with different rset name</p> </li> <li> <p>PBM-604: Compression flag for \u2018pbm list\u2019 command doesn\u2019t change the output</p> </li> <li> <p>PBM-602: Empty PITR files are created on storage if PBM fails to upload oplog chunk due to insufficient range</p> </li> <li> <p>PBM-597: Properly handle mongo fail while PITR slicing is enabled</p> </li> </ul> <p></p>"},{"location":"release-notes/1.4.0.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.4.1.html","title":"Percona Backup for MongoDB 1.4.1","text":"Release date January 28, 2021 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/1.4.1.html#improvements","title":"Improvements","text":"<ul> <li> <p>PBM-621: Show incomplete backups in <code>pbm status</code> output</p> </li> <li> <p>PBM-619: Optimize response time from storage for <code>pbm status</code></p> </li> <li> <p>PBM-615: Check backup validity for current cluster</p> </li> <li> <p>PBM-608: Enable Kerberos authentication for PBM by adding support for GSSAPI</p> </li> <li> <p>PBM-478: Prevent restore from incomplete backup</p> </li> <li> <p>PBM-610: Fix response time from GCS for <code>pbm status</code> command</p> </li> </ul>"},{"location":"release-notes/1.4.1.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PBM-618: Check for the complete file set in backup snapshot before processing it</li> </ul>"},{"location":"release-notes/1.4.1.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.5.0.html","title":"Percona Backup for MongoDB 1.5.0","text":"Release date May 10, 2021 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/1.5.0.html#new-features","title":"New Features","text":"<ul> <li> <p>PBM-596: Azure Blob Storage support</p> </li> <li> <p>PBM-488: Create weight or tag method to influence with <code>pbm-agent</code> node will do backups</p> </li> </ul>"},{"location":"release-notes/1.5.0.html#improvements","title":"Improvements","text":"<ul> <li> <p>PBM-662: Show PITR Status based on <code>admin.pbmLock</code> instead of config settings</p> </li> <li> <p>PBM-494: Prefer a (healthy) hidden secondary to any other node in automatic selection</p> </li> </ul>"},{"location":"release-notes/1.5.0.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PBM-642: Display <code>priority=0</code> members on agent list in <code>pbm status</code> output</p> </li> <li> <p>PBM-636: Different collection UUID after restore (Thanks to Nikolay for reporting this issue and Dmitry Kuzmin for contributing)</p> </li> <li> <p>PBM-646: Stop the balancer during backup to make sure it doesn\u2019t start running during restore</p> </li> <li> <p>PBM-635: Wait for the leader\u2019s metadata before starting backups</p> </li> <li> <p>PBM-490: Use cluster time for the snapshot start time</p> </li> </ul> <p></p>"},{"location":"release-notes/1.5.0.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.6.0.html","title":"Percona Backup for MongoDB 1.6.0","text":"Release date August 16, 2021 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/1.6.0.html#release-highlights","title":"Release Highlights:","text":"<ul> <li> <p>Support for Percona Server for MongoDB and MongoDB Community 5.0</p> </li> <li> <p>Point-in-time recovery enhancements: ability to restore from any previous snapshot and configurable span of oplog events</p> </li> <li> <p>JSON output for PBM commands to simplify interfacing PBM with applications</p> </li> </ul>"},{"location":"release-notes/1.6.0.html#new-features","title":"New Features","text":"<ul> <li>PBM-617: Ability to restore from previous snapshots to point-in-time</li> </ul>"},{"location":"release-notes/1.6.0.html#improvements","title":"Improvements","text":"<ul> <li> <p>PBM-543: Configure the size of the span of oplog events for point-in-time recovery</p> </li> <li> <p>PBM-403: Mask user credentials in <code>ps</code> output of <code>pbm-agent</code></p> </li> <li> <p>PBM-700: Improve backup/pitr tasks synchronization and align oplogs creation</p> </li> <li> <p>PBM-697: Add support of MongoDB 5.0 TS collections</p> </li> <li> <p>PBM-686: Do not show the starting second of a PITR range which cannot be used for PITR restore</p> </li> <li> <p>PBM-652: Add a command to delete PITR chunks</p> </li> <li> <p>PBM-632: Add JSON output for all commands</p> </li> </ul>"},{"location":"release-notes/1.6.0.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PBM-694: Fix restoring from a backup when it contains VIEWS collection (Thanks to Danish Qamar for reporting this issue)</p> </li> <li> <p>PBM-647: Reduce frequency of S3 header GET requests during agent health checks (Thanks to Ryan Gunner for reporting this issue)</p> </li> <li> <p>PBM-708: Ignore config.system.indexBuilds collection</p> </li> <li> <p>PBM-705: Avoid writing the \u201cRead/Write on closed pipe\u201d error in logs on expected connection closure</p> </li> <li> <p>PBM-703: PITR restore fails due to error \u201cFailed to apply operation due to missing collection config.transactions\u201d</p> </li> <li> <p>PBM-701: Prevent restore to time which is not covered by PITR chunks</p> </li> <li> <p>PBM-683: Show PITR restore as failed if an error occurred during data retrieval from storage</p> </li> <li> <p>PBM-640: Remove <code>cancelBackup</code> and fix <code>pitrestore</code> filters for <code>pbm logs</code> command</p> </li> <li> <p>PBM-480: Make <code>path</code> attribute mandatory for backups on local storage</p> </li> </ul> <p></p>"},{"location":"release-notes/1.6.0.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.6.1.html","title":"Percona Backup for MongoDB 1.6.1 (2021-11-04)","text":"Release date November 4, 2021 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/1.6.1.html#release-highlights","title":"Release Highlights","text":"<ul> <li> <p>Deprecated support for MongoDB 3.6. Percona Backup for MongoDB remains compatible with MongoDB 3.6 and Percona Server for MongoDB 3.6; however, further enhancements and bug fixes are no longer tested against this version.</p> </li> <li> <p>Improved backup and PITR routines alignment by using sequential <code>delete-pitr</code>/<code>install-backup</code> operations instead of in-memory backup intent. This fixes the inability of a backup to start.</p> </li> <li> <p>Added support for automated access to S3 buckets using an EC2 instance profile. When Percona Backup for MongoDB is deployed using an EC2 instance, EC2 environment variables and metadata are used for S3 authentication, saving you from explicitly specifying S3 credentials in the Percona Backup for MongoDB configuration file. This comes handy for architectures deployed using the services like Amazon EC2, kiam, kube2iam or irsa.</p> </li> <li> <p>Extended logging for <code>pbm-agents</code>. This improves user experience with Percona Backup for MongoDB.</p> </li> </ul>"},{"location":"release-notes/1.6.1.html#improvements","title":"Improvements","text":"<ul> <li>PBM-740: Use AWS EC2 instance profile to simplify access to S3 buckets for PBM</li> </ul>"},{"location":"release-notes/1.6.1.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PBM-714: Fix backup and point-in-time recovery routines alignment algorithm to avoid backup failure</p> </li> <li> <p>PBM-722: Fix <code>pbm-agent</code>\u2019s crash  during the  <code>delete-pitr</code> request execution if there is nothing to delete (Thanks to Daniel Oliver for reporting this issue)</p> </li> <li> <p>PBM-735: Fix a possible failure of a PITR catchup process to copy backup slices</p> </li> <li> <p>PBM-712: Fix an empty time value in JSON formatted log records by using Unix timestamps for time output</p> </li> </ul> <p></p>"},{"location":"release-notes/1.6.1.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.7.0.html","title":"Percona Backup for MongoDB 1.7.0 (2022-04-18)","text":"Release date April 18, 2022 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/1.7.0.html#release-highlights","title":"Release highlights","text":"<ul> <li> <p>Support for physical backups in Percona Server for MongoDB starting from versions 4.2.15-16 and 4.4.6-8 and higher. Physical backups drastically speed up backup and restore performance for large databases (several terabytes). This is a technical preview feature .</p> </li> <li> <p>Oplog replay from the arbitrary start time. This reduces Recovery Point Objective (RPO) when database is recovered from physical or storage-level backups.</p> </li> <li> <p>Ability to configure compression method and level for Point-in-Time Recovery chunks and compression level for backups.</p> </li> <li> <p>Ability to configure the number of S3 multipart upload chunks to comply with various S3-compatible storage provider requirements.</p> </li> <li> <p>Ability to configure the number of upload retries. This facilitates data upload in case of unstable network connection.</p> </li> </ul>"},{"location":"release-notes/1.7.0.html#new-features","title":"New Features","text":"<ul> <li> <p>PBM-734: Add the config option to set debug log levels for S3  requests</p> </li> <li> <p>PBM-805: Implement physical backups to improve performance for large databases</p> </li> <li> <p>PBM-742: Add the ability to replay oplog from arbitrary start time. This reduces Recovery Point Objective (RPO) when database is recovered from physical backups.</p> </li> </ul>"},{"location":"release-notes/1.7.0.html#improvements","title":"Improvements","text":"<ul> <li> <p>PBM-680: Skip TLS verification for object storage. This can be useful for private object storage with self-signed certificates.</p> </li> <li> <p>PBM-770: Support configurable compression method / level for Point-in-Time Recovery chunks (Thanks to Damiano Albani for reporting this issue and contributing to it)</p> </li> <li> <p>PBM-764: Support Zstandard compression format (Thanks to Damiano Albani for reporting this issue and contributing to it)</p> </li> <li> <p>PBM-750: Make max number of S3 upload parts configurable (Thanks to Damiano Albani for reporting this issue and contributing to it)</p> </li> <li> <p>PBM-777: Expand / fix the configuration API to support compression method for Point-in-Time Recovery chunks (Thanks to Damiano Albani for reporting and contributing to this issue)</p> </li> <li> <p>PBM-756: Add the ability to configure logging levels for S3 requests to debug issues with object storage (Thanks to Damiano Albani for reporting this issue and contributing to it)</p> </li> <li> <p>PBM-577: It is now possible to choose an S3 storage class for granular control over various S3 tiers (Thanks to Damiano Albani for the contribution)</p> </li> </ul>"},{"location":"release-notes/1.7.0.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PBM-721: Fixed a bug where an upload of the backup to S3-storage was failing due to unstable network connection. Percona Backup for MongoDB can now be configured to retry the upload with flexible timeouts.</p> </li> <li> <p>PBM-773: Check distributed transactions on all participating shards to avoid commit timestamp inconsistency upon restore</p> </li> </ul> <p></p>"},{"location":"release-notes/1.7.0.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.8.0.html","title":"Percona Backup for MongoDB 1.8.0 (2022-06-09)","text":"Release date June 9, 2022 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/1.8.0.html#release-highlights","title":"Release Highlights","text":"<ul> <li> <p>Ability to restore data to a replica set with a different name and configuration. This extends the list of environments compatible for the restore.</p> </li> <li> <p>When you use EBS-snapshots or other tools for physical backups, you no longer have to create a mandatory base backup snapshot in |Percona Backup for MongoDB| as the starting point for Point-in-Time Recovery oplog slicing. This reduces time and effort on managing excessive backups and makes Point-in-Time Recovery from physical or storage-level backups more straightforward.</p> </li> <li> <p>The ability to wait for the backup operation to finish before doing further actions through the session lock. This simplifies the automation of operations with Percona Backup for MongoDB.</p> </li> <li> <p>Ability to define backup compression level and method in Percona Backup for MongoDB configuration.</p> </li> <li> <p>To simplify the Percona Backup for MongoDB configuration, the example configuration file is now included in the Percona Backup for MongoDB package.</p> </li> <li> <p>Ubuntu 22.04 (Jammy Jellyfish) is added to the list of supported platforms</p> </li> </ul>"},{"location":"release-notes/1.8.0.html#new-features","title":"New Features","text":"<ul> <li> <p>PBM-776: Allow data restore into the replica set with a different name</p> </li> <li> <p>PBM-866: Add the ability to wait for the backup operation to finish and print the result</p> </li> <li> <p>PBM-782: Allow saving Point-in-Time Recovery oplog  without base snapshot</p> </li> <li> <p>PBM-838: Add the ability to configure default compression method and level for backups</p> </li> </ul>"},{"location":"release-notes/1.8.0.html#improvements","title":"Improvements","text":"<ul> <li> <p>PBM-828: Add the full reference configuration file to packages</p> </li> <li> <p>PBM-751: Format timestamps according to RFC3339 (Thanks to Damiano Albani for reporting this issue)</p> </li> </ul>"},{"location":"release-notes/1.8.0.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PBM-820: Fix a bug where PBM crashed if backup cancelled right after it started by cancelling the backup gracefully</li> </ul>"},{"location":"release-notes/1.8.0.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/1.8.1.html","title":"Percona Backup for MongoDB 1.8.1 (2022-07-12)","text":"Release date July 12, 2022 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a non-sharded replica set), and for restoring those backups to a specific point in time. </p>"},{"location":"release-notes/1.8.1.html#release-highlights","title":"Release Highlights","text":"<ul> <li>PBM-871 - Fixed the restore failure on a different cluster. Now the UUID of users and system collections are not preserved when replaying the oplog. </li> <li>PBM-881 - The point-in-time recovery chunks display is now consistent in both <code>pbm status</code> and <code>pbm list</code> outputs. </li> </ul>"},{"location":"release-notes/1.8.1.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/2.0.0.html","title":"Percona Backup for MongoDB 2.0.0 (2022-09-21)","text":"Release date September 21, 2022 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a non-sharded replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/2.0.0.html#release-highlights","title":"Release Highlights","text":"<ul> <li>Physical backups and restores are now generally available. This enables you to use them in production environments.</li> <li>Data-at-rest encryption is supported for physical backups and restores. This enables you to comply to data security regulations and save time on operating with large data sets.</li> <li>By tracking physical restore progress, you have a clear picture of your restore operations and can timely react to any changes or issues.</li> <li>Logical backups and restores can now be done selectively. This is a tech preview feature <sup>1</sup> yet it enables you to work only with the desired subset of data and thereby save time on database maintenance and costs on storage. </li> </ul>"},{"location":"release-notes/2.0.0.html#new-features","title":"New Features","text":"<ul> <li>PBM-790: Add the ability to make selective backups and restores. This is the tech preview feature <sup>1</sup></li> </ul>"},{"location":"release-notes/2.0.0.html#improvements","title":"Improvements","text":"<ul> <li>PBM-896: Enable physical restores for data encrypted at rest</li> <li>PBM-898,PBM-811, PBM-812: Log temporary mongod process during physical restore</li> <li>PBM-911: Rename backup\u2019s complete time in <code>pbm status</code> and <code>pbm list</code> outputs</li> <li>PBM-813: Enable <code>pbm-agents</code> to send heartbeats via storage during physical restore</li> </ul>"},{"location":"release-notes/2.0.0.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PBM-909: Consider the storage settings during physical restore</li> <li>PBM-943: Fix the display of pbm status for filesystem storage</li> <li>PBM-929: Recreate UUID for timeseries collections during oplog apply</li> </ul> <ol> <li> <p>Tech Preview Features are not yet ready for enterprise use and are not included in support via SLA. They are included in this release so that users can provide feedback prior to the full release of the feature in a future GA release (or removal of the feature if it is deemed not useful). This functionality can change (APIs, CLIs, etc.) from tech preview to GA.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"release-notes/2.0.0.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/2.0.1.html","title":"Percona Backup for MongoDB 2.0.1 (2022-10-12)","text":"Release date October 12, 2022 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a non-sharded replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/2.0.1.html#release-highlights","title":"Release Highlights","text":"<ul> <li>The support of server-side encryption with customer-provided keys managed on the customer side (SSE-C) enables you to use the S3-compatible storage of your choice thus preventing the vendor lock-in and saving your costs on AWS KMS (Key Management Service).</li> <li>The ability to configure Percona Backup for MongoDB remotely simplifies its management when PBM is deployed in Docker, Kubernetes or other cloud services. </li> <li>The ability to configure the sidecar mode for Percona Backup for MongoDB improves its operation as part of Kubernetes Operator for MongoDB.</li> <li> <p>Troubleshooting enhancements:</p> <ul> <li>The ability to define a timezone for logs and to follow the logs dynamically.</li> <li>Indication of arbiter nodes as non-supported ones in <code>pbm status</code> output</li> </ul> </li> </ul>"},{"location":"release-notes/2.0.1.html#new-features","title":"New Features","text":"<ul> <li>PBM-733: Allow changing the timezone of logs in PBM</li> <li>PBM-877: Enable PBM to read the config file from stdin</li> </ul>"},{"location":"release-notes/2.0.1.html#improvements","title":"Improvements","text":"<ul> <li>PBM-949: Improve handling of arbiter nodes</li> <li>PBM-948: Align <code>pbm describe-backup</code> and <code>pbm describe-restore</code> outputs</li> <li>PBM-941: Add a sidecar mode for PBM to prevent the database crash when a <code>pbm-agent</code> is misconfigured in a container</li> <li>PBM-922: Add support for SSE-C for S3 providers (Thanks to Richard Bateman for reporting this issue and contributing to it)</li> <li>PBM-897: Add the ability to dynamically follow PBM logs</li> </ul>"},{"location":"release-notes/2.0.1.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PBM-978: Fixed the physical restore on replica sets having hidden nodes </li> <li>PBM-975: Fixed the issue with the display of point-in-time recovery chunks without base snapshot after storage resync</li> <li>PBM-966: Fixed the error handling of point-in-time recovery to non-existent timestamp by <code>pbm-agents</code></li> <li>PBM-858: Improve reporting of the error when an oplog chunk can\u2019t be created due to insufficient range</li> </ul>"},{"location":"release-notes/2.0.1.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/2.0.2.html","title":"Percona Backup for MongoDB 2.0.2 (2022-10-27)","text":"Release date October 27, 2022 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a non-sharded replica set), and for restoring those backups to a specific point in time.</p> <p>This release fixes the usability issues for applications operating with Percona Backup for MongoDB by providing the error messages for the status output in the JSON format (PBM-988). It also includes the fix for the security vulnerability issue CVE-2022-32149.</p>"},{"location":"release-notes/2.0.2.html#bugs-fixed","title":"Bugs Fixed","text":"<p>PBM-988: Show error message for JSON output of the <code>pbm status</code> command</p> <p></p>"},{"location":"release-notes/2.0.2.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/2.0.3.html","title":"Percona Backup for MongoDB 2.0.3 (2023-01-11)","text":"Release date January 11, 2023 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a non-sharded replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/2.0.3.html#release-highlights","title":"Release Highlights","text":"<ul> <li>Incremental physical backups enable you to reduce storage costs and facilitate data safety for business crucial data. By saving only the differences results in faster completion time and makes IB much smaller in size compared to full backups. As such, you save on storage space and data transfer in case of cloud setups. This is the technical preview feature, yet we welcome your feedback to improve the functionality.</li> <li>Now you can selectively back up and restore unsharded collections in sharded clusters. This extends the data set to work with.</li> <li>Added support of AWS IRSA (Identity Roles for Service Accounts) credentials allows Percona Backup for MongoDB running in a pod to access the AWS storage using the IAM roles. This increases the security of your cloud infrastructure and enables you to control the access to it from a single place.</li> <li>Percona Backup for MongoDB is now available on Red Hat Enterprise Linux 9 and compatible derivatives</li> </ul>"},{"location":"release-notes/2.0.3.html#new-features","title":"New Features","text":"<ul> <li>PBM-999 - Incremental physical backups support</li> <li>PBM-962 - Add support for selective backup / restore of unsharded collections in a sharded cluster</li> </ul>"},{"location":"release-notes/2.0.3.html#improvements","title":"Improvements","text":"<ul> <li>PBM-998, PBM-1002 - Ensure that PBM waits for the <code>mongod</code> to stop / start completely during physical restore</li> <li>PBM-1009 - Add AWS IRSA credentials support (Thanks to the user pastequo for contributing to this feature)</li> <li>PBM-1018 - Include the <code>pbm-agent-entrypoint</code> binary into the <code>percona-backup-mongodb</code> package and tarball</li> </ul>"},{"location":"release-notes/2.0.3.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PBM-932 - Fix the data access from <code>mongos</code> after selective restore on a new cluster</li> <li>PBM-981 - Prevent showing the ERROR status while backup is running</li> <li>PBM-1003 - Fix the ability to restore with remapping replica set names (Thanks to user Piotr Krogulec for reporting this issue and to user ziollek for contributing to it)</li> <li>PBM-1006 - Fix the <code>pbm-agent</code> crash during physical restore by initializing the logger for storage </li> <li>PBM-1008 - Fix the selective PITR restore for a collection created after the full backup</li> <li>PBM-1016 - Fix the error handling for <code>pbm describe-backup</code> command</li> </ul>"},{"location":"release-notes/2.0.3.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/2.0.4.html","title":"Percona Backup for MongoDB 2.0.4 (2023-02-21)","text":"Release date February 21, 2023 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a non-sharded replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/2.0.4.html#release-highlights","title":"Release Highlights","text":"<p>The ability to specify the custom path to <code>mongod</code> binaries simplifies the physical restore process.</p>"},{"location":"release-notes/2.0.4.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PBM-1042 - Fixed the physical restore flow with the ability to set the custom path to <code>mongod</code> binaries</li> <li>PBM-1047 - Fixed the issue with physical restore failure in a new environment.</li> </ul>"},{"location":"release-notes/2.0.4.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/2.0.5.html","title":"Percona Backup for MongoDB 2.0.5 (2023-03-23)","text":"Release date March 23, 2023 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a non-sharded replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/2.0.5.html#release-highlights","title":"Release Highlights","text":"<p>This release introduces the following fixes:</p> <ul> <li>for the physical restore process for deployments where the mongod <code>--dbpath</code> option has a forward slash (\u2018/\u2019) as the last char</li> <li>security vulnerability CVE-2022-41723 by updating the Golang library dependencies to the latest versions</li> </ul>"},{"location":"release-notes/2.0.5.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PBM-1058 - Fixed the physical restore issue if the <code>--dbpath</code> option has a tailing slash.</p> </li> <li> <p>PBM-1076 - Update golang.org/x/net module due to CVE-2022-41723</p> </li> </ul> <p></p>"},{"location":"release-notes/2.0.5.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/2.1.0.html","title":"Percona Backup for MongoDB 2.1.0 (2023-04-18)","text":"Release date April 18, 2023 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a non-sharded replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/2.1.0.html#release-highlights","title":"Release Highlights","text":"<ul> <li>Incremental physical backups are now generally available enabling you to use them in production environments. Note that due to the changes in metadata files required for the restore, backups made with previous PBM versions are incompatible for the restore with PBM 2.1.0. </li> <li>You can now selectively back up and restore sharded collections. This improves the management of a desired subset of data in sharded clusters and saves you extra costs on data storage and transfer. This is the tech preview feature due to some known limitations.</li> <li>Benefit from up to 19 times faster physical restore performance with the support of parallel download of data chunks from the S3 storage.</li> <li>Improved deletion of old backups and point-in-time recovery oplog chunks simplifies the automation of backup storage cleanup.</li> <li>The improved handling of master keys for data at rest encryption in Percona Server for MongoDB and the retrieval of the key ID/secret path by PBM from a backup simplifies the environment preparation for the physical restore and improves the restore flow.</li> <li>The support of AWS tokens for the access to the S3 storage improves the security of your infrastructure and the integration with applications that interact with AWS resources via tokens.</li> </ul>"},{"location":"release-notes/2.1.0.html#new-features","title":"New Features","text":"<ul> <li>PBM-1007 - Selective backup/restore for sharded collections</li> </ul>"},{"location":"release-notes/2.1.0.html#improvements","title":"Improvements","text":"<ul> <li>PBM-850 - Add ability to delete older backups</li> <li>PBM-875 - Concurrent download from S3 compatible storages</li> <li>PBM-778 - Save physical restore logs on storage</li> <li>PBM-951 - Get rid of redundant <code>pbm*.old</code> collections to improve resync speed</li> <li>PBM-955 - Improve physical restore of data encrypted at rest</li> <li>PBM-1033 - Flush previous incremental backup history after a new base backup is made </li> <li>PBM-1034 - Restore only files listed in a target backup and remove unneeded files for incremental backups</li> <li>PBM-1035 - Indicate a base incremental backup in <code>pbm status</code> output</li> <li>PBM-1046 - Handle changes with an offset beyond the current file size for incremental backups</li> <li>PBM-1053 - Stop mongod on shards before config servers during physical restore</li> <li>PBM-1060 - Add support of AWS session tokens to access S3 storage</li> <li>PBM-1066 - Restore from logical backup made on previous major PSMDB version</li> <li>PBM-1070 - Improve handling of failed physical/incremental restores when running pbm restore with the <code>--wait</code> option </li> <li>PBM-1078 - Preserve vault options during intermediate restarts</li> <li>PBM-1085 - Add the <code>--yes</code> flag for commands where <code>--force</code> is used</li> </ul>"},{"location":"release-notes/2.1.0.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PBM-979 - Add support for delayed/arbiter nodes on physical restore</li> <li>PBM-1012 - Drop a collection during selective oplog replay on the create collection stage</li> <li>PBM-1030 - Fixed the restore from incremental backup for database with data-at-rest encryption if the data were added/removed during backup</li> <li>PBM-1052 - Fixed PBM misbehavior during physical restore on a cluster that has more shards than in a backup</li> <li>PBM-1061 - Fixed the restore with the replica set name remapping on PSMDB 4.2</li> <li>PBM-1063 - Fixed the incremental restore failure if the <code>directoryPerDb</code> is configured in PSMDB </li> <li>PBM-1069 - Check for incompatible incremental backups and notify accordingly in <code>pbm status</code> output</li> <li>PBM-1073 - Improve performance of <code>pbm status</code> command on environments with large datasets and many backups</li> <li>PBM-1077 - Save the <code>storage.bson</code> to ensure incremental backups and restores for database with data-at-rest encryption</li> </ul>"},{"location":"release-notes/2.1.0.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/2.2.0.html","title":"Percona Backup for MongoDB 2.2.0 (2023-07-13)","text":"Release date July 13, 2023 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a non-sharded replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/2.2.0.html#release-highlights","title":"Release Highlights","text":"<ul> <li>Point-in-time recovery from physical backups is now automated similar to point-in-time recovery from logical ones. This offloads your DBAs on performing manual oplog replay on top of physical restore, ensures data consistency and unifies the user experience with PBM.  </li> <li>Owners of large data sets can now use PBM to create external physical backups as EBS snapshots or via a technology of their choice and restore from those backups with the data consistency guaranteed by PBM. Thereby they benefit from increased performance and reduced downtime, and are sure that their data remains consistent. This is the technical preview feature.</li> <li>The ability to restore from physical and incremental backups to a new environment with different replica set names extends the set of compatible environments for physical restore. </li> </ul>"},{"location":"release-notes/2.2.0.html#new-features","title":"New Features","text":"<ul> <li>PBM-952 - Add ability to make external backups</li> <li>PBM-815 - Automated point-in-time recovery for physical backups</li> </ul>"},{"location":"release-notes/2.2.0.html#improvements","title":"Improvements","text":"<ul> <li>PBM-1055 - Add ability to configure replica set remapping for physical and incremental restores</li> <li>PBM-1118 - Support custom shard names for restores with replica set remapping</li> <li>PBM-1132 - Disallow using the <code>--ns</code> flag for physical and incremental backups and restores</li> <li>PBM-1133 - Add support for virtual-hosted\u2013style URL for s3 storage buckets</li> <li>PBM-1062 - Add a supported PSMDB version check per backup type</li> </ul>"},{"location":"release-notes/2.2.0.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PBM-1090 - Fixed the issue with the <code>E11000 duplicate key</code> error by applying the indexes building after the oplog replay operation</li> <li>PBM-1095 - Fixed the authentication error during selective backup by changing the authSource to <code>admin</code> on config server replica set</li> <li>PBM-1103 - Changed the warning message for incompatible backups in the <code>pbm status</code> output. </li> <li>PBM-1123 - Fixed the issue with the restore by skipping the <code>config.image_collection</code> collection</li> <li>PBM-1135 - Fixed the issue with physical backup failure on a sharded cluster</li> </ul>"},{"location":"release-notes/2.2.0.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/2.2.1.html","title":"Percona Backup for MongoDB 2.2.1 (2023-07-27)","text":"Release date July 27, 2023 Installation Installing Percona Backup for MongoDB <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a non-sharded replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/2.2.1.html#release-highlights","title":"Release Highlights","text":"<p>With this release you can increase the wait time for backup to start, thus eliminating the PBM failure when creating <code>$backupCursor</code> takes longer than usual.</p>"},{"location":"release-notes/2.2.1.html#improvements","title":"Improvements","text":"<ul> <li>PBM-1154 - Add config option to change wait timeout for backup start status</li> </ul>"},{"location":"release-notes/2.2.1.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li> <p>PBM-1151 - Fixed the issue with PBM crashing when Percona Server for MongoDB fails to open <code>$backupCursor</code></p> </li> <li> <p>PBM-1155 - Retry to open <code>$backupCursor</code> during incremental backups in case of failure</p> </li> </ul> <p></p>"},{"location":"release-notes/2.2.1.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/2.3.0.html","title":"Percona Backup for MongoDB 2.3.0 (2023-09-25)","text":"<p>Installation</p> <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a non-sharded replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/2.3.0.html#release-highlights","title":"Release Highlights","text":"<ul> <li>The support for MongoDB 4.2 is deprecated. Existing functionality in Percona Backup for MongoDB remains compatible with MongoDB 4.2 and Percona Server for MongoDB 4.2; however, further enhancements and bug fixes are no longer tested against this version.</li> <li>The ability to view the backup contents improves troubleshooting of backups in environments where databases are often created and / or dropped. </li> <li>The ability to make physical backups in mixed deployments with MongoDB Community and Percona Server for MongoDB (PSMDB) nodes streamlines the backup flow for organizations that are still evaluating or migrating their data sets against PSMDB.</li> <li>Improved validation of a base backup snapshot for point-in-time recovery aligns the recovery flow for logical and physical backups.</li> </ul>"},{"location":"release-notes/2.3.0.html#supported-platforms-changes","title":"Supported platforms changes","text":"<ul> <li>A Docker image for Percona Backup for MongoDB is now available for ARM64 architectures. This improves the user experience with PBM for developers with ARM-based MacBooks.</li> <li>Percona Backup for MongoDB packages are now available for Debian 12 (bookworm). Percona Server for MongoDB is adding support for Debian 12 with the 7.0.x version. </li> </ul>"},{"location":"release-notes/2.3.0.html#new-features","title":"New Features","text":"<ul> <li>PBM-848 - List databases and collections from backup</li> </ul>"},{"location":"release-notes/2.3.0.html#improvements","title":"Improvements","text":"<ul> <li>PBM-1147, PBM-885 - Support symlinks as the <code>path</code> for filesystem storage type and properly retrieve data during resync</li> <li>PBM-1162, PBM-1166 - Improve validation of physical and incremental backups as the base for point-in-time recovery</li> <li>PBM-1171 - Add ability to make physical backups in mixed deployments</li> </ul>"},{"location":"release-notes/2.3.0.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PBM-1161 - Rebuild indexes only for the selected namespaces after selective restore</li> <li>PBM-1173, PBM-1180 - Fixed the issue with the primary node crash after the point-in-time recovery from physical backup</li> <li>PBM-1176 - Fixed the decoding of the physical restore metadata to ensure correct output of the <code>pbm describe-restore</code> command</li> <li>PBM-1181 - Fixed the issue with logical restore failure by excluding the <code>config.changelog</code> collection from the restore</li> </ul>"},{"location":"release-notes/2.3.0.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"release-notes/2.3.1.html","title":"Percona Backup for MongoDB 2.3.1 (2023-12-04)","text":"<p>Installation</p> <p>Percona Backup for MongoDB is a distributed, low-impact solution for consistent backups of MongoDB sharded clusters and replica sets. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a non-sharded replica set), and for restoring those backups to a specific point in time.</p>"},{"location":"release-notes/2.3.1.html#release-highlights","title":"Release Highlights","text":"<ul> <li>Added support for Percona Server for MongoDB 7.0.</li> <li>The ability to define custom endpoints when using Microsoft Azure Blob Storage for backups</li> <li>Improved PBM Docker image to allow making physical backups with the shared <code>mongodb</code> data volume</li> <li>Updated Golang libraries that include fixes for the security vulnerability CVE-2023-39325.</li> </ul>"},{"location":"release-notes/2.3.1.html#improvements","title":"Improvements","text":"<ul> <li>PBM-1195 - Allow custom endpointUrl for Azure storage</li> <li>PBM-1205 - Change the user in PBM Docker image to <code>mongod</code></li> </ul>"},{"location":"release-notes/2.3.1.html#bugs-fixed","title":"Bugs Fixed","text":"<ul> <li>PBM-1193 - Fixed the <code>pbm-agent</code> failure when the connection to PSMDB is lost</li> </ul>"},{"location":"release-notes/2.3.1.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"troubleshoot/index.html","title":"Overview","text":"<p>If you encounter issues when working with Percona Backup for MongoDB, consult the topics in this section:</p> <ul> <li>Diagnose PBM</li> <li>Check PBM status</li> <li>FAQ</li> </ul> <p></p>"},{"location":"troubleshoot/index.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"troubleshoot/faq.html","title":"FAQ","text":""},{"location":"troubleshoot/faq.html#whats-the-difference-between-pbm-and-mongodump","title":"What\u2019s the difference between PBM and <code>mongodump</code>?","text":"<p><code>mongodump</code> is a \u201clogical\u201d backup solution only while Percona Backup for MongoDB supports both logical and physical backups. Both solutions have equal performance for non-sharded replica sets. However, as opposed to <code>mongodump</code>, Percona Backup for MongoDB allows you to achieve the following goals:</p> <ul> <li>Make consistent backups and restores in sharded clusters.</li> <li>Backup / restore both the whole data set and specific namespaces \u2014\u2014 databases and collections. (See Selective backup and restore for more information.)</li> <li>Restore your database to a specific point in time.</li> <li>Run backups / restores on each replica set in parallel while <code>mongodump</code> runs in one process on <code>mongos</code> node.</li> </ul>"},{"location":"troubleshoot/faq.html#why-does-percona-backup-for-mongodb-use-utc-timezone-instead-of-server-local-timezone","title":"Why does Percona Backup for MongoDB use UTC timezone instead of server local timezone?","text":"<p><code>pbm-agents</code> use UTC time zone by design. The reason behind this is to avoid user misunderstandings when replica set / cluster nodes are distributed geographically in different time zones.</p> <p>Starting with version 2.0.1, you can change the time zone for <code>pbm logs</code> output.</p>"},{"location":"troubleshoot/faq.html#can-i-restore-a-single-collection-with-percona-backup-for-mongodb","title":"Can I restore a single collection with Percona Backup for MongoDB?","text":"<p>Yes. Starting with version 2.0.0, you can restore a single collection with Percona Backup for MongoDB. This functionality is available for logical backups and restores only. To learn more, see Selective backup and restore.</p>"},{"location":"troubleshoot/faq.html#can-i-back-up-specific-shards-in-a-cluster","title":"Can I back up specific shards in a cluster?","text":"<p>No, since this would result in backups with inconsistent timestamps across the cluster. Such backups would be invalid for restore.</p> <p>Percona Backup for MongoDB backs up the whole state of a sharded cluster, and this guarantees data consistency during the restore.</p>"},{"location":"troubleshoot/faq.html#do-i-need-to-stop-the-balancer-for-pitr-restore","title":"Do I need to stop the balancer for PITR restore?","text":"<p>Yes. The preconditions for both Point-in-Time Recovery restore and regular restore are the same:</p> <ol> <li> <p>In a sharded cluster, stop the balancer.</p> </li> <li> <p>Make sure no writes are made to the database during restore. This ensures data consistency.</p> </li> <li> <p>Disable Point-in-Time Recovery if it is enabled. This is because oplog slicing and restore are exclusive operations and cannot be run together. Note that oplog slices made after the restore and before the next backup snapshot become invalid. Make a fresh backup and re-enable Point-in-Time Recovery.</p> </li> </ol> <p></p>"},{"location":"troubleshoot/faq.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"troubleshoot/status.html","title":"Percona Backup for MongoDB status","text":"<p>Version added: 1.4.0</p> <p>You can check the status of Percona Backup for MongoDB running in your MongoDB environment using the <code>pbm status</code> command.</p> <pre><code>$ pbm status\n</code></pre> <p>The output provides the information about:</p> <ul> <li> <p>Your MongoDB deployment and <code>pbm-agents</code> running in it: to what <code>mongod</code> node each agent is connected, the Percona Backup for MongoDB version it runs and the agent\u2019s state</p> </li> <li> <p>The currently running backups / restores, if any</p> </li> <li> <p>Backups stored in the remote backup storage: backup name, completion time, size and status (complete, canceled, failed)</p> </li> <li> <p>Point-in-time recovery status (enabled or disabled)</p> </li> <li> <p>Valid time ranges for point-in-time recovery and the data size</p> </li> </ul> <p>This simplifies troubleshooting since the whole information is provided in one place.</p> <p>Sample output</p> <pre><code>pbm status\n\nCluster:\n========\nconfig:\n  - config/localhost:27027: pbm-agent v1.3.2 OK\n  - config/localhost:27028: pbm-agent v1.3.2 OK\n  - config/localhost:27029: pbm-agent v1.3.2 OK\nrs1:\n  - rs1/localhost:27018: pbm-agent v1.3.2 OK\n  - rs1/localhost:27019: pbm-agent v1.3.2 OK\n  - rs1/localhost:27020: pbm-agent v1.3.2 OK\nrs2:\n  - rs2/localhost:28018: pbm-agent v1.3.2 OK\n  - rs2/localhost:28019: pbm-agent v1.3.2 OK\n  - rs2/localhost:28020: pbm-agent v1.3.2 OK\n\nPITR incremental backup:\n========================\nStatus [OFF]\n\nCurrently running:\n==================\n(none)\n\nBackups:\n========\nS3 us-east-1 https://storage.googleapis.com/backup-test\n   Snapshots:\n     2020-12-16T10:36:52Z 491.98KB [restore_to_time: 2020-12-16T10:37:13Z]\n     2020-12-15T12:59:47Z 284.06KB [restore_to_time: 2020-12-15T13:00:08Z]\n     2020-12-15T11:40:46Z 0.00B [canceled: 2020-12-15T11:41:07Z]\n     2020-12-11T16:23:55Z 284.82KB [restore_to_time: 2020-12-11T16:24:16Z]\n     2020-12-11T16:22:35Z 284.04KB [restore_to_time: 2020-12-11T16:22:56Z]\n     2020-12-11T16:21:15Z 283.36KB [restore_to_time: 2020-12-11T16:21:36Z]\n     2020-12-11T16:19:54Z 281.73KB [restore_to_time: 2020-12-11T16:20:15Z]\n     2020-12-11T16:19:00Z 281.73KB [restore_to_time: 2020-12-11T16:19:21Z]\n     2020-12-11T15:30:38Z 287.07KB [restore_to_time: 2020-12-11T15:30:59Z]\nPITR chunks:\n     2020-12-16T10:37:13 - 2020-12-16T10:43:26 44.17KB\n</code></pre> <p></p>"},{"location":"troubleshoot/status.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"troubleshoot/troubleshooting.html","title":"Percona Backup for MongoDB diagnostics tools","text":"<p>Percona Backup for MongoDB provides diagnostics tools to operate data backups.</p>"},{"location":"troubleshoot/troubleshooting.html#pbm-speed-test","title":"pbm-speed-test","text":"<p>pbm-speed-test allows field-testing compression and backup upload speed of logical backups. You can use it:</p> <ul> <li> <p>To check performance before starting a backup</p> </li> <li> <p>To find out what slows down the running backup</p> </li> </ul> <p>By default, pbm-speed-test operates with fake semi random data documents. To run pbm-speed-test on a real collection, provide a valid MongoDB connection URI string for the <code>--mongodb-uri</code> flag.</p> <p>Run pbm-speed-test for the full set of available commands.</p>"},{"location":"troubleshoot/troubleshooting.html#compression-test","title":"Compression test","text":"<pre><code>$ pbm-speed-test compression --compression=s2 --size-gb 10\n</code></pre> <p>Output:</p> <pre><code>Test started ....\n10.00GB sent in 8s.\nAvg upload rate = 1217.13MB/s.\n</code></pre> <p>pbm-speed-test compression uses the compression library from the config file and sends a fake semi random data document (1 GB by default) to the black hole storage. (Use the <code>pbm config</code> command to change the compression library).</p> <p>To test compression on a real collection, pass the <code>--sample-collection</code> flag with the <code>&lt;my_db.my_collection&gt;</code> value.</p> <p>Run <code>pbm-speed-test compression --help</code> for the full set of supported flags:</p> <pre><code>$ pbm-speed-test compression --help\nusage: pbm-speed-test compression\n\nRun compression test\n\nFlags:\n      --help                     Show context-sensitive help (also try\n                                 --help-long and --help-man).\n      --mongodb-uri=MONGODB-URI  MongoDB connection string\n  -c, --sample-collection=SAMPLE-COLLECTION\n                                 Set collection as the data source\n  -s, --size-gb=SIZE-GB          Set data size in GB. Default 1\n      --compression=s2           Compression type\n                                 &lt;none&gt;/&lt;gzip&gt;/&lt;snappy&gt;/&lt;lz4&gt;/&lt;s2&gt;/&lt;pgzip&gt;/&lt;zstd&gt;\n      --compression-level=COMPRESSION-LEVEL\n                                 Compression level (specific to the compression type)\n                                 &lt;none&gt;/&lt;gzip&gt;/&lt;snappy&gt;/&lt;lz4&gt;/&lt;s2&gt;/&lt;pgzip&gt;/&lt;zstd&gt;\n</code></pre>"},{"location":"troubleshoot/troubleshooting.html#upload-speed-test","title":"Upload speed test","text":"<pre><code>$ pbm-speed-test storage --compression=s2\n</code></pre> <p>Output</p> <pre><code>Test started\n1.00GB sent in 1s.\nAvg upload rate = 1744.43MB/s.\n</code></pre> <p><code>pbm-speed-test storage</code> sends the semi random data (1 GB by default) to the remote storage defined in the config file. Pass the <code>--size-gb</code> flag to change the data size.</p> <p>To run the test with the real collection\u2019s data instead of the semi random data, pass the <code>--sample-collection</code> flag with the <code>&lt;my_db.my_collection&gt;</code> value.</p> <p>Run <code>pbm-speed-test storage --help</code> for the full set of available flags:</p> <pre><code>$ pbm-speed-test storage --help\nusage: pbm-speed-test storage\n\nRun storage test\n\nFlags:\n      --help                     Show context-sensitive help (also try --help-long and --help-man).\n      --mongodb-uri=MONGODB-URI  MongoDB connection string\n  -c, --sample-collection=SAMPLE-COLLECTION\n                                 Set collection as the data source\n  -s, --size-gb=SIZE-GB          Set data size in GB. Default 1\n      --compression=s2           Compression type &lt;none&gt;/&lt;gzip&gt;/&lt;snappy&gt;/&lt;lz4&gt;/&lt;s2&gt;/&lt;pgzip&gt;/&lt;zstd&gt;\n      --compression-level=COMPRESSION-LEVEL\n                                Compression level (specific to the compression type)\n</code></pre>"},{"location":"troubleshoot/troubleshooting.html#backup-progress-tracking","title":"Backup progress tracking","text":"<p>If you have a large logical backup, you can track the backup progress in the logs of the <code>pbm-agent</code> that makes it. A line is appended every minute showing bytes copied vs. total size for the current collection.</p> <p>Start a backup:</p> <pre><code>$ pbm backup\n</code></pre> <p>Check backup progress:</p> <ol> <li> <p>Check what <code>pbm-agent</code> makes the backup:</p> <pre><code>pbm logs\n</code></pre> </li> <li> <p>Connect to the <code>mongod</code> server where the <code>pbm-agent</code> is running and check its logs</p> <pre><code>$ journalctl -u pbm-agent.service\n</code></pre> <p>Sample output:</p> <pre><code>2020/05/06 21:31:12 Backup 2020-05-06T18:31:12Z started on node rs2/localhost:28018\n2020-05-06T21:31:14.797+0300 writing admin.system.users to archive on stdout\n2020-05-06T21:31:14.799+0300 done dumping admin.system.users (2 documents)\n2020-05-06T21:31:14.800+0300 writing admin.system.roles to archive on stdout\n2020-05-06T21:31:14.807+0300 done dumping admin.system.roles (1 document)\n2020-05-06T21:31:14.807+0300 writing admin.system.version to archive on stdout\n2020-05-06T21:31:14.815+0300 done dumping admin.system.version (3 documents)\n2020-05-06T21:31:14.816+0300 writing test.testt to archive on stdout\n2020-05-06T21:31:14.829+0300 writing test.testt2 to archive on stdout\n2020-05-06T21:31:14.829+0300 writing config.cache.chunks.config.system.sessions to archive on stdout\n2020-05-06T21:31:14.832+0300 done dumping config.cache.chunks.config.system.sessions (1 document)\n2020-05-06T21:31:14.834+0300 writing config.cache.collections to archive on stdout\n2020-05-06T21:31:14.835+0300 done dumping config.cache.collections (1 document)\n2020/05/06 21:31:24 [##......................]   test.testt  130841/1073901  (12.2%)\n2020/05/06 21:31:24 [##########..............]  test.testt2   131370/300000  (43.8%)\n2020/05/06 21:31:24\n2020/05/06 21:31:34 [#####...................]   test.testt  249603/1073901  (23.2%)\n2020/05/06 21:31:34 [###################.....]  test.testt2   249603/300000  (83.2%)\n2020/05/06 21:31:34\n2020/05/06 21:31:37 [########################]  test.testt2  300000/300000  (100.0%)\n</code></pre> </li> </ol>"},{"location":"troubleshoot/troubleshooting.html#pbm-agent-logs","title":"<code>pbm-agent</code> logs","text":"<p>Version added: 1.4.0</p> <p>To troubleshoot issues with specific events or node(s), use the <code>pbm logs</code> command.  It provides logs of all <code>pbm-agent</code> processes in your environment. </p> <p><code>pbm logs</code> has the set of filters to refine logs for specific events like <code>backup</code>, <code>restore</code>, <code>pitr</code> or for a specific node, and to manage log verbosity level. For example, to view logs about a specific backup with the Debug verbosity level, run the <code>pbm logs</code> command as follows:</p> <pre><code>$ pbm logs --severity=D --event=backup/2020-10-15T17:42:54Z\n</code></pre> <p>To learn more about available filters and usage examples, refer to Viewing backup logs.</p> <p></p>"},{"location":"troubleshoot/troubleshooting.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"usage/cancel-backup.html","title":"Cancel a backup","text":"<p>You can cancel a running backup if, for example, you want to do another maintenance of a server and don\u2019t want to wait for the large backup to finish first.</p> <p>To cancel the backup, use the <code>pbm cancel-backup</code> command.</p> <pre><code>$ pbm cancel-backup\nBackup cancellation has started\n</code></pre> <p>After the command execution, the backup is marked as canceled in the pbm status output:</p> <pre><code>$ pbm status\n</code></pre> <p>Output:</p> <pre><code>2020-04-30T18:05:26Z  Canceled at 2020-04-30T18:05:37Z\n</code></pre> <p></p>"},{"location":"usage/cancel-backup.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"usage/delete-backup.html","title":"Delete backups","text":"<p>Use <code>pbm delete-backup</code> to delete backup snapshots and <code>pbm delete-pitr</code> to delete point-in-time recovery oplog slices. Use the <code>pbm cleanup --older-than</code> command to automate backup storage cleanup.</p>"},{"location":"usage/delete-backup.html#delete-outdated-data","title":"Delete outdated data","text":"<p>Version added: 2.1.0</p> <p>You can use the <code>pbm cleanup --older-than</code> command to delete both outdated backup snapshots and point-in-time recovery oplog slices. This simplifies the automation of the backup rotation.</p> <p>The timestamp you specify for the <code>--older-than</code> flag must be in the following format:</p> <ul> <li><code>%Y-%M-%DT%H:%M:%S</code> (for example, 2023-04-20T13:13:20) or</li> <li><code>%Y-%M-%D</code> (2023-04-20)</li> <li><code>XXd</code> (1d or 30d). Only days are supported.</li> </ul> <p>During the cleanup, you see the backups and oplog slices to be deleted and are asked to confirm the action. To bypass it, add the <code>--yes</code> flag:</p> <pre><code>$ pbm cleanup --older-than=`%Y-%M-%D --yes\n</code></pre>"},{"location":"usage/delete-backup.html#behavior","title":"Behavior","text":"<p>The timestamp you specify is considered to be the time to which you would wish to restore. Therefore, PBM doesn\u2019t delete all backup snapshots and oplog slices that could be used to restore to this time.</p> <p>Here\u2019s how the cleanup works:</p> <ul> <li>Physical and selective backups are deleted up to the specified time.</li> <li> <p>Incremental physical backups are deleted up to the specified time if the timestamp doesn\u2019t fall within the backup chain. If it does, PBM checks for the most recent base incremental backup in relation to the specified timestamp. PBM keeps this backup and the whole chain deriving from it to ensure the potential restore.</p> <p>For example, you have the following list of backups:</p> <pre><code>Snapshots:\n    2023-04-14T19:34:52Z 520.86MB &lt;incremental&gt; [restore_to_time: 2023-04-14T19:34:54Z]\n    2023-04-14T08:12:50Z 576.63MB &lt;incremental, base&gt; [restore_to_time: 2023-04-14T08:12:52Z]\n    2023-04-12T03:02:08Z 498.50MB &lt;incremental&gt; [restore_to_time: 2023-04-12T03:02:10Z]\n    2023-04-11T19:30:14Z 552.77MB &lt;incremental, base&gt; [restore_to_time: 2023-04-11T19:30:16Z]\n    2023-04-11T14:25:51Z 572.41MB &lt;physical&gt; [restore_to_time: 2023-04-11T14:25:54Z]\n</code></pre> <p>You wish to delete all backups that are older than 2023-04-14T15:00:00</p> <pre><code>$ pbm cleanup --older-than=\"2023-04-14T15:00:00\"\n</code></pre> <p>This timestamp falls inside the backup chain that starts with the <code>2023-04-14T08:12:50Z</code> backup. That\u2019s why PBM keeps this backup and the incremental backup chain deriving from it and deletes all data that is older than this backup.</p> <p>Output:</p> <pre><code>S3 us-east-1 s3://http://192.168.56.1:9000/bcp/pbme2etest\n  Snapshots:\n    2023-04-14T19:34:52Z 520.86MB &lt;incremental&gt; [restore_to_time: 2023-04-14T19:34:54Z]\n    2023-04-14T08:12:50Z 576.63MB &lt;incremental, base&gt; [restore_to_time: 2023-04-14T08:12:52Z]\n</code></pre> </li> <li> <p>Logical backup cleanup also depends on the point-in-time recovery settings. </p> <ul> <li>By default, PBM looks for the most recent backup in relation to the specified timestamp and deletes all logical backups and oplog slices up to the backup\u2019s <code>restore_to_time</code> value.  </li> </ul> <p>To illustrate, let\u2019s say you have the following backup list:</p> <pre><code>Snapshots:\n    2023-04-13T13:26:58Z 147.29MB &lt;logical&gt; [restore_to_time: 2023-04-13T13:27:15Z]\n    2023-04-13T10:12:08Z 147.29MB &lt;logical&gt; [restore_to_time: 2023-04-13T10:12:27Z]\n    2023-04-13T08:48:32Z 147.28MB &lt;logical&gt; [restore_to_time: 2023-04-13T08:48:51Z]\n  PITR chunks [2.11MB]:\n    2023-04-13T08:48:52Z - 2023-04-13T13:27:15Z\n</code></pre> <p>You wish to delete all data up to 2023-04-13T12:00:00.</p> <p>The most recent backup in relation to this timestamp is <code>2023-04-13T10:12:08Z 147.29MB</code>. So PBM deletes all backups that are older than this backup. It also deletes all oplog slices up to the backup\u2019s <code>restore_to_time: 2023-04-13T10:12:27Z</code>. The output after the cleanup looks like this:</p> <pre><code>Snapshots:\n    2023-04-13T13:26:58Z 147.29MB &lt;logical&gt; [restore_to_time: 2023-04-13T13:27:15Z]\n    2023-04-13T10:12:08Z 147.29MB &lt;logical&gt; [restore_to_time: 2023-04-13T10:12:27Z]\n  PITR chunks [157.94KB]:\n    2023-04-13T10:12:28Z - 2023-04-13T13:27:46Z\n</code></pre> <ul> <li>When point-in-time recovery is enabled and you specify the timestamp greater than the <code>restore_to_time</code> for the most recent logical backup, PBM keeps this backup and all oplog slices deriving from it to ensure point-in-time recovery. </li> <li>When the specified timestamp equals to the <code>restore_to_time</code> value for any full logical, physical and base incremental backups, PBM deletes all logical backup snapshots and oplog slices up to this backup\u2019s <code>restore_to_time</code>.</li> </ul> </li> </ul>"},{"location":"usage/delete-backup.html#delete-backup-snapshots","title":"Delete backup snapshots","text":""},{"location":"usage/delete-backup.html#considerations","title":"Considerations","text":"<ol> <li> <p>You can only delete a backup that is not running (has the \u201cdone\u201d or the \u201cerror\u201d state). To check the backup state, run the <code>pbm status</code> command.</p> </li> <li> <p>To ensure oplog continuity for point-in-time restore, the <code>pbm delete-backup</code> command deletes any backup(s) except the following:</p> <ul> <li> <p>A backup snapshot that can serve as the base for any point-in-time recovery and has point-in-time recovery time ranges deriving from it. To delete such a backup, first delete the oplog slices that are created  after the <code>restore-to time</code> value for this backup.</p> </li> <li> <p>The most recent backup if point-in-time recovery is enabled and there are no oplog slices following this backup yet.</p> </li> </ul> <p>To illustrate this, let\u2019s take the following <code>pbm list</code> output:</p> <pre><code>Backup snapshots:\n  2022-10-05T14:13:50Z &lt;logical&gt; [restore_to_time: 2022-10-05T14:13:55Z]\n  2022-10-06T14:52:42Z &lt;logical&gt; [restore_to_time: 2022-10-06T14:52:47Z]\n  2022-10-07T14:57:17Z &lt;logical&gt; [restore_to_time: 2022-10-07T14:57:22Z]\n\nPITR &lt;on&gt;:\n  2022-10-05T14:13:56Z - 2022-10-05T18:52:21Z\n</code></pre> <p>You can delete a backup <code>2022-10-06T14:52:42Z</code> since it has no point-in-time oplog slices. You cannot delete the following backups:</p> <ul> <li><code>2022-10-05T14:13:50Z</code> because it is the base for recovery to any point in time from the PITR time range <code>2022-10-05T14:13:56Z - 2022-10-05T18:52:21Z</code></li> <li><code>2022-10-07T14:57:17Z</code> because PITR is enabled and there are no oplog slices following it yet.</li> </ul> </li> </ol>"},{"location":"usage/delete-backup.html#behavior_1","title":"Behavior","text":"<p>You can delete either a specified backup snapshot or all backup snapshots older than the specified time. Starting with version 2.0.0, you can also delete selective backups. </p> A specific backupBackups older than the specified time <p>To delete a backup, specify the <code>&lt;backup_name&gt;</code> as an argument.</p> <pre><code>$ pbm delete-backup &lt;backup_name&gt;\n</code></pre> <p>To delete backups that were created before the specified time, pass the <code>--older-than</code> flag to the <code>pbm delete-backup</code> command. Specify the timestamp as an argument for <code>pbm delete-backup</code> in the following format:</p> <ul> <li><code>%Y-%M-%DT%H:%M:%S</code> (for example, 2021-04-20T13:13:20Z) or</li> <li><code>%Y-%M-%D</code> (2021-04-20).</li> </ul> <p>By default, the <code>pbm delete-backup</code> command asks for your confirmation to proceed with the deletion. To bypass it, add the <code>-f</code> or  <code>--force</code> flag.</p> <pre><code>$ pbm delete-backup --force 2021-04-20T13:45:59Z\n</code></pre> <p>For Percona Backup for MongoDB 1.5.0 and earlier versions, when you delete a backup, all oplog slices that relate to this backup are deleted too. For example, you delete a backup snapshot <code>2020-07-24T18:13:09</code> while there is another snapshot <code>2020-08-05T04:27:55</code> created after it.  The pbm-agent deletes only oplog slices that relate to <code>2020-07-24T18:13:09</code>.</p> <p>The same applies if you delete backups older than the specified time.</p> <p>Note that when point-in-time recovery is enabled, the most recent backup snapshot and oplog slices that relate to it are not deleted.</p>"},{"location":"usage/delete-backup.html#example","title":"Example","text":"<p>View backups:</p> <pre><code>$ pbm list\n</code></pre> <p>Output:</p> <pre><code>Backup snapshots:\n  2021-04-20T20:55:42Z\n  2021-04-20T23:47:34Z\n  2021-04-20T23:53:20Z\n  2021-04-21T02:16:33Z\n</code></pre> <p>Delete backups created before the specified timestamp</p> <pre><code>pbm delete-backup -f --older-than 2021-04-21\n</code></pre> <p>Output:</p> <pre><code>Backup snapshots:\n  2021-04-21T02:16:33Z\n</code></pre>"},{"location":"usage/delete-backup.html#delete-oplog-slices","title":"Delete oplog slices","text":"<p>Version added: 1.6.0</p> <p>You can delete oplog slices saved before the specified time or all slices altogether. By deleting old and/or unnecessary slices, you can save storage space. </p>"},{"location":"usage/delete-backup.html#behavior_2","title":"Behavior","text":"<p>To view oplog slices, run the <code>pbm list</code> command. If you have deleted the snapshot and want to delete the respective oplog slices, run the <code>pbm list --unbacked</code> command to view them.</p> Delete all oplog slicesEarlier than the specified timestamp <p>Run the <code>pbm delete-pitr</code> and pass the <code>--all</code> flag:</p> <pre><code>$ pbm delete-pitr --all\n</code></pre> <p>To delete slices that are made earlier than the specified time, run the <code>pbm delete-pitr</code> command with the <code>--older-than</code> flag and pass the timestamp for it. The timestamp must be in the following format:</p> <ul> <li><code>%Y-%M-%DT%H:%M:%S</code> (for example, 2021-07-20T10:01:18) or</li> <li><code>%Y-%M-%D</code> (2021-07-20).</li> </ul> <pre><code>$ pbm delete-pitr --older-than 2021-07-20T10:01:18\n</code></pre> <p>To enable point-in-time recovery from the most recent backup snapshot, Percona Backup for MongoDB does not delete slices that were made after that snapshot. For example, if the most recent snapshot is <code>2021-07-20T07:05:23Z [restore_to_time: 2021-07-21T07:05:44]</code> and you specify the timestamp <code>2021-07-20T07:05:44</code>, Percona Backup for MongoDB deletes only slices that were made before <code>2021-07-20T07:05:23Z</code>.</p> <p></p>"},{"location":"usage/delete-backup.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"usage/describe-backup.html","title":"View detailed information about a backup","text":"<p>To view a detailed information about a backup, run the following command:</p> <pre><code>$ pbm describe-backup &lt;backup-name&gt;\n</code></pre> <p>The output provides the backup name, type, status, size and the information about the cluster topology it was taken in. For selective backups, it also shows the namespaces that were backed up. </p> Output <pre><code>name: \"2022-08-17T10:49:03Z\"\ntype: logical\nlast_write_ts: 1662039300,2\nlast_transition_ts: \"1662039304\"\nnamespaces:\n- Invoices.*\nmongodb_version: 5.0.10-9\npbm_version: 2.0.0\nstatus: done\nsize: 10234670\nerror: \"\"\nreplsets:\n- name: rs1\n  status: done\n  iscs: false\n  last_write_ts: 1662039300,2\n  last_transition_ts: \"1662039304\"\n  error: \"\"\n</code></pre> <p>Version added: 2.3.0</p> <p>You can view the list of collections included in the logical or selective backup. This simplifies troubleshooting as it helps identify the backup contents for environments where databases are frequently created or dropped.</p> <p>To view the backup contents, use the <code>--with-collections</code> flag:</p> <pre><code>$ pbm describe-backup &lt;backup-name&gt; --with-collections\n</code></pre> Output <pre><code>name: \"2023-09-14T14:44:33Z\"\nopid: 65031c51e6a16fa0e3deeb5f\ntype: logical\nlast_write_time: \"2023-09-14T14:44:39Z\"\nlast_transition_time: \"2023-09-14T14:44:57Z\"\nmongodb_version: 6.0.9-7\nfcv: \"6.0\"\npbm_version: 2.2.1\nstatus: done\nsize_h: 89.3 KiB\nreplsets:\n- name: rs0\n  status: done\n  node: rs00:30000\n  last_write_time: \"2023-09-14T14:44:38Z\"\n  last_transition_time: \"2023-09-14T14:44:56Z\"\n  collections:\n  - admin.pbmRRoles\n  - admin.pbmRUsers\n  - admin.system.roles\n  - admin.system.users\n  - admin.system.version\n  - db0.c0\n  - db0.c1\n  - db1.c0\n- name: rs1\n  status: done\n  node: rs10:30100\n  last_write_time: \"2023-09-14T14:44:38Z\"\n  last_transition_time: \"2023-09-14T14:44:49Z\"\n  collections:\n  - admin.pbmRRoles\n  - admin.pbmRUsers\n  - admin.system.roles\n  - admin.system.users\n  - admin.system.version\n  - db0.c0\n  - db1.c0\n  - db1.c1\n- name: cfg\n  status: done\n  node: cfg0:27000\n  last_write_time: \"2023-09-14T14:44:39Z\"\n  last_transition_time: \"2023-09-14T14:44:42Z\"\n  configsvr: true\n  collections:\n  - admin.pbmAgents\n  - admin.pbmBackups\n  - admin.pbmCmd\n  - admin.pbmConfig\n  - admin.pbmLock\n  - admin.pbmLockOp\n  - admin.pbmLog\n  - admin.pbmOpLog\n  - admin.pbmPITRChunks\n  - admin.pbmRRoles\n  - admin.pbmRUsers\n  - admin.system.roles\n  - admin.system.users\n  - admin.system.version\n  - config.chunks\n  - config.collections\n  - config.databases\n  - config.settings\n  - config.shards\n  - config.tags\n  - config.version\n</code></pre> <p></p>"},{"location":"usage/describe-backup.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"usage/list-backup.html","title":"List backups","text":"<p>Note</p> <p>As of version 1.4.0, the <code>pbm list</code> command provides the information only about completed backups. To check for running backups, use the <code>pbm status</code>. For more information, see Percona Backup for MongoDB status.</p> <p>For Percona Backup for MongoDB version 1.3.4 and earlier, the <code>pbm list</code> command provides the running backup listed with an \u2018In progress\u2019 label. When that is absent, the backup is complete.</p> <p>Use the <code>pbm list</code> command to view all completed backups. </p> <pre><code>$ pbm list\n</code></pre> <p>The output provides the following information:</p> <ul> <li>Backup name </li> <li>Backup type: logical, physical, selective, incremental. Available starting with version 1.7.0 </li> <li>The time to which the sharded cluster / non-shared replica set will be returned to after the restore. Available starting with version 1.4.0.</li> <li>If point-in-time recovery is enabled, its status and the valid time ranges for the restore</li> </ul> <p>Sample output</p> <pre><code>Backup snapshots:\n  2023-03-10T10:44:52Z &lt;logical&gt; [restore_to_time: 2023-03-10T10:44:56Z]\n  2023-03-10T10:49:20Z &lt;physical&gt; [restore_to_time: 2023-03-10T10:49:23Z]\n  2023-03-10T10:50:22Z &lt;incremental&gt; [restore_to_time: 2023-03-10T10:50:25Z]\n  2023-03-10T10:51:02Z &lt;incremental&gt; [restore_to_time: 2023-03-10T10:51:04Z]\n  2023-03-10T10:57:47Z &lt;incremental&gt; [restore_to_time: 2023-03-10T10:57:49Z]\n  2023-03-10T11:04:25Z &lt;incremental&gt; [restore_to_time: 2023-03-10T11:04:27Z]\n  2023-03-10T11:05:03Z &lt;logical, selective&gt; [restore_to_time: 2023-03-10T11:05:07Z]\n</code></pre>"},{"location":"usage/list-backup.html#restore-to-time","title":"Restore to time","text":"<p>In logical backups, the completion time almost coincides with the backup finish time. To define the completion time, Percona Backup for MongoDB waits for the backup snapshot to finish on all cluster nodes. Then it captures the oplog from the backup start time up to that time.</p> <p>In physical backups, the completion time is only a few seconds after the backup start time. By holding the <code>$backupCursor</code> open guarantees that the checkpoint data won\u2019t change during the backup, and Percona Backup for MongoDB can define the completion time ahead.</p>"},{"location":"usage/list-backup.html#useful-links","title":"Useful links","text":"<p>View detailed information about a backup</p> <p></p>"},{"location":"usage/list-backup.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"usage/logs.html","title":"View backup logs","text":"<p>Version added: 1.4.0</p> <p>You can see the logs from all <code>pbm-agents</code> in your MongoDB environment using <code>pbm CLI</code>. This reduces time for finding required information when troubleshooting issues.</p> <p>Note</p> <p>The log information about restores from physical backups is not available in pbm logs.</p> <p>To view <code>pbm-agent</code> logs, run the <code>pbm logs</code> command and pass one or several flags to narrow down the search.</p> <p>The following flags are available:</p> <ul> <li><code>-t</code>, <code>--tail</code> - Show the last N rows of the log</li> <li><code>-e</code>, <code>--event</code> - Filter logs by all backups or a specific backup</li> <li><code>-n</code>, <code>--node</code> - Filter logs by a specific node  or a replica set</li> <li> <p><code>-s</code>, <code>--severity</code> - Filter logs by severity level. The following values are supported (from low to high):</p> <ul> <li><code>D</code> - Debug</li> <li><code>I</code> - Info</li> <li><code>W</code> - Warning</li> <li><code>E</code> - Error</li> <li><code>F</code> - Fatal</li> </ul> </li> <li> <p><code>-o</code>, <code>--output</code> - Show log information as text (default) or in JSON format.</p> </li> <li><code>-i</code>, <code>--opid</code> - Filter logs by the operation ID</li> </ul>"},{"location":"usage/logs.html#examples","title":"Examples","text":"<p>The following are some examples of filtering logs:</p> <p>Show logs for all backups</p> <pre><code>$ pbm logs --event=backup\n</code></pre> <p>Show the last 100 lines of the log about a specific backup 2020-10-15T17:42:54Z</p> <pre><code>$ pbm logs --tail=100 --event=backup/2020-10-15T17:42:54Z\n</code></pre> <p>Include only errors from the specific replica set</p> <pre><code>$ pbm logs -n rs1 -s E\n</code></pre> <p>The output includes log messages of the specified severity type and all higher levels. Thus, when <code>ERROR</code> is specified, both <code>ERROR</code> and <code>FATAL</code> messages are shown in the output.</p>"},{"location":"usage/logs.html#implementation-details","title":"Implementation details","text":"<p><code>pbm-agents</code> write log information into the <code>pbmLog</code> collection in the PBM Control collections. Every <code>pbm-agent</code> also writes log information to <code>stderr</code> so that you can retrieve it when there is no healthy <code>mongod</code> node in your cluster or replica set. For how to view an individual <code>pbm-agent</code> log, see How to see the pbm-agent log.</p> <p>Note</p> <p>Log information from <code>pbmLog</code> collection is shown in the UTC timezone and from the stderr - in the server\u2019s time zone.</p> <p></p>"},{"location":"usage/logs.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"usage/oplog-replay.html","title":"Replay oplog from arbitrary start time","text":"<p>Version added: 1.7.0</p> <p>You can replay the oplog for a specific period on top of any backup: logical, physical, storage level snapshot (like EBS-snapshot). Starting with version 1.8.0, you can save oplog slices without the mandatory base backup snapshot. This behavior is controlled by the <code>pitr.oplogOnly</code> configuration parameter:</p> <pre><code>pitr:\n   oplogOnly: true\n</code></pre> <p>By replaying these oplog slices on top of the backup snapshot with the <code>pbm oplog-replay</code> command, you can manually restore sharded clusters and non-sharded replica sets to a specific point in time from a backup made by any tool and not only by Percona Backup for MongoDB. Plus, you reduce time, storage space, and administration efforts on making the redundant base backup snapshot.</p> <p>Warning</p> <p>Use the oplog replay functionality with caution, only when you are sure about the starting time from which to replay oplog. The oplog replay does not guarantee data consistency when restoring from any backup. However, it is less error-prone for backups made with Percona Backup for MongoDB.</p>"},{"location":"usage/oplog-replay.html#oplog-replay-for-physical-backups","title":"Oplog replay for physical backups","text":"<p>Starting with version 2.2.0, oplog replay on top of a physical backups made with Percona Backup for MongoDB is done automatically as part of point-in-time recovery. </p> <p>This section describes how to manually replay oplog on top of physical backups with Percona Backup for MongoDB version 2.1.0 and earlier.</p> <p>After you restored a physical backup, do the following:</p> <ol> <li> <p>Stop point-in-time recovery, if enabled, to release the lock.</p> </li> <li> <p>Run <code>pbm status</code> or <code>pbm list</code> commands to find oplog chunks available for replay.</p> </li> <li> <p>Run the <code>pbm oplog-replay</code> command and specify the <code>--start</code> and <code>--end</code> flags with the timestamps.</p> <pre><code>$ pbm oplog-replay --start=\"2022-01-02T15:00:00\" --end=\"2022-01-03T15:00:00\"\n</code></pre> </li> <li> <p>After the oplog replay, make a fresh backup and enable the point-in-time recovery oplog slicing.</p> </li> </ol>"},{"location":"usage/oplog-replay.html#oplog-replay-for-storage-level-snapshots","title":"Oplog replay for storage level snapshots","text":"<p>When making a backup, Percona Backup for MongoDB stops the point-in-time recovery. This is done to maintain data consistency after the restore.</p> <p>Storage-level snapshots are saved with point-in-time recovery enabled. Thus, after the database restore from such a backup, point-in-time recovery is automatically enabled and starts oplog slicing. These new oplog slices might conflict with the existing oplogs saved during the backup. To replay the oplog in such a case, do the following after the restore:</p> <ol> <li>Disable point-in-time recovery.</li> <li>Delete the oplog slices that might have been created.</li> <li>Re-sync the data from the storage.</li> <li> <p>Run the <code>pbm oplog-replay</code> command and specify the <code>--start</code> and <code>--end</code> flags with the timestamps.</p> <pre><code>$ pbm oplog-replay --start=\"2022-01-02T15:00:00\" --end=\"2022-01-03T15:00:00\"\n</code></pre> </li> <li> <p>After the oplog replay, make a fresh backup and enable the point-in-time recovery oplog slicing.</p> </li> </ol>"},{"location":"usage/oplog-replay.html#known-limitations","title":"Known limitations","text":"<p>The oplog replay fails if you rename the entire database or a collection.</p> <p></p>"},{"location":"usage/oplog-replay.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"usage/pitr-tutorial.html","title":"Make a point-in-time restore","text":""},{"location":"usage/pitr-tutorial.html#preconditions","title":"Preconditions","text":"<p>Run <code>pbm status</code> or <code>pbm list</code> commands to check that the full backup snapshot exists and there are oplog slices.</p>"},{"location":"usage/pitr-tutorial.html#before-you-start","title":"Before you start","text":"<ol> <li> <p>Disable point-in-time recovery. A restore and point-in-time recovery oplog slicing are incompatible operations and cannot be run simultaneously. </p> <pre><code>$ pbm config --set pitr.enabled=false\n</code></pre> </li> <li> <p>Stop the balancer and <code>mongos</code> nodes.</p> </li> <li>Make sure no writes are made to the database during restore. </li> </ol>"},{"location":"usage/pitr-tutorial.html#procedure","title":"Procedure","text":"From logical backupsFrom physical backups <p>Run <code>pbm restore</code> and specify the timestamp from the valid range:    </p> <pre><code>$ pbm restore --time=\"2022-12-14T14:27:04\"\n</code></pre> <p>The timestamp you specify for the restore must be within the time ranges in the PITR section of <code>pbm list</code> output. Percona Backup for MongoDB automatically selects the most recent backup among logical, physical and incremental in relation to the specified timestamp and uses that as the base for the restore.    </p> <p>To illustrate this behavior, let\u2019s use the following <code>pbm list</code> output as the example.     </p> <pre><code>$ pbm list    \n\n  2021-08-04T13:00:58Z [restore_to_time: 2021-08-04T13:01:23Z]\n  2021-08-05T13:00:47Z [restore_to_time: 2021-08-05T13:01:11Z]\n  2021-08-06T08:02:44Z [restore_to_time: 2021-08-06T08:03:09Z]\n  2021-08-06T08:03:43Z [restore_to_time: 2021-08-06T08:04:08Z]\n  2021-08-06T08:18:17Z [restore_to_time: 2021-08-06T08:18:41Z]    \n\nPITR &lt;off&gt;:\n  2021-08-04T13:01:24 - 2021-08-05T13:00:11\n  2021-08-06T08:03:10 - 2021-08-06T08:18:29\n  2021-08-06T08:18:42 - 2021-08-06T08:33:09\n</code></pre> <p>For timestamp <code>2021-08-06T08:10:10</code>, the backup snapshot <code>2021-08-06T08:02:44Z [restore_to_time: 2021-08-06T08:03:09]</code> is used as the base for the restore as it is the most recent one.    </p> <p>If you select a backup snapshot for the restore with the <code>\u2013-base-snapshot</code> option, the timestamp for the restore must also be later than the selected backup.    </p> <p>See also</p> <p>Restore a backup </p> <p>Starting with version 2.2.0, you can recover your database from a full or an incremental physical backup in the same automated fashion as from a logical one. Percona Backup for MongoDB restores the backup snapshot and automatically replays the oplog events on top of it up to the specified time, guaranteeing data consistency. This helps you prevent data loss during a disaster and gives you the same user experience when managing backups and restores.    </p> <p>To restore a database from a physical backup, specify the time for the <code>pbm restore</code> command:    </p> <pre><code>$ pbm restore --time &lt;timestamp&gt; -w\n</code></pre> <p>Percona Backup for MongoDB recognizes if it is a full or an incremental backup and restores the database from it up to the specified time.     </p> <p>Note</p> <p>For PBM versions earlier then 2.3.0, the command for the point-in-time recovery is the following:</p> <pre><code>$ pbm restore --base-snapshot=&lt;backup_name&gt; --time &lt;timestamp&gt; -w \n</code></pre> <p>The <code>--base-snapshot</code> flag is required. Otherwise, PBM will look for a logical backup even if there is none or there is a more recent physical backup.    </p> <p>After the point-in-time recovery is complete, perform these post-restore steps:    </p> <ol> <li> <p>Restart all <code>mongod</code> nodes.    </p> </li> <li> <p>Restart all <code>pbm-agents</code>.    </p> </li> <li> <p>Resync the backup list with the storage:    </p> <pre><code>$ pbm config --force-resync\n</code></pre> </li> <li> <p>Start the balancer and start <code>mongos</code> nodes.    </p> </li> <li> <p>Make a fresh backup to serve as the new base for future restores.    </p> </li> <li> <p>Enable point-in-time routine to resume saving oplog slices.    </p> </li> </ol> <p>For Percona Backup for MongoDB version 2.1.0 and earlier, point-in-time recovery consists of the following steps:    </p> <ul> <li>Restore from the physical backup snapshot.</li> <li>Manual replay of oplog events on top of this snapshot up to a specific timestamp.    </li> </ul> <p>For how to replay oplog events on top of a backup, see Oplog replay for physical backups.</p>"},{"location":"usage/pitr-tutorial.html#post-restore-steps","title":"Post-restore steps","text":"<p>A restore operation changes the time line of oplog events. Therefore, all oplog slices made after the restore time stamp and before the last backup become invalid. After the restore is complete, do the following:    </p> <ol> <li> <p>Make a new backup to serve as the starting point for oplog updates:    </p> <pre><code>$ pbm backup\n</code></pre> </li> <li> <p>Re-enable point-in-time recovery to resume saving oplog slices:    </p> <pre><code>$ pbm config --set pitr.enabled=true\n</code></pre> </li> </ol>"},{"location":"usage/pitr-tutorial.html#implementation-specifics","title":"Implementation specifics","text":"<ol> <li>Due to the physical restore logic and flow, PBM replays oplog events on the primary node of every shard when Percona Server for MongoDB is shut down. After the database start, the remaining nodes receive the data during the initial sync.</li> <li>When doing point-in-time recovery for deployments with sharded collections, PBM only writes data to existing ones and doesn\u2019t support creating new collections. Therefore, whenever you create a new sharded collection, make a new backup for it to be included there.</li> </ol>"},{"location":"usage/pitr-tutorial.html#select-a-backup-snapshot-for-the-restore","title":"Select a backup snapshot for the restore","text":"<p>Version added: 1.6.0</p> <p>You can recover your database to the specific point in time using any backup snapshot, and not only the most recent one. Run the <code>pbm restore</code> command with the <code>--base-snapshot=&lt;backup_name&gt;</code> flag where you specify the desired backup snapshot.</p> <p>To restore from any backup snapshot, Percona Backup for MongoDB requires continuous oplog. After the backup snapshot is made and point-in-time recovery is re-enabled, it copies the oplog saved with the backup snapshot and creates oplog slices from the end time of the latest slice to the new starting point thus making the oplog continuous.</p>"},{"location":"usage/pitr-tutorial.html#restore-selected-databases-and-collections","title":"Restore selected databases and collections","text":"<p>Important</p> <p>Supported only for replica sets. Available for logical backups.</p> <ol> <li> <p>Before you start:</p> <ol> <li>Read known limitations for selective backups and restores.</li> <li>Check that you have made a full backup because it serves as the base for point-in-time recovery. Any selective backup is ignored.</li> </ol> </li> <li> <p>To restore the desired database or a collection to a point in time, run the <code>pbm restore</code> command as follows:</p> <pre><code>$ pbm restore --base-snapshot &lt;backup_name&gt; --time &lt;timestamp&gt; \\\n--ns &lt;db.collection&gt;\n</code></pre> <p>You can specify the selective backup as the base snapshot for the Point-in-time restore. In this case, Percona Backup for MongoDB restores only the namespace(s) included in this backup to the specified time.    </p> <p>Alternatively, you can use a full backup snapshot and restore the desired namespaces (databases or collections) up to the specific time from it. Specify them as the comma-separated list for the <code>pbm restore</code> command.    </p> <p>When point-in-time recovery is started, Percona Backup for MongoDB uses the provided base snapshot, restores the specified namespace(s) and replays oplog on top of it up to the specified time. If no base snapshot is provided, Percona Backup for MongoDB uses the most recent full backup snapshot.</p> </li> </ol>"},{"location":"usage/pitr-tutorial.html#useful-links","title":"Useful links","text":"<ul> <li>Restore a backup</li> <li>Replay oplog from arbitrary start time</li> </ul>"},{"location":"usage/pitr-tutorial.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"usage/restore-progress.html","title":"View restore progress","text":"<p>Version added: 2.0.0</p> <p>You can track the status of both physical and logical restores. This gives you a clear understanding of the restore progress so that you can react accordingly. </p> <p>To view the restore status, run the <code>pbm describe-restore</code> command and specify the restore name. To track the progress of a physical restore, also specify the path to the Percona Backup for MongoDB configuration file. Since <code>mongod</code> nodes are shut down during a physical restore, Percona Backup for MongoDB uses the configuration file to read the restore status on storage.</p> <pre><code>$ pbm describe-restore 2022-08-15T11:14:55.683148162Z -c pbm_config.yaml\n</code></pre> <p>The output provides the following information:</p> <ul> <li>Restore name</li> <li>The name of the backup from which the database was restored</li> <li>Type</li> <li>Status</li> <li>opID</li> <li>The time of the restore start</li> <li>Last transition time \u2013 the time when the restore process changed its status</li> <li>The name of every replica set, its restore status and the last transition time </li> </ul> <p>For physical backups only, the following additional information is provided:</p> <ul> <li>The node name</li> <li>Restore status on the node</li> <li>Last transition time</li> </ul> <p>For version 1.8.1 and earlier, tracking restore progress during physical restores is not available. To check the restore status, the options are:</p> <ul> <li>Check the <code>stderr</code> logs of the leader <code>pbm-agent</code>. The leader ID is printed once the restore has started.</li> <li>Check the status in the metadata file created on the remote storage for the restore. This file is in the root of the storage path and has the format <code>.pbm.restore/&lt;restore_timestamp&gt;.json</code>.</li> </ul> <p></p>"},{"location":"usage/restore-progress.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"usage/restore.html","title":"Restore a backup","text":"<p>To restore a backup, use the <code>pbm restore</code> command supplying the backup name from which you intend to restore. Percona Backup for MongoDB identifies the type of the backup (physical, logical or incremental) and restores the database up to the restore_to_time timestamp (available in <code>pbm list</code> output starting with version 1.4.0).</p>"},{"location":"usage/restore.html#considerations","title":"Considerations","text":"LogicalPhysicalIncremental <ol> <li> <p>While the restore is running, prevent clients from accessing the database. The data will naturally be incomplete while the restore is in progress, and writes the clients make cause the final restored data to differ from the backed-up data.</p> </li> <li> <p>If you enabled Point-in-time recovery, disable it before running <code>pbm restore</code>. This is because Point-in-Time Recovery oplog slicing and restore are incompatible operations and cannot be run together.</p> </li> <li> <p>Backups made with Percona Backup for MongoDB prior to v1.5.0 are incompatible for restore with Percona Backup for MongoDB v1.5.0 and later. This is because processing of system collections <code>Users</code> and <code>Roles</code> has changed: in v1.5.0, <code>Users</code> and <code>Roles</code> are copied to temporary collection during backup and must be present in the backup during restore. In earlier versions of Percona Backup for MongoDB, <code>Users</code> and <code>Roles</code> are copied to a temporary collection during restore. Therefore, restoring from these backups with Percona Backup for MongoDB v1.5.0 isn\u2019t possible.</p> <p>The recommended approach is to make a fresh backup after upgrading Percona Backup for MongoDB to version 1.5.0.</p> </li> <li> <p>For versions earlier than 1.x, Percona Backup for MongoDB performs a full all-databases, all collections restore and does not offer an option to restore only a subset of collections in the backup, as MongoDB\u2019s <code>mongodump</code> tool does. </p> </li> <li> <p>Starting with versions 1.x, Percona Backup for MongoDB replicates <code>mongodump\u2019s</code> behavior to only drop collections in the backup. It does not drop collections that are created new after the time of the backup and before the restore. Run a <code>db.dropDatabase()</code> manually in all non-system databases (these are all databases except \u201clocal\u201d, \u201cconfig\u201d and \u201cadmin\u201d) before running <code>pbm restore</code> if you want to guarantee that the post-restore database only includes collections that are in the backup.</p> </li> </ol> <ol> <li>The Percona Server for MongoDB version for both backup and restore data must be within the same major release.</li> <li>For PBM versions before 2.1.0, physical restores are not supported for deployments with arbiter nodes.</li> </ol> <ol> <li>The Percona Server for MongoDB version for both backup and restore data must be within the same major release.</li> <li>Incremental backups made with PBM before PBM 2.1.0 are incompatible for restore with PBM 2.1.0 and onwards.</li> <li>Physical restores are not supported for deployments with arbiter nodes.</li> </ol>"},{"location":"usage/restore.html#before-you-start","title":"Before you start","text":"LogicalPhysicalSelectiveIncremental <ol> <li> <p>Stop the balancer.</p> </li> <li> <p>Shut down all <code>mongos</code> nodes to stop clients from accessing the database while restore is in progress. This ensures that the final restored data doesn\u2019t differ from the backed-up data.</p> </li> <li> <p>Disable point-in-time recovery if it is enabled. To learn more about point-in-time recovery, see Point-in-time recovery.</p> </li> </ol> <ol> <li>Shut down all <code>mongos</code> nodes as the database won\u2019t be available while the restore is in progress. </li> <li>Stop the arbiter nodes manually since there\u2019s no <code>pbm-agent</code> on these nodes to do that automatically.</li> </ol> <p>You can restore a specific database or a collection either from a full or a selective backup. Read about known limitations of selective restores.</p> <p>Before you start, shut down all <code>mongos</code> nodes as the database won\u2019t be available while the restore is in progress.</p>"},{"location":"usage/restore.html#restore-a-database","title":"Restore a database","text":"LogicalPhysicalSelectiveIncrementalSnapshot-based <ol> <li> <p>List the backups to restore from</p> <pre><code>$ pbm list\n</code></pre> </li> <li> <p>Restore from a desired backup. Replace the <code>&lt;backup_name&gt;</code> with the desired backup in the following command:</p> </li> </ol> <pre><code>$ pbm restore &lt;backup_name&gt;\n</code></pre> <p>Note that you can restore a sharded backup only into a sharded environment. It can be your existing cluster or a new one. To learn how to restore a backup into a new environment, see Restoring a backup into a new environment.</p> <p>Post-restore steps</p> <p>After a cluster\u2019s restore is complete, do the following:</p> <ol> <li>Start the balancer and all <code>mongos</code> nodes to reload the sharding metadata. </li> <li>We recommend to make a fresh backup to serve as the new base for future restores. </li> </ol> <ol> <li> <p>List the backups </p> <pre><code>$ pbm list\n</code></pre> </li> <li> <p>Make a restore</p> <pre><code>$ pbm restore &lt;backup_name&gt;\n</code></pre> </li> </ol> <p>During the physical restore, <code>pbm-agent</code> processes stop the <code>mongod</code> nodes, clean up the data directory and copy the data from the storage onto every node. During this process, the database is restarted several times. </p> <p>You can track the restore progress using the <code>pbm describe-restore</code> command. Don\u2019t run any other commands since they may interrupt the restore flow and cause the issues with the database.</p> <p>Post-restore steps</p> <p>After the restore is complete, do the following:</p> <ol> <li> <p>Restart all <code>mongod</code> nodes. </p> <p>Note</p> <p>You may see the following message in the <code>mongod</code> logs after the cluster restart:</p> <pre><code>\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":20712,   \"ctx\":\"LogicalSessionCacheReap\",\"msg\":\"Sessions collection is not set up; waiting until next sessions reap interval\",\"attr\":{\"error\":\"NamespaceNotFound: config.system.sessions does not exist\"}}}}\n</code></pre> <p>This is expected behavior of periodic checks upon the database start. During the restore, the <code>config.system.sessions</code> collection is dropped but Percona Server for MongoDB recreates it eventually. It is a normal procedure. No action is required from your end.</p> </li> <li> <p>Restart all <code>pbm-agents</code></p> </li> <li> <p>Run the following command to resync the backup list with the storage:</p> <pre><code>$ pbm config --force-resync\n</code></pre> </li> <li> <p>Start the balancer and start <code>mongos</code> nodes.</p> </li> <li> <p>Make a fresh backup to serve as the new base for future restores. </p> </li> </ol> <ol> <li> <p>List the backups </p> <pre><code>$ pbm list\n</code></pre> </li> <li> <p>Run the <code>pbm restore</code> command in the format:</p> <pre><code>$ pbm restore &lt;backup_name&gt; --ns &lt;database.collection&gt;\n</code></pre> </li> </ol> <p>During the restore, Percona Backup for MongoDB retrieves the file for the specified database / collection and restores it.</p> <p>Restore flow from an incremental backup is the same as the restore from a full physical backup: specify the backup name for the <code>pbm restore</code> command:</p> <pre><code>$ pbm restore 2022-11-25T14:13:43Z\n</code></pre> <p>Percona Backup for MongoDB recognizes the backup type, finds the base incremental backup, restores the data from it and then restores the modified data from applicable incremental backups.</p> <p>After the restore is complete, do the following:</p> <ol> <li> <p>Restart all <code>mongod</code> nodes and <code>pbm-agents</code>. </p> <p>Note</p> <p>You may see the following message in the <code>mongod</code> logs after the cluster restart:</p> <pre><code>\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":20712,   \"ctx\":\"LogicalSessionCacheReap\",\"msg\":\"Sessions collection is not set up; waiting until next sessions reap interval\",\"attr\":{\"error\":\"NamespaceNotFound: config.system.sessions does not exist\"}}}}\n</code></pre> <p>This is expected behavior of periodic checks upon the database start. During the restore, the <code>config.system.sessions</code> collection is dropped but Percona Server for MongoDB recreates it eventually. It is a normal procedure. No action is required from your end.</p> </li> <li> <p>Resync the backup list from the storage. </p> </li> <li>Start the balancer and the <code>mongos</code> node.</li> <li>As the general recommendation, make a new base backup to renew the starting point for subsequent incremental backups.</li> </ol> <p>See snapshot-based backups.</p>"},{"location":"usage/restore.html#adjust-memory-consumption","title":"Adjust memory consumption","text":"<p>Starting with version 1.3.2, Percona Backup for MongoDB config includes the restore options to adjust the memory consumption by the <code>pbm-agent</code> in environments with tight memory bounds. This allows preventing out of memory errors during the restore operation.</p> <pre><code>restore:\n  batchSize: 500\n  numInsertionWorkers: 10\n</code></pre> <p>The default values were adjusted to fit the setups with the memory allocation of 1GB and less for the agent.</p> <p>Note</p> <p>The lower the values, the less memory is allocated for the restore. However, the performance decreases too.</p>"},{"location":"usage/restore.html#restore-from-a-logical-backup-made-on-previous-major-version-of-percona-server-for-mongodb","title":"Restore from a logical backup made on previous major version of Percona Server for MongoDB","text":"<p>In some cases you may need to restore from a backup made on previous major version of Percona Server for MongoDB. To make this happen, Feature Compatibility Version (FCV) values in both backup and the destination environment must match. </p> <p>Starting with version 2.1.0, Percona Backup for MongoDB stores the FCV value in the backup metadata. If it doesn\u2019t match the FCV value on the destination environment, you see the warning in the <code>pbm status</code> output so that you can manually adjust it before the restore.</p> <pre><code>2023-04-10T10:48:54Z 302.80KB &lt;logical&gt; [ERROR: backup FCV \"6.0\" is incompatible with the running mongo FCV \"5.0\"] [2023-04-10T10:49:14Z]\n2023-04-10T08:40:10Z 172.25KB &lt;logical&gt; [ERROR: backup mongo version \"6.0.5-4\" is incompatible with the running mongo version \"5.0.15-13\"] [2023-04-10T08:40:28Z]\n</code></pre> <p>The following example illustrates the restore from a backup made on Percona Server for MongoDB 4.4 on Percona Server for MongoDB 5.0.</p> <ol> <li> <p>Check the FCV value for the backup</p> <pre><code>$ pbm status\n</code></pre> <p>Sample output: </p> <pre><code>Snapshots:\n2023-04-10T10:51:28Z 530.73KB &lt;logical&gt; [ERROR: backup FCV \"4.4\" is incompatible with the running mongo FCV \"5.0\"] [2023-04-10T10:51:44Z]\n</code></pre> </li> <li> <p>Set the Feature Compatibility Version value to 4.4</p> <pre><code>&gt; db.adminCommand( { setFeatureCompatibilityVersion: \"4.4\" } )\n</code></pre> </li> <li> <p>Restore the database</p> <pre><code>$ pbm restore 2023-04-10T10:51:28Z\n</code></pre> </li> <li> <p>Set the Feature Compatibility Version value to 5.0</p> <pre><code>&gt; db.adminCommand( { setFeatureCompatibilityVersion: \"5.0\" } )\n</code></pre> </li> </ol>"},{"location":"usage/restore.html#define-a-mongod-binary-location","title":"Define a <code>mongod</code> binary location","text":"<p>Version added: 2.0.4</p> <p>During physical restores, Percona Backup for MongoDB performs several restarts of the database. By default, it uses the location of the <code>mongod</code> binaries from the <code>$PATH</code> variable to access the database. If you have defined the custom path to the <code>mongod</code> binaries, make Percona Backup for MongoDB aware of it by specifying this path in the configuration file: </p> <pre><code>restore:\n    mongodLocation: /path/to/mongod\n</code></pre> <p>If you have different paths to <code>mongod</code> binaries on every node of your cluster / replica set, use the <code>mongodLocationMap</code> option to specify your custom paths for each node.</p> <pre><code>restore:\n    mongodLocationMap:\n       \"node01:27017\": /path/to/mongod\n       \"node03:27017\": /another/path/to/mongod\n</code></pre>"},{"location":"usage/restore.html#parallel-data-download","title":"Parallel data download","text":"<p>Version added: 2.1.0</p> <p>Percona Backup for MongoDB downloads data chunks from the S3 storage concurrently during physical restore. Read more about benchmarking results in the Speeding up MongoDB restores in PBM blog post by Andrew Pogrebnoi.</p> <p>Here\u2019s how it works:</p> <p>During the physical restore, Percona Backup for MongoDB starts the workers. The number of workers equals to the number of CPU cores by default. Each worker has a memory buffer allocated for it. The buffer is split into spans for the size of the data chunk. The worker acquires the span to download a data chunk and stores it into the buffer. When the buffer is full, the worker waits for the free span to continue the download.   </p> <p>You can fine-tune the parallel download depending on your hardware resources and database load. Edit the PBM configuration file and specify the following settings:</p> <pre><code>restore:\n   numDownloadWorkers: &lt;int&gt;\n   maxDownloadBufferMb: &lt;int&gt;\n   downloadChunkMb: 32\n</code></pre> <ul> <li><code>numDownloadWorkers</code> - the number of workers to download data from the storage. By default, it equals to the number of CPU cores</li> <li><code>maxDownloadBufferMb</code> - the maximum size of memory buffer to store the downloaded data chunks for decompression and ordering. It is calculated as <code>numDownloadWorkers * downloadChunkMb * 16</code></li> <li><code>downloadChunkMb</code> is the size of the data chunk to download (by default, 32 MB)</li> </ul>"},{"location":"usage/restore.html#restoring-a-backup-into-a-new-environment","title":"Restoring a backup into a new environment","text":"<p>To restore a backup from one environment to another, ensure the following:</p> <ol> <li> <p>Percona Backup for MongoDB configuration in the new environment must point to the same remote storage that is defined for the original environment, including the authentication credentials if it is an object store. Once you run <code>pbm list</code> and see the backups made from the original environment, then you can run the <code>pbm restore</code> command.</p> </li> <li> <p>Don\u2019t run <code>pbm backup</code> from the new environment while Percona Backup for MongoDB configuration is pointing to the remote storage location of the original environment.</p> </li> </ol>"},{"location":"usage/restore.html#restoring-into-a-cluster-replica-set-with-a-different-name","title":"Restoring into a cluster / replica set with a different name","text":"<p>Starting with version 1.8.0, you can restore logical backups into a new environment that has the same or more number of shards and these shards have different replica set names.  Starting with version 2.2.0, you can restore environments that have custom shard names. </p> <p>Starting with version 2.2.0, you can restore physical and incremental physical backups into a new environment with a different replica set names. Note that the number of shards must be the same as in the environment where the you made the backup.</p> <p>To restore data to the environment with different replica set names, configure the name mapping between the source and target environments. You can either set the <code>PBM_REPLSET_REMAPPING</code> environment variable for <code>pbm</code> CLI or use the <code>--replset-remapping</code> flag for PBM commands. The mapping format is <code>&lt;rsTarget&gt;=&lt;rsSource&gt;</code>.</p> <p>Important</p> <p>Configure replica set name mapping for all shards in your cluster. Otherwise, Percona Backup for MongoDB attempts to restore the unspecified shard to the target shard with the same name. If there is no shard with such name or it is already mapped to another source shard, the restore fails.</p> <p>Configure the replica set name mapping:</p> Using the environment variable for <code>pbm</code> CLI in your shellUsing the command line <pre><code>$ export PBM_REPLSET_REMAPPING=\"rsX=rsA,rsY=rsB\"\n</code></pre> <pre><code>$ pbm restore &lt;timestamp&gt; --replset-remapping=\"rsX=rsA,rsY=rsB\"\n</code></pre> <p>The <code>--replset-remapping</code> flag is available for the following commands: <code>pbm restore</code>, <code>pbm list</code>, <code>pbm status</code>, <code>pbm oplog-replay</code>.</p> <p>Note</p> <p>Follow the post-restore steps on the new environment after the restore is complete.</p> <p>This ability to restore data to clusters with different replica set names and the number of shards extends the set of environments compatible for the restore.</p>"},{"location":"usage/restore.html#next-steps","title":"Next steps","text":"<p>Point-in-time recovery</p>"},{"location":"usage/restore.html#useful-links","title":"Useful links","text":"<ul> <li>View restore progress</li> </ul>"},{"location":"usage/restore.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"usage/schedule-backup.html","title":"Schedule backups","text":"<p>We recommend using <code>crond</code> or similar services to schedule backup snapshots.</p> <p>Important</p> <p>Before configuring <code>crond</code>, make sure that you have installed and configured Percona Backup for MongoDB to make backups in your database. Start a backup manually to verify this: </p> <pre><code>$ pbm backup\n</code></pre> <p>The recommended approach is to create a <code>crontab</code> file in the <code>/etc/cron.d</code> directory and specify the command in it. This simplifies server administration especially if multiple users have access to it.</p> <p><code>pbm</code> CLI requires a valid MongoDB URI connection string to authenticate in MongoDB. Instead of specifying the MongoDB URI connection string as a command line argument, which is a potential security risk, we recommend creating an environment file and specify the <code>export PBM_MONGODB_URI=$PBM_MONGODB_URI</code> statement within.</p> <p>As an example, let\u2019s configure to run backup snapshots on 23:30 every Sunday. The steps are the following:</p> <ol> <li> <p>Create an environment file. Let\u2019s name it <code>pbm-cron</code>.</p> Debian and UbuntuRed Hat Enterprise Linux and derivatives <pre><code>$ vim /etc/default/pbm-cron\n</code></pre> <pre><code>$ vim /etc/sysconfig/pbm-cron\n</code></pre> </li> <li> <p>Specify the environment variable in <code>pbm-cron</code>:</p> <pre><code>$ export PBM_MONGODB_URI=\"mongodb://pbmuser:secretpwd@localhost:27017?/replSetName=xxxx\"\n</code></pre> </li> <li> <p>Grant access to the <code>pbm-cron</code> file for the user that will execute the <code>cron</code> task.</p> </li> <li> <p>Create a <code>crontab</code> file. Let\u2019s name it <code>pbm-backup</code>.</p> <pre><code>$ touch pbm-backup\n</code></pre> </li> <li> <p>Specify the command in the file:</p> <pre><code>30 23 * * sun &lt;user-to-execute-cron-task&gt; . /etc/default/pbm-cron; /usr/bin/pbm backup\n</code></pre> <p>Note the dot <code>.</code> before the environment file. It sources (includes) the environment file for the rest of the shell commands.</p> </li> <li> <p>Verify that backups are running in <code>/var/log/cron</code> or <code>/var/log/syslog</code> logs:</p> <pre><code>$ grep CRON /var/log/syslog\n</code></pre> </li> </ol>"},{"location":"usage/schedule-backup.html#schedule-backups-with-point-in-time-recovery-running","title":"Schedule backups with point-in-time recovery running","text":"<p>It is convenient to automate making backups on a schedule using <code>crond</code> if you enabled point-in-time recovery.</p> <p>You can configure point-in-time recovery and <code>crond</code> in any order. Note, however, that point-in-time recovery will start running only after at least one full backup has been made.</p> <ul> <li>Make a fresh backup manually. It will serve as the starting point for incremental backups.</li> <li>Enable point-in-time recovery.</li> <li>Configure <code>crond</code> to run backup snapshots on a schedule.</li> </ul> <p>When it is time for another backup snapshot, Percona Backup for MongoDB automatically disables point-in-time recovery and re-enables it once the backup is complete.</p>"},{"location":"usage/schedule-backup.html#backup-storage-cleanup","title":"Backup storage cleanup","text":"<p>Previous backups are not automatically removed from the backup storage. You need to remove the oldest ones periodically to limit the amount of space used in the backup storage.</p> <p>Version added: 2.1.0</p> <p>Starting with version 2.1.0, you can use the <code>pbm cleanup --older-than</code> command to delete outdated backup snapshots and point-in-time recovery oplog slices. You can configure a <code>cron</code> task to automate storage cleanup by specifying the following command in the <code>crontab</code> file:</p> <pre><code>$ $ /usr/bin/pbm cleanup -y --older-than 30d --wait\n</code></pre> <p>This command deletes backups and oplog slices that are older than 30 days. You can change the period by specifying a desired interval for the <code>--older-than</code> flag. </p> <p>For PBM version 2.0.5 and earlier, use the <code>pbm delete backup --older-than &lt;timestamp&gt;</code> command. You can configure a <code>cron</code> task to automate backup deletion by specifying the following command in the <code>crontab</code> file:</p> <pre><code>$ /usr/bin/pbm delete-backup -f --older-than $(date -d '-1 month' +\\%Y-\\%m-\\%d) \n</code></pre> <p>This command deletes backups that are older than 30 days. You can change the period by specifying a desired interval for the <code>date</code> function.</p> <p></p>"},{"location":"usage/schedule-backup.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"},{"location":"usage/start-backup.html","title":"Make a backup","text":""},{"location":"usage/start-backup.html#before-you-start","title":"Before you start","text":"<ol> <li>Install and set up Percona Backup for MongoDB</li> <li>Check that <code>pbm agent</code> is running with the <code>pbm status</code> command</li> </ol>"},{"location":"usage/start-backup.html#make-a-backup_1","title":"Make a backup","text":"LogicalPhysicalSelectiveIncrementalSnapshot-based <p>To make a backup, run the following command:</p> <pre><code>$ pbm backup --type=logical\n</code></pre> <p>Logical backup is the default one so you can bypass the <code>--type</code> flag. </p> <p>During logical backups, Percona Backup for MongoDB copies the actual data to the backup storage.</p> <p>Starting with version 2.0.0, Percona Backup for MongoDB stores data in the new multi-file format where each collection has a separate file. The oplog is stored for all namespaces regardless whether this is a full or selective backup.</p> <p>Multi-format is now the default data format since it allows selective restore. Note, however, that you can make only full restores from backups made with earlier versions of Percona Backup for MongoDB.</p> <p>Version added: 1.7.0</p> <pre><code>$ pbm backup --type=physical\n</code></pre> <p>During a physical backup, Percona Backup for MongoDB stops point-in-time recovery oplog slicing if it\u2019s enabled, copies the contents of the <code>dbpath</code> directory (data and metadata files, indexes, journal and logs) from every shard and config server replica set to the backup storage.</p> <p>Version added: 2.0.0</p> <p>Before you start, read about selective backups known limitations.</p> <p>To make a selective backup,  run the <code>pbm backup</code> command and provide the value for the <code>--ns</code> flag in the format <code>&lt;database.collection&gt;</code>. The <code>--ns</code> flag value is case sensitive. For example, to back up the \u201cPayments\u201d collection, run the following command:</p> <pre><code>$ pbm backup --ns=staff.Payments\n</code></pre> <p>To back up the \u201cInvoices\u201d database and all collections that it includes, run the <code>pbm backup</code> command as follows:</p> <pre><code>$ pbm backup --ns=Invoices.*\n</code></pre> <p>During the backup process, Percona Backup for MongoDB stores data in the new multi-file format where each collection has a separate file. The oplog is stored for all namespaces regardless whether this is a full or selective backup.</p> <p>Multi-format is now the default data format for both full and selective backups since it allows selective restore. Note, however, that you can make only full restores from backups made with earlier versions of Percona Backup for MongoDB. </p> <p>Version added: 2.0.3</p> <p>Before you start, read more about incremental backup.</p> <p>To start incremental backups, first make a full incremental backup. It will serve as the base for subsequent incremental backups:</p> <pre><code>$ pbm backup --type incremental --base\n</code></pre> <p>The <code>pbm-agent</code> starts tracking the incremental backup history to be able to calculate and save the difference in data blocks. After that you can run regular incremental backups:</p> <pre><code>$ pbm backup --type incremental\n</code></pre> <p>The incremental backup history looks like this:</p> <pre><code>Snapshots:\n    2022-11-25T14:13:43Z 139.82MB &lt;incremental&gt; [restore_to_time: 2022-11-25T14:13:45Z]\n    2022-11-25T14:02:07Z 255.20MB &lt;incremental&gt; [restore_to_time: 2022-11-25T14:02:09Z]\n    2022-11-25T14:00:22Z 228.30GB &lt;incremental&gt; [restore_to_time: 2022-11-25T14:00:24Z]\n    2022-11-24T14:45:53Z 220.13GB &lt;incremental, base&gt; [restore_to_time: 2022-11-24T14:45:55Z]\n</code></pre> <p>See snapshot-based backups.</p>"},{"location":"usage/start-backup.html#compressed-backups","title":"Compressed backups","text":"<p>By default, Percona Backup for MongoDB uses the <code>s2</code> compression method when making a backup.</p> <p>You can start a backup with a different compression method by passing the <code>--compression</code> flag to the pbm backup command.</p> <p>For example, to start a backup with <code>gzip</code> compression, use the following command:</p> <pre><code>$ pbm backup --compression=gzip\n</code></pre> <p>Supported compression types are: <code>gzip</code>, <code>snappy</code>, <code>lz4</code>, <code>pgzip</code>, <code>zstd</code>.  The <code>none</code> value means no compression is done during backup.</p> <p>As of version 1.7.0, you can configure the compression level for backups. Specify the value for the <code>--compression-level</code> flag. </p> <p>Default compression levels differ per compression method used. </p> <p>The following table shows available compression levels per compression method:</p> Compression method Supported compression levels Default <code>zstd</code> 1 - fastest speed, 2 - default, 3 - better compression, 4 - best compression 2 <code>snappy</code> no levels <code>lz4</code> From 1 (fastest) to 16 1 <code>gzip</code> and <code>pgzip</code> -1 - default compression, 0 - no compression, 1 - best speed, 9 - best compression -1 <p>Note that the higher value you specify, the more time and computing resources it will take to compress the data.</p>"},{"location":"usage/start-backup.html#backups-in-sharded-clusters","title":"Backups in sharded clusters","text":"<p>For PBM v1.0 (only)</p> <p>Before running pbm backup on a cluster, stop the balancer.</p> <p>In sharded clusters, one of the pbm-agent processes for every shard and the config server replica set writes backup snapshots  into the remote backup storage directly. For logical backups, <code>pbm-agents</code> also write oplog slices. To learn more about oplog slicing, see Point-in-Time Recovery.</p> <p>The <code>mongos</code> nodes are not involved in the backup process.</p> <p>The following diagram illustrates the backup flow.</p> <p></p> <p>Important</p> <p>If you reshard a collection in MongoDB 5.0 and higher versions, make a fresh backup to prevent data inconsistency and restore failure.</p>"},{"location":"usage/start-backup.html#adjust-node-priority-for-backups","title":"Adjust node priority for backups","text":"<p>In Percona Backup for MongoDB prior to version 1.5.0, the <code>pbm-agent</code> to do a backup is elected randomly among secondary nodes in a replica set. In sharded cluster deployments, the <code>pbm-agent</code> is elected among the secondary nodes in every shard and the config server replica sets. If no secondary node responds in a defined period, then the <code>pbm-agent</code> on the primary node is elected to do a backup.</p> <p>As of version 1.5.0, you can influence the <code>pbm-agent</code> election by assigning a priority to <code>mongod</code> nodes in the Percona Backup for MongoDB configuration file.</p> <pre><code>backup:\n  priority:\n    \"localhost:28019\": 2.5\n    \"localhost:27018\": 2.5\n    \"localhost:27020\": 2.0\n    \"localhost:27017\": 0.1\n</code></pre> <p>The format of the priority array is <code>&lt;hostname:port&gt;</code>:<code>&lt;priority&gt;</code>.</p> <p>To define priority in a sharded cluster, you can either list all nodes or specify priority for one node in each shard and config server replica set. The <code>hostname</code> and <code>port</code> uniquely identifies a node so that Percona Backup for MongoDB recognizes where it belongs to and grants the priority accordingly.</p> <p>Note that if you listed only specific nodes, the remaining nodes will be automatically assigned priority <code>1.0</code>. For example, you assigned priority <code>2.5</code> to only one secondary node in every shard and config server replica set of the sharded cluster.</p> <pre><code>backup:\n  priority:\n    \"localhost:27027\": 2.5  # config server replica set\n    \"localhost:27018\": 2.5  # shard 1\n    \"localhost:28018\": 2.5  # shard 2\n</code></pre> <p>The remaining secondaries and the primary nodes in the cluster receive priority <code>1.0</code>.</p> <p>The <code>mongod</code> node with the highest priority makes the backup. If this node is unavailable, the next priority node is selected. If there are several nodes with the same priority, one of them is randomly elected to make the backup.</p> <p>If you haven\u2019t listed any nodes for the <code>priority</code> option in the config, the nodes have the default priority for making backups as follows:</p> <ul> <li>hidden nodes - priority 2.0</li> <li>secondary nodes - priority 1.0</li> <li>primary node - priority 0.5</li> </ul> <p>Important</p> <p>As soon as you adjust node priorities in the configuration file, it is assumed that you take manual control over them. The default rule to prefer secondary nodes over primary stops working.</p> <p>This ability to adjust node priority helps you manage your backup strategy by selecting specific nodes or nodes from preferred data centers. In geographically distributed infrastructures, you can reduce network latency by making backups from nodes in geographically closest locations.</p>"},{"location":"usage/start-backup.html#next-steps","title":"Next steps","text":"<ul> <li>List backups</li> <li>Make a restore</li> </ul>"},{"location":"usage/start-backup.html#useful-links","title":"Useful links","text":"<ul> <li>Backup and restore types</li> <li>Schedule backups</li> </ul>"},{"location":"usage/start-backup.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p>"}]}